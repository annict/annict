- title = t "head.title.records.show", profile_name: @user.profile.name, username: @user.username, work_title: @work.decorate.local_title, episode_title_with_number: @episode.decorate.title_with_number
- description = meta_description(t("head.meta.description.records.show", profile_name: @user.profile.name, username: @user.username, work_title: @work.decorate.local_title, episode_title_with_number: @episode.decorate.title_with_number))
- keywords = meta_keywords(@work.decorate.local_title)
- image_url = ann_image_url(@work.work_image, :attachment, size: "640x")
- set_meta_tags(title: title, description: description, keywords: keywords, og: { description: description }, twitter: { description: description, image: image_url }, reverse: true, prefix: false)
- breadcrumb :record_detail, @record

- unless current_user&.supporter?
  .mb-3.text-center
    = render "application/components/adsense", slots: [ENV["GOOGLE_AD_320x50_11"]], size: "320x50"

.c-card.py-3.mb-3
  .p-records-show__work-info.px-3
    .row
      .col.u-flex-grow-0.p-records-show__work-image.pr-0
        = link_to work_path(@work) do
          = image_tag ann_image_url(@work.work_image, :attachment, size: "280x373"), class: "img-fluid img-thumbnail rounded"
        - if @work.work_image.present?
          .u-very-small.mt-1
            = @work.work_image.decorate.asin_or_copyright_text
      .col
        h1.h2
          = link_to work_path(@work), class: "u-text-body" do
            = @work.decorate.local_title
        = link_to work_episode_path(@work, @episode), class: "u-text-body mb-2 d-inline-block" do
          = @episode.decorate.title_with_number
        c-status-selector :work-id="#{@work.id}"

h2.h4.text-center.mb-3.font-weight-bold
  = t "messages.records.show.record_by_name", name: @user.profile.name

.c-card.py-3.mb-3
  .p-records-show__record.px-3
    = render "records/record", record: @record, is_spoiler: @is_spoiler
  hr
  .px-3
    - if user_signed_in?
      .p-records-show__comment-form
        = form_for @comment, url: record_comments_path(@user.username, @record) do |f|
          = render "application/components/error_panel", resource: @comment
          = f.text_area :body, class: "form-control", rows: "5", placeholder: t("messages.comments.comment_form_placeholder")
          .w-100.text-center
            = f.button class: "btn btn-primary mt-2" do
              = icon "pencil-alt"
              = t "messages.comments.create"
      hr
    - if @comments.present?
      - @comments.each do |comment|
        .c-record-comment
          .row
            .c-record-comment__avatar.col.pr-0.u-flex-grow-0
              = link_to user_path(comment.user.username) do
                = ann_image_tag comment.user.profile, :tombo_avatar, size: "50x50", class: "rounded-circle"
            .col
              .row.mb-2
                .col
                  = link_to comment.user.profile.name, user_path(comment.user.username)
                .col
                  .small.text-right
                    = local_time_ago_in_words(comment.created_at)
              c-body inline-template=""
                .c-body__content = comment.body
          - if policy(comment).update?
            .small.text-right.mb-2
              = link_to edit_comment_path(comment), class: "mr-2" do
                = icon "edit", class: "mr-1"
                = t "noun.edit"
              = link_to comment_path(comment), method: :delete, data: { confirm: t("messages._common.are_you_sure") } do
                = icon "trash-alt", "far", class: "mr-1"
                = t "noun.delete"
    - else
      = render "application/components/empty", text: t("resources.comment.no_comments")

= render "application/components/breadcrumb"
= render "application/components/footer"
c-tabbar

- content_for :js_templates do
  = render "application/js_templates/like_button"
  = render "application/js_templates/rating_state_label"
  = render "application/js_templates/status_selector"
  = render "application/js_templates/mute_user_button"