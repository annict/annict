# frozen_string_literal: true

json = {
  action: activity.action,
  created_at: activity.created_at,
  user: {
   username: activity.user.username
  },
  profile: {
   avatar_url: ann_image_url(activity.user.profile, :image, size: "60x60"),
   name: activity.user.profile.name
  },
  viewer: {
   status: {
     kind: statuses.select { |k| k[:work_id] == activity.work.id }.first[:kind]
   }
  },
  meta: {
   liked: !user.nil? && !activity.user_like_id.nil?
  }
}

action_json = case activity.action
when "create_episode_record" then
  episode = activity.episode
  episode_record = activity.episode_record

  {
    work: {
      id: episode.work.id,
      title: episode.work.local_title,
      is_single: episode.local_title == episode.work.local_title
    },
    item: {
      image_url: ann_image_url(episode.work.work_image, :image, size: "125x", ratio: "3:4")
    },
    episode: {
      id: episode.id,
      number: episode.local_number,
      title: episode.local_title(fallback: false)
    },
    episode_record: {
      id: episode_record.id,
      body: episode_record.body,
      comments_count: episode_record.comments_count,
      likes_count: episode_record.likes_count,
      rating: episode_record.rating,
      rating_state: episode_record.rating_state,
      hide_body: !user.nil? && user.setting.hide_record_body? && !activity.user_library_entry_id.nil? && activity.user_episode_record_id.nil?
    },
    record: {
      id: episode_record.record_id
    }
  }
when "create_multiple_episode_records" then
  work = activity.work
  multiple_episode_record = activity.multiple_episode_record

  data = {
    work: {
      id: work.id,
      title: work.title
    },
    item: {
      image_url: ann_image_url(work.work_image, :image, size: "125x", ratio: "3:4")
    },
    multiple_record: {
      id: multiple_episode_record.id,
      likes_count: multiple_episode_record.likes_count
    }
  }

  episode_records = multiple_episode_record.
    episode_records.
    eager_load(:episode).
    order("episodes.sort_number ASC")
  data[:episodes] = episode_records.map do |episode_record|
    {
      id: episode_record.episode.id,
      number: episode_record.episode.number,
      title: episode_record.episode.title
    }
  end

  data
when "create_status" then
  work = activity.work
  status = activity.status

  {
    work: {
      id: work.id,
      title: work.local_title
    },
    item: {
      image_url: ann_image_url(work.work_image, :image, size: "125x", ratio: "3:4")
    },
    status: {
      id: status.id,
      likes_count: status.likes_count,
      kind: activity.status.kind,
      kind_text: activity.status.kind.text
    }
  }
when "create_work_record" then
  work = activity.work
  work_record = activity.work_record

  {
    work: {
      id: work.id,
      title: work.local_title
    },
    item: {
      image_url: ann_image_url(work.work_image, :image, size: "125x", ratio: "3:4")
    },
    work_record: {
      id: work_record.id,
      record_id: work_record.record_id,
      body: work_record.body,
      rating_overall_state: work_record.rating_overall_state,
      likes_count: work_record.likes_count,
      hide_work_record_body: !user.nil? && user.setting.hide_record_body? && !activity.user_library_entry_id.nil? && activity.user_work_record_id.nil?
    }
  }
end

json.merge!(action_json)

json
