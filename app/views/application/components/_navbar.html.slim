- is_transparent = local_assigns.fetch(:is_transparent, false)
- is_on_cover_image = local_assigns.fetch(:is_on_cover_image, false)

nav.c-navbar.navbar class="#{is_transparent ? 'navbar-dark is-transparent' : 'navbar-light navbar-fixed-top'} #{is_on_cover_image ? 'is-on-cover-image' : ''}"
  = link_to root_path, class: "navbar-brand" do
    = image_tag "logos/color-#{is_transparent ? 'white' : 'mizuho'}.png", size: "25x30", alt: "Annict"
  ul.nav.navbar-nav
    - if user_signed_in?
      li.nav-item
        = link_to t("head.title.programs.index"), programs_path, class: "nav-link"
      li.nav-item.dropdown
        = link_to t("words.watching"), user_works_path(current_user.username, :watching), class: "nav-link"
        .dropdown-menu
          = link_to t("words.plan_to_watch"), user_works_path(current_user.username, :wanna_watch), class: "dropdown-item"
          = link_to t("words.completed"), user_works_path(current_user.username, :watched), class: "dropdown-item"
          = link_to t("words.on_hold"), user_works_path(current_user.username, :on_hold), class: "dropdown-item"
          = link_to t("words.dropped"), user_works_path(current_user.username, :stop_watching), class: "dropdown-item"
      li.nav-item.dropdown
        = link_to t("words.airing_anime"), season_works_path(slug: ENV.fetch("ANNICT_CURRENT_SEASON")), class: "nav-link"
        .dropdown-menu
          = link_to t("words.next_season"), season_works_path(slug: ENV.fetch("ANNICT_NEXT_SEASON")), class: "dropdown-item"
          = link_to t("words.previous_season"), season_works_path(slug: ENV.fetch("ANNICT_PREVIOUS_SEASON")), class: "dropdown-item"
          = link_to t("words.popular"), popular_works_path, class: "dropdown-item"
    - else
      li.nav-item
        = link_to t("words.airing_anime"), season_works_path(slug: ENV.fetch("ANNICT_CURRENT_SEASON")), class: "nav-link"
    li.nav-item
      c-search-form q="#{@search.q}"
  ul.nav.navbar-nav.float-xs-right
    - if user_signed_in?
      li.nav-item.dropdown
        = link_to user_path(current_user.username), class: "nav-link" do
          = ann_image_tag(current_user.profile, :tombo_avatar, size: "30x30", alt: current_user.profile.name, class: "rounded-circle")
        - if current_user.notifications_count > 0
            .c-navbar__notifications-count
              = current_user.notifications_count
        .dropdown-menu
          = link_to notifications_path, class: "dropdown-item" do
            = t "head.title.notifications.index"
            - if current_user.notifications_count > 0
              span.c-navbar__notifications-count--in-dropdown
                = current_user.notifications_count
          = link_to t("head.title.friends.index"), friends_path, class: "dropdown-item"
          = link_to t("head.title.channels.index"), channels_path, class: "dropdown-item"
          = link_to t("words.settings"), profile_path, class: "dropdown-item"
          = link_to t("words.annict_db"), db_root_path, class: "dropdown-item"
          = link_to t("words.annict_api"), "https://annict.wikihub.io/wiki/api", target: "_blank", class: "dropdown-item"
          = link_to t("head.title.pages.about"), about_path, class: "dropdown-item"
          = link_to t("words.sign_out"), destroy_user_session_path, method: "delete", class: "dropdown-item"
    - else
      li.nav-item
        = link_to t("head.title.pages.about"), about_path, class: "nav-link"
      li.nav-item
        = link_to t("head.title.sessions.new"), new_user_session_path, class: "nav-link"
      li.nav-item
        = link_to t("head.title.registrations.new"), new_user_registration_path, class: "nav-link btn btn-outline-primary"
