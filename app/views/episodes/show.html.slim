- title = t "head.title.episodes.show", work_title: @work.decorate.local_title, episode_title_with_number: @episode.decorate.title_with_number
- description = meta_description(t("head.meta.description.episodes.show", work_title: @work.decorate.local_title, episode_title_with_number: @episode.decorate.title_with_number))
- keywords = meta_keywords(@work.decorate.local_title)
- image_url = ann_image_url(@work.work_image, :attachment, size: "640x")
- set_meta_tags(title: title, description: description, keywords: keywords, og: { description: description, image: image_url }, twitter: { description: description, image: image_url }, reverse: true, prefix: false)

- breadcrumb :episode_detail, @episode

= render "application/components/navbar"

.p-application__content
  .container.py-3.mb-3
    = render "application/components/breadcrumb"
    .row
      .col-3.pr-0
        = render "works/sidebar", work: @work
      .col-9
        = render "works/subnav", work: @work

        - if @all_comment_records.total_count != 0
          c-adsense-container.text-center.my-3 :slots="['#{ENV['GOOGLE_AD_728x90_9']}']" ad-size="728x90"

        .c-card.container.py-3.my-3
          = render "episodes/nav", work: @work, episode: @episode
        .row
          .col-9.pr-0
            .c-card.py-3
              - if user_signed_in?
                .container
                  = render "records/form", record: @record, url: episode_records_path(@episode)
                  hr
              .container
                - if user_signed_in?
                  .text-center.mb-3
                    .btn-group.btn-group-sm
                      = active_link_to switch_episode_records_path(@episode, to: :all_comments), class: "btn", class_active: "btn-primary", class_inactive: "btn-secondary", active: (user_signed_in? ? current_user.setting.display_option_record_list.all_comments? : false ), data: { method: :post } do
                        = t "noun.all_comments"
                        span.ml-1 = "(#{@all_comment_records.total_count})"
                      = active_link_to switch_episode_records_path(@episode, to: :friend_comments), class: "btn", class_active: "btn-primary", class_inactive: "btn-secondary", active: (user_signed_in? ? current_user.setting.display_option_record_list.friend_comments? : false ), data: { method: :post } do
                        = t "noun.friend_comments"
                        span.ml-1 = "(#{@friend_comment_records.total_count})"
                      = active_link_to switch_episode_records_path(@episode, to: :my_records), class: "btn", class_active: "btn-primary", class_inactive: "btn-secondary", active: (user_signed_in? ? current_user.setting.display_option_record_list.my_records? : false ), data: { method: :post } do
                        = t "noun.my_records"
                        span.ml-1 = "(#{@my_records.total_count})"
                - if @selected_comment_records.present?
                  - if user_signed_in?
                    .text-right.mb-3
                      c-record-sorter current-url="#{request.url}"
                  .c-record-list
                    - @selected_comment_records.each do |record|
                      = render "records/record", record: record, is_spoiler: @is_spoiler
                  - if @selected_comment_records.total_pages > 1
                    .mt-4.text-center
                      = paginate @selected_comment_records
                - else
                  = render "application/components/empty", text: t("messages.episodes.no_comments")

            .row.align-items-center
              .col
              .col
                h2.h4.text-center.my-4.font-weight-bold
                  = t "noun.related_items"
              .col.text-right
                = link_to new_episode_item_path(@episode), class: "btn btn-primary btn-sm" do
                  = icon "plus", class: "mr-1"
                  = t "verb.regist_item"
            .c-card.container.mb-3.py-2
              = render "episodes/item_list", episode: @episode, items: @items

            - if @all_comment_records.total_count != 0
              c-adsense-container.text-center.mt-3 :slots="['#{ENV['GOOGLE_AD_300x250_3']}', '#{ENV['GOOGLE_AD_300x250_4']}']" ad-size= "300x250"

          .col-3.pl-0
            .mb-4
              .small.font-weight-bold.mb-2.text-center
                = t "noun.stats"
              .row.align-items-center
                .col.text-right
                  .small.text-muted
                    = t "noun.satisfaction_rate_shorten"
                .col.pl-0
                  .h3
                    = @episode.satisfaction_rate.presence || "-"
                    span.small.ml-1
                      | %
              .row.align-items-center
                .col.text-right
                  .small.text-muted
                    - if locale_ja?
                      = t "noun.records_count"
                    - else
                      = t "noun.records"
                .col.pl-0
                  .h3
                    = @all_records.count
              .row.align-items-center
                .col.text-right
                  .small.text-muted
                    = t "noun.ratings_count"
                .col.pl-0
                  .h3
                    = @episode.ratings_count
              .row.align-items-center
                .col.text-right
                  .small.text-muted
                    = t "noun.comments_count"
                .col.pl-0
                  .h3
                    = @all_records.with_comment.count
            .mb-3.text-center
              .small.font-weight-bold
                = t "noun.rating"
              c-episode-rating-state-chart init-dataset="#{@episode.rating_state_chart_dataset}"
            .text-center
              .small.font-weight-bold
                - if locale_ja?
                  = t "noun.records_count"
                - else
                  = t "noun.records"
              c-episode-records-chart init-dataset="#{@episode.records_chart_dataset}"

= render "application/components/footer"

- content_for :js_templates do
  = render "application/js_templates/like_button"
  = render "application/js_templates/mute_user_button"
  = render "application/js_templates/rating_state_label"
  = render "application/js_templates/record_sorter"
