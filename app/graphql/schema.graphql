enum ActivityAction {
  CREATE
}

# The connection type for Activity.
type ActivityConnection {
  # A list of edges.
  edges: [ActivityEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ActivityEdge {
  action: ActivityAction!
  annictId: Int!

  # A cursor for use in pagination.
  cursor: String!
  node: ActivityItem
  user: User!
}

union ActivityItem = MultipleRecord | Record | Review | Status

input ActivityOrder {
  direction: OrderDirection!
  field: ActivityOrderField!
}

enum ActivityOrderField {
  CREATED_AT
}

type Channel implements Node {
  annictId: Int!
  channelGroup: ChannelGroup!
  id: ID!
  name: String!
  programs(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): ProgramConnection
  published: Boolean!
  scChid: Int!
}

# The connection type for Channel.
type ChannelConnection {
  # A list of edges.
  edges: [ChannelEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ChannelEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Channel
}

type ChannelGroup implements Node {
  annictId: Int!
  channels(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): ChannelConnection
  id: ID!
  name: String!
  sortNumber: Int!
}

# Autogenerated input type of CreateRecord
input CreateRecordInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  comment: String
  episodeId: ID!
  ratingState: RatingState
  shareFacebook: Boolean
  shareTwitter: Boolean
}

# Autogenerated return type of CreateRecord
type CreateRecordPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  record: Record
}

# Autogenerated input type of CreateReview
input CreateReviewInput {
  body: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  ratingAnimationState: RatingState
  ratingCharacterState: RatingState
  ratingMusicState: RatingState
  ratingOverallState: RatingState
  ratingStoryState: RatingState
  shareFacebook: Boolean
  shareTwitter: Boolean
  title: String
  workId: ID!
}

# Autogenerated return type of CreateReview
type CreateReviewPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  review: Review
}

scalar DateTime

# Autogenerated input type of DeleteRecord
input DeleteRecordInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  recordId: ID!
}

# Autogenerated return type of DeleteRecord
type DeleteRecordPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  episode: Episode
}

# Autogenerated input type of DeleteReview
input DeleteReviewInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  reviewId: ID!
}

# Autogenerated return type of DeleteReview
type DeleteReviewPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  work: Work
}

# An episode of a work
type Episode implements Node {
  annictId: Int!
  id: ID!
  nextEpisode: Episode
  number: Int
  numberText: String
  prevEpisode: Episode
  recordCommentsCount: Int!
  records(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int
    hasComment: Boolean

    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: RecordOrder
  ): RecordConnection
  recordsCount: Int!
  sortNumber: Int!
  title: String
  viewerDidTrack: Boolean!
  viewerRecordsCount: Int!
  work: Work!
}

# The connection type for Episode.
type EpisodeConnection {
  # A list of edges.
  edges: [EpisodeEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type EpisodeEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Episode
}

input EpisodeOrder {
  direction: OrderDirection!
  field: EpisodeOrderField!
}

enum EpisodeOrderField {
  CREATED_AT

  SORT_NUMBER
}

# Media of anime
enum Media {
  MOVIE

  OTHER

  OVA

  TV

  WEB
}

type MultipleRecord implements Node {
  annictId: Int!
  createdAt: DateTime!
  id: ID!
  records(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): RecordConnection
  user: User!
  work: Work!
}

type Mutation {
  createRecord(input: CreateRecordInput!): CreateRecordPayload
  createReview(input: CreateReviewInput!): CreateReviewPayload
  deleteRecord(input: DeleteRecordInput!): DeleteRecordPayload
  deleteReview(input: DeleteReviewInput!): DeleteReviewPayload
  updateRecord(input: UpdateRecordInput!): UpdateRecordPayload
  updateReview(input: UpdateReviewInput!): UpdateReviewPayload
  updateStatus(input: UpdateStatusInput!): UpdateStatusPayload
}

# An object with an ID.
interface Node {
  # ID of the object.
  id: ID!
}

enum OrderDirection {
  ASC

  DESC
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

type Program implements Node {
  annictId: Int!
  channel: Channel!
  episode: Episode!
  id: ID!
  rebroadcast: Boolean!
  scPid: Int
  startedAt: DateTime!
  state: ProgramState!
  work: Work!
}

# The connection type for Program.
type ProgramConnection {
  # A list of edges.
  edges: [ProgramEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ProgramEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Program
}

input ProgramOrder {
  direction: OrderDirection!
  field: ProgramOrderField!
}

enum ProgramOrderField {
  STARTED_AT
}

enum ProgramState {
  HIDDEN

  PUBLISHED
}

type Query {
  # Fetches an object given its ID.
  node(
    # ID of the object.
    id: ID!
  ): Node

  # Fetches a list of objects given a list of IDs.
  nodes(
    # IDs of the objects.
    ids: [ID!]!
  ): [Node]!
  searchWorks(
    # Returns the elements in the list that come after the specified global ID.
    after: String
    annictIds: [Int!]

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: WorkOrder
    seasons: [String!]
    titles: [String!]
  ): WorkConnection
  user(username: String!): User
  viewer: User
}

enum RatingState {
  AVERAGE

  BAD

  GOOD

  GREAT
}

type Record implements Node {
  annictId: Int!
  comment: String
  commentsCount: Int!
  createdAt: DateTime!
  episode: Episode!
  facebookClickCount: Int!
  id: ID!
  likesCount: Int!
  modified: Boolean!
  rating: Float
  ratingState: RatingState
  twitterClickCount: Int!
  updatedAt: DateTime!
  user: User!
  work: Work!
}

# The connection type for Record.
type RecordConnection {
  # A list of edges.
  edges: [RecordEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type RecordEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Record
}

input RecordOrder {
  direction: OrderDirection!
  field: RecordOrderField!
}

enum RecordOrderField {
  CREATED_AT

  LIKES_COUNT
}

type Review implements Node {
  annictId: Int!
  body: String!
  createdAt: DateTime!
  id: ID!
  impressionsCount: Int!
  likesCount: Int!
  modifiedAt: DateTime
  ratingAnimationState: RatingState
  ratingCharacterState: RatingState
  ratingMusicState: RatingState
  ratingOverallState: RatingState
  ratingStoryState: RatingState
  title: String
  updatedAt: DateTime!
  user: User!
  work: Work!
}

# The connection type for Review.
type ReviewConnection {
  # A list of edges.
  edges: [ReviewEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ReviewEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Review
}

input ReviewOrder {
  direction: OrderDirection!
  field: ReviewOrderField!
}

enum ReviewOrderField {
  CREATED_AT

  LIKES_COUNT
}

# Season name
enum SeasonName {
  AUTUMN

  SPRING

  SUMMER

  WINTER
}

type Status implements Node {
  annictId: Int!
  createdAt: DateTime!
  id: ID!
  likesCount: Int!
  state: StatusState!
  user: User!
  work: Work!
}

enum StatusState {
  NO_STATE

  ON_HOLD

  STOP_WATCHING

  WANNA_WATCH

  WATCHED

  WATCHING
}

# Autogenerated input type of UpdateRecord
input UpdateRecordInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  comment: String
  ratingState: RatingState
  recordId: ID!
  shareFacebook: Boolean
  shareTwitter: Boolean
}

# Autogenerated return type of UpdateRecord
type UpdateRecordPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  record: Record
}

# Autogenerated input type of UpdateReview
input UpdateReviewInput {
  body: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  ratingAnimationState: RatingState!
  ratingCharacterState: RatingState!
  ratingMusicState: RatingState!
  ratingOverallState: RatingState!
  ratingStoryState: RatingState!
  reviewId: ID!
  shareFacebook: Boolean
  shareTwitter: Boolean
  title: String
}

# Autogenerated return type of UpdateReview
type UpdateReviewPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  review: Review
}

# Autogenerated input type of UpdateStatus
input UpdateStatusInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  state: StatusState!
  workId: ID!
}

# Autogenerated return type of UpdateStatus
type UpdateStatusPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  work: Work
}

type User implements Node {
  activities(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: ActivityOrder
  ): ActivityConnection
  annictId: Int!
  avatarUrl: String
  backgroundImageUrl: String
  createdAt: DateTime!
  description: String!
  email: String
  followers(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): UserConnection
  followersCount: Int!
  following(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): UserConnection
  followingActivities(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: ActivityOrder
  ): ActivityConnection
  followingsCount: Int!
  id: ID!
  name: String!
  notificationsCount: Int
  onHoldCount: Int!
  programs(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: ProgramOrder
    unwatched: Boolean
  ): ProgramConnection
  records(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int
    hasComment: Boolean

    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: RecordOrder
  ): RecordConnection
  recordsCount: Int!
  stopWatchingCount: Int!
  url: String
  username: String!
  viewerCanFollow: Boolean!
  viewerIsFollowing: Boolean!
  wannaWatchCount: Int!
  watchedCount: Int!
  watchingCount: Int!
  works(
    # Returns the elements in the list that come after the specified global ID.
    after: String
    annictIds: [Int!]

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: WorkOrder
    seasons: [String!]
    state: StatusState
    titles: [String!]
  ): WorkConnection
}

# The connection type for User.
type UserConnection {
  # A list of edges.
  edges: [UserEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type UserEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: User
}

# An anime title
type Work implements Node {
  annictId: Int!
  episodes(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: EpisodeOrder
  ): EpisodeConnection
  episodesCount: Int!
  id: ID!
  image: WorkImage
  malAnimeId: String
  media: Media!
  noEpisodes: Boolean!
  officialSiteUrl: String
  officialSiteUrlEn: String
  programs(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: ProgramOrder
  ): ProgramConnection
  reviews(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: ReviewOrder
  ): ReviewConnection
  reviewsCount: Int!
  seasonName: SeasonName
  seasonYear: Int
  title: String!
  titleEn: String
  titleKana: String
  titleRo: String
  twitterHashtag: String
  twitterUsername: String
  viewerStatusState: StatusState
  watchersCount: Int!
  wikipediaUrl: String
  wikipediaUrlEn: String
}

# The connection type for Work.
type WorkConnection {
  # A list of edges.
  edges: [WorkEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type WorkEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Work
}

type WorkImage implements Node {
  annictId: Int
  facebookOgImageUrl: String
  id: ID!
  internalUrl(size: String!): String
  recommendedImageUrl: String
  twitterAvatarUrl: String
  twitterBiggerAvatarUrl: String
  twitterMiniAvatarUrl: String
  twitterNormalAvatarUrl: String
  work: Work
}

input WorkOrder {
  direction: OrderDirection!
  field: WorkOrderField!
}

enum WorkOrderField {
  CREATED_AT

  SEASON

  WATCHERS_COUNT
}