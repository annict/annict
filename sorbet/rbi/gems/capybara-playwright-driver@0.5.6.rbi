# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `capybara-playwright-driver` gem.
# Please instead update this file by running `bin/tapioca gem capybara-playwright-driver`.


# source://capybara-playwright-driver//lib/capybara/playwright/tmpdir_owner.rb#1
module Capybara
  class << self
    # source://capybara/3.40.0/lib/capybara.rb#390
    def HTML(html); end

    # source://capybara/3.40.0/lib/capybara.rb#182
    def add_selector(name, **options, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def allow_gumbo(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def allow_gumbo=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def always_include_port(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def always_include_port=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def app(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def app=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def app_host(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def app_host=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def asset_host(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def asset_host=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def automatic_label_click(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def automatic_label_click=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def automatic_reload(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def automatic_reload=(*args, **_arg1, &block); end

    # source://capybara/3.40.0/lib/capybara.rb#114
    def configure; end

    # source://capybara/3.40.0/lib/capybara.rb#261
    def current_driver; end

    # source://capybara/3.40.0/lib/capybara.rb#270
    def current_driver=(name); end

    # source://capybara/3.40.0/lib/capybara.rb#316
    def current_session; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_driver(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_driver=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_host(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_host=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_max_wait_time(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_max_wait_time=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_normalize_ws(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_normalize_ws=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_retry_interval(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_retry_interval=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_selector(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_selector=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_set_options(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def default_set_options=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def disable_animation(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def disable_animation=(*args, **_arg1, &block); end

    # source://capybara/3.40.0/lib/capybara.rb#204
    def drivers; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def enable_aria_label(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def enable_aria_label=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def enable_aria_role(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def enable_aria_role=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def exact(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def exact=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def exact_text(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def exact_text=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def ignore_hidden_elements(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def ignore_hidden_elements=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def javascript_driver(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def javascript_driver=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def match(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def match=(*args, **_arg1, &block); end

    # source://capybara/3.40.0/lib/capybara.rb#261
    def mode; end

    # source://capybara/3.40.0/lib/capybara.rb#200
    def modify_selector(name, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def predicates_wait(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def predicates_wait=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def raise_server_errors(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def raise_server_errors=(*args, **_arg1, &block); end

    # source://capybara/3.40.0/lib/capybara.rb#131
    def register_driver(name, &block); end

    # source://capybara/3.40.0/lib/capybara.rb#150
    def register_server(name, &block); end

    # source://capybara/3.40.0/lib/capybara.rb#325
    def reset!; end

    # source://capybara/3.40.0/lib/capybara.rb#325
    def reset_sessions!; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def reuse_server(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def reuse_server=(*args, **_arg1, &block); end

    # source://capybara/3.40.0/lib/capybara.rb#253
    def run_default_server(app, port); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def run_server(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def run_server=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def save_path(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def save_path=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def server(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def server=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def server_errors(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def server_errors=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def server_host(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def server_host=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def server_port(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def server_port=(*args, **_arg1, &block); end

    # source://capybara/3.40.0/lib/capybara.rb#208
    def servers; end

    # source://capybara/3.40.0/lib/capybara.rb#337
    def session_name; end

    # source://capybara/3.40.0/lib/capybara.rb#346
    def session_name=(name); end

    # source://capybara/3.40.0/lib/capybara.rb#410
    def session_options; end

    # source://capybara/3.40.0/lib/capybara.rb#240
    def string(html); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def test_id(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def test_id=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def threadsafe(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def threadsafe=(*args, **_arg1, &block); end

    # source://capybara/3.40.0/lib/capybara.rb#282
    def use_default_driver; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def use_html5_parsing(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def use_html5_parsing=(*args, **_arg1, &block); end

    # source://capybara/3.40.0/lib/capybara.rb#290
    def using_driver(driver); end

    # source://capybara/3.40.0/lib/capybara.rb#358
    def using_session(name_or_session, &block); end

    # source://capybara/3.40.0/lib/capybara.rb#302
    def using_wait_time(seconds); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def visible_text_only(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def visible_text_only=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def w3c_click_offset(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def w3c_click_offset=(*args, **_arg1, &block); end

    private

    # source://capybara/3.40.0/lib/capybara.rb#416
    def config; end

    # source://capybara/3.40.0/lib/capybara.rb#420
    def session_pool; end

    # source://capybara/3.40.0/lib/capybara.rb#426
    def specified_session; end

    # source://capybara/3.40.0/lib/capybara.rb#434
    def specified_session=(session); end
  end
end

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#33
module Capybara::CapybaraObscuredPatch
  # @return [Boolean]
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#49
  def capybara_obscured?(x: T.unsafe(nil), y: T.unsafe(nil)); end
end

# ref: https://github.com/teamcapybara/capybara/blob/f7ab0b5cd5da86185816c2d5c30d58145fe654ed/lib/capybara/selenium/node.rb#L523
#
# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#35
Capybara::CapybaraObscuredPatch::OBSCURED_OR_OFFSET_SCRIPT = T.let(T.unsafe(nil), String)

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#2
module Capybara::ElementClickOptionPatch
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#3
  def perform_click_action(keys, **options); end
end

module Capybara::Node; end

class Capybara::Node::Element < ::Capybara::Node::Base
  include ::Capybara::ElementClickOptionPatch
  include ::Capybara::WithElementHandlePatch
end

# source://capybara-playwright-driver//lib/capybara/playwright/tmpdir_owner.rb#2
module Capybara::Playwright; end

# Responsibility of this class is:
# - Handling Capybara::Driver commands.
# - Managing Playwright browser contexts and pages.
#
# Note that this class doesn't manage Playwright::Browser.
# We should not use Playwright::Browser#close in this class.
#
# source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#12
class Capybara::Playwright::Browser
  include ::Capybara::Playwright::TmpdirOwner
  extend ::Forwardable

  # @return [Browser] a new instance of Browser
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#18
  def initialize(driver:, internal_logger:, playwright_browser:, page_options:, record_video: T.unsafe(nil), callback_on_save_trace: T.unsafe(nil), default_timeout: T.unsafe(nil), default_navigation_timeout: T.unsafe(nil)); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#347
  def accept_modal(dialog_type, **options, &block); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#187
  def active_element; end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#58
  def clear_browser_contexts; end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#306
  def close_window(handle); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#70
  def current_url; end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#274
  def current_window_handle; end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#353
  def dismiss_modal(dialog_type, **options, &block); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#171
  def evaluate_async_script(script, *args); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#164
  def evaluate_script(script, *args); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#157
  def execute_script(script, *args); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#105
  def find_css(query, **options); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#97
  def find_xpath(query, **options); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#338
  def fullscreen_window(handle); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#145
  def go_back; end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#151
  def go_forward; end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#125
  def html; end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#328
  def maximize_window(handle); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#278
  def open_new_window(kind = T.unsafe(nil)); end

  # Not used by Capybara::Session.
  # Intended to be directly called by user.
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#206
  def raw_screenshot(**options); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#91
  def refresh; end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#322
  def resize_window_to(handle, width, height); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#113
  def response_headers; end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#212
  def save_screenshot(path, **options); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#218
  def send_keys(*args); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#119
  def status_code; end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#222
  def switch_to_frame(frame); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#298
  def switch_to_window(handle); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#139
  def title; end

  # Not used by Capybara::Session.
  # Intended to be directly called by user.
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#198
  def video_path; end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#76
  def visit(path); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#270
  def window_handles; end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#316
  def window_size(handle); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#405
  def with_playwright_page(&block); end

  private

  # Capybara doesn't retry at this case since it doesn't use `synchronize { ... } for driver/browser methods.`
  # We have to retry ourselves.
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#239
  def assert_page_alive(retry_count: T.unsafe(nil), &block); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#32
  def create_browser_context; end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#48
  def create_page(browser_context); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#289
  def on_window(handle, &block); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#266
  def pages; end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#359
  def unwrap_node(args); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#369
  def wrap_node(arg); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/browser.rb#16
class Capybara::Playwright::Browser::NoSuchWindowError < ::StandardError; end

# source://capybara-playwright-driver//lib/capybara/playwright/browser_options.rb#3
class Capybara::Playwright::BrowserOptions
  # @return [BrowserOptions] a new instance of BrowserOptions
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/browser_options.rb#4
  def initialize(options); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser_options.rb#28
  def value; end
end

# source://capybara-playwright-driver//lib/capybara/playwright/browser_options.rb#8
Capybara::Playwright::BrowserOptions::LAUNCH_PARAMS = T.let(T.unsafe(nil), Array)

# playwright-ruby-client provides 3 methods to launch/connect browser.
#
# Playwright.create do |playwright|
#   playwright.chromium.launch do |browser|
#
# Playwright.connect_to_playwright_server do |playwright| ...
#   playwright.chromium.launch do |browser|
#
# Playwright.connect_to_browser_server do |browser| ...
#
# This class provides start/stop methods for driver.
# This is responsible for
# - managing PlaywrightExecution
# - launching browser with given option if needed
#
# source://capybara-playwright-driver//lib/capybara/playwright/browser_runner.rb#17
class Capybara::Playwright::BrowserRunner
  # @return [BrowserRunner] a new instance of BrowserRunner
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/browser_runner.rb#76
  def initialize(options); end

  # @return [::Playwright::Browser]
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/browser_runner.rb#88
  def start; end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser_runner.rb#93
  def stop; end
end

# source://capybara-playwright-driver//lib/capybara/playwright/browser_runner.rb#39
class Capybara::Playwright::BrowserRunner::PlaywrightConnectToBrowserServer
  # @return [PlaywrightConnectToBrowserServer] a new instance of PlaywrightConnectToBrowserServer
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/browser_runner.rb#40
  def initialize(endpoint_url); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser_runner.rb#48
  def playwright_browser; end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser_runner.rb#44
  def playwright_execution; end
end

# source://capybara-playwright-driver//lib/capybara/playwright/browser_runner.rb#18
class Capybara::Playwright::BrowserRunner::PlaywrightConnectToPlaywrightServer
  # @return [PlaywrightConnectToPlaywrightServer] a new instance of PlaywrightConnectToPlaywrightServer
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/browser_runner.rb#19
  def initialize(endpoint_url, options); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser_runner.rb#32
  def playwright_browser; end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser_runner.rb#28
  def playwright_execution; end
end

# source://capybara-playwright-driver//lib/capybara/playwright/browser_runner.rb#53
class Capybara::Playwright::BrowserRunner::PlaywrightCreate
  # @return [PlaywrightCreate] a new instance of PlaywrightCreate
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/browser_runner.rb#54
  def initialize(options); end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser_runner.rb#69
  def playwright_browser; end

  # source://capybara-playwright-driver//lib/capybara/playwright/browser_runner.rb#63
  def playwright_execution; end
end

# LILO event handler
#
# source://capybara-playwright-driver//lib/capybara/playwright/dialog_event_handler.rb#6
class Capybara::Playwright::DialogEventHandler
  # @return [DialogEventHandler] a new instance of DialogEventHandler
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/dialog_event_handler.rb#20
  def initialize; end

  # source://capybara-playwright-driver//lib/capybara/playwright/dialog_event_handler.rb#27
  def add_handler(callable); end

  # Sets the attribute default_handler
  #
  # @param value the value to set the attribute default_handler to.
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/dialog_event_handler.rb#25
  def default_handler=(_arg0); end

  # source://capybara-playwright-driver//lib/capybara/playwright/dialog_event_handler.rb#50
  def handle_dialog(dialog); end

  # source://capybara-playwright-driver//lib/capybara/playwright/dialog_event_handler.rb#35
  def remove_handler(id); end

  # source://capybara-playwright-driver//lib/capybara/playwright/dialog_event_handler.rb#41
  def with_handler(callable, &block); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/dialog_event_handler.rb#7
class Capybara::Playwright::DialogEventHandler::Item
  # @return [Item] a new instance of Item
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/dialog_event_handler.rb#8
  def initialize(dialog_proc); end

  # source://capybara-playwright-driver//lib/capybara/playwright/dialog_event_handler.rb#15
  def call(dialog); end

  # Returns the value of attribute id.
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/dialog_event_handler.rb#13
  def id; end
end

# source://capybara-playwright-driver//lib/capybara/playwright/driver.rb#5
class Capybara::Playwright::Driver < ::Capybara::Driver::Base
  include ::Capybara::Playwright::DriverExtension
  extend ::Forwardable

  # @return [Driver] a new instance of Driver
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/driver.rb#9
  def initialize(app, **options); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def accept_modal(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def active_element(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def close_window(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def current_url(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def current_window_handle(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def dismiss_modal(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def evaluate_async_script(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def evaluate_script(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def execute_script(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def find_css(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def find_xpath(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def fullscreen_window(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def go_back(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def go_forward(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def html(*args, **_arg1, &block); end

  # source://capybara-playwright-driver//lib/capybara/playwright/driver.rb#108
  def invalid_element_errors; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def maximize_window(*args, **_arg1, &block); end

  # @return [Boolean]
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/driver.rb#25
  def needs_server?; end

  # source://capybara-playwright-driver//lib/capybara/playwright/driver.rb#115
  def no_such_window_error; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def open_new_window(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def refresh(*args, **_arg1, &block); end

  # source://capybara-playwright-driver//lib/capybara/playwright/driver.rb#84
  def reset!; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def resize_window_to(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def response_headers(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def save_screenshot(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def send_keys(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def status_code(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def switch_to_frame(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def switch_to_window(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def title(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def visit(*args, **_arg1, &block); end

  # @return [Boolean]
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/driver.rb#24
  def wait?; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def window_handles(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def window_size(*args, **_arg1, &block); end

  private

  # source://capybara-playwright-driver//lib/capybara/playwright/driver.rb#27
  def browser; end

  # source://capybara-playwright-driver//lib/capybara/playwright/driver.rb#44
  def create_playwright_browser; end

  # source://capybara-playwright-driver//lib/capybara/playwright/driver.rb#57
  def default_logger; end

  # source://capybara-playwright-driver//lib/capybara/playwright/driver.rb#40
  def playwright_browser; end

  # source://capybara-playwright-driver//lib/capybara/playwright/driver.rb#78
  def quit; end
end

# Since existing user already monkey-patched Kernel#puts,
# (https://gist.github.com/searls/9caa12f66c45a72e379e7bfe4c48405b)
# Logger.new(STDOUT) should be avoided to use.
#
# source://capybara-playwright-driver//lib/capybara/playwright/driver.rb#68
class Capybara::Playwright::Driver::PutsLogger
  # source://capybara-playwright-driver//lib/capybara/playwright/driver.rb#69
  def info(message); end

  # source://capybara-playwright-driver//lib/capybara/playwright/driver.rb#73
  def warn(message); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/driver_extension.rb#3
module Capybara::Playwright::DriverExtension
  # Register screenshot save process.
  # The callback is called just before page is closed.
  # (just before #reset_session!)
  #
  # The **binary** (String) of the page screenshot is called back into the given block
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/driver_extension.rb#9
  def on_save_raw_screenshot_before_reset(&block); end

  # Register screenrecord save process.
  # The callback is called just after page is closed.
  # (just after #reset_session!)
  #
  # The video path (String) is called back into the given block
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/driver_extension.rb#26
  def on_save_screenrecord(&block); end

  # Register trace save process.
  # The callback is called just after trace is saved.
  #
  # The trace.zip path (String) is called back into the given block
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/driver_extension.rb#42
  def on_save_trace(&block); end

  # Start Playwright tracing (doc: https://playwright.dev/docs/api/class-tracing#tracing-start)
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/driver_extension.rb#53
  def start_tracing(name: T.unsafe(nil), screenshots: T.unsafe(nil), snapshots: T.unsafe(nil), sources: T.unsafe(nil), title: T.unsafe(nil)); end

  # Stop Playwright tracing (doc: https://playwright.dev/docs/api/class-tracing#tracing-stop)
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/driver_extension.rb#63
  def stop_tracing(path: T.unsafe(nil)); end

  # Trace execution of the given block. The tracing is automatically stopped when the block is finished.
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/driver_extension.rb#70
  def trace(name: T.unsafe(nil), screenshots: T.unsafe(nil), snapshots: T.unsafe(nil), sources: T.unsafe(nil), title: T.unsafe(nil), path: T.unsafe(nil), &block); end

  # @raise [ArgumentError]
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/driver_extension.rb#46
  def with_playwright_page(&block); end

  private

  # source://capybara-playwright-driver//lib/capybara/playwright/driver_extension.rb#34
  def callback_on_save_screenrecord(video_path); end

  # @return [Boolean]
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/driver_extension.rb#30
  def callback_on_save_screenrecord?; end

  # source://capybara-playwright-driver//lib/capybara/playwright/driver_extension.rb#17
  def callback_on_save_screenshot(raw_screenshot); end

  # @return [Boolean]
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/driver_extension.rb#13
  def callback_on_save_screenshot?; end
end

# Selector and checking methods are derived from twapole/apparition
# Action methods (click, select_option, ...) uses playwright.
#
# ref:
#   selenium:   https://github.com/teamcapybara/capybara/blob/master/lib/capybara/selenium/node.rb
#   apparition: https://github.com/twalpole/apparition/blob/master/lib/capybara/apparition/node.rb
#
# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#69
class Capybara::Playwright::Node < ::Capybara::Driver::Node
  # @return [Node] a new instance of Node
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#70
  def initialize(driver, internal_logger, page, element); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#936
  def ==(other); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#145
  def [](name); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#112
  def all_text; end

  # @return [Boolean]
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#839
  def checked?; end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#366
  def click(keys = T.unsafe(nil), **options); end

  # @return [Boolean]
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#851
  def disabled?; end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#378
  def double_click(keys = T.unsafe(nil), **options); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#640
  def drag_to(element, **options); end

  # @raise [NotImplementedError]
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#714
  def drop(*args); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#950
  def find_css(query, **options); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#942
  def find_xpath(query, **options); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#636
  def hover; end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#932
  def inspect; end

  # @return [Boolean]
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#867
  def multiple?; end

  # @return [Boolean]
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#835
  def obscured?; end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#883
  def path; end

  # @return [Boolean]
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#863
  def readonly?; end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#871
  def rect; end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#371
  def right_click(keys = T.unsafe(nil), **options); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#718
  def scroll_by(x, y); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#733
  def scroll_to(element, location, position = T.unsafe(nil)); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#339
  def select_option; end

  # @return [Boolean]
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#845
  def selected?; end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#462
  def send_keys(*args); end

  # @param value [String, Array] Array is only allowed if node has 'multiple' attribute
  # @param options [Hash] Driver specific options for how to set a value on a node
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#182
  def set(value, **options); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#921
  def shadow_root; end

  # @raise [NotImplementedError]
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#174
  def style(styles); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#797
  def tag_name; end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#917
  def trigger(event); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#352
  def unselect_option; end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#160
  def value; end

  # @return [Boolean]
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#801
  def visible?; end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#123
  def visible_text; end

  protected

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#77
  def element; end

  private

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#81
  def assert_element_not_stale(&block); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#156
  def attribute(name); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#105
  def capybara_default_wait_time; end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#362
  def parent_select_element; end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#151
  def property(name); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#746
  def scroll_element_to_location(element, location); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#782
  def scroll_to_coords(x, y); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#768
  def scroll_to_location(location); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#235
class Capybara::Playwright::Node::Checkbox < ::Capybara::Playwright::Node::Settable
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#236
  def set(value, **options); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#383
class Capybara::Playwright::Node::ClickOptions
  # @return [ClickOptions] a new instance of ClickOptions
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#384
  def initialize(element, keys, options, default_timeout); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#401
  def as_params; end

  private

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#422
  def delay_ms; end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#440
  def modifiers; end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#448
  def position; end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#410
  def timeout; end
end

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#430
Capybara::Playwright::Node::ClickOptions::MODIFIERS = T.let(T.unsafe(nil), Hash)

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#295
class Capybara::Playwright::Node::DateInput < ::Capybara::Playwright::Node::Settable
  include ::Capybara::Playwright::Node::UpdateValueJS

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#298
  def set(value, **options); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#319
class Capybara::Playwright::Node::DateTimeInput < ::Capybara::Playwright::Node::Settable
  include ::Capybara::Playwright::Node::UpdateValueJS

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#322
  def set(value, **options); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#644
class Capybara::Playwright::Node::DragTo
  # @param page [Playwright::Page]
  # @param source [Playwright::ElementHandle]
  # @param target [Playwright::ElementHandle]
  # @return [DragTo] a new instance of DragTo
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#658
  def initialize(page, source, target, options); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#665
  def execute; end

  private

  # @param element [Playwright::ElementHandle]
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#687
  def center_of(element); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#699
  def drop_modifiers; end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#707
  def sleep_delay; end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#692
  def with_key_pressing(keys, &block); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#645
Capybara::Playwright::Node::DragTo::MODIFIERS = T.let(T.unsafe(nil), Hash)

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#261
class Capybara::Playwright::Node::FileUpload < ::Capybara::Playwright::Node::Settable
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#262
  def set(value, **options); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#331
class Capybara::Playwright::Node::JSValueInput < ::Capybara::Playwright::Node::Settable
  include ::Capybara::Playwright::Node::UpdateValueJS

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#334
  def set(value, **options); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#109
class Capybara::Playwright::Node::NotActionableError < ::StandardError; end

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#229
class Capybara::Playwright::Node::RadioButton < ::Capybara::Playwright::Node::Settable
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#230
  def set(_, **options); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#762
Capybara::Playwright::Node::SCROLL_POSITIONS = T.let(T.unsafe(nil), Hash)

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#466
class Capybara::Playwright::Node::SendKeys
  # @return [SendKeys] a new instance of SendKeys
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#535
  def initialize(element_or_keyboard, keys); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#600
  def execute; end

  private

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#596
  def key_for(key); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#592
  def modifier_for(modifier); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#477
Capybara::Playwright::Node::SendKeys::KEYS = T.let(T.unsafe(nil), Hash)

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#467
Capybara::Playwright::Node::SendKeys::MODIFIERS = T.let(T.unsafe(nil), Hash)

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#606
class Capybara::Playwright::Node::SendKeys::PressKey
  # @return [PressKey] a new instance of PressKey
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#607
  def initialize(key:, modifiers:); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#620
  def execute_for(element); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#625
class Capybara::Playwright::Node::SendKeys::TypeText
  # @return [TypeText] a new instance of TypeText
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#626
  def initialize(text); end

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#630
  def execute_for(element); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#221
class Capybara::Playwright::Node::Settable
  # @return [Settable] a new instance of Settable
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#222
  def initialize(element, timeout, internal_logger); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#110
class Capybara::Playwright::Node::StaleReferenceError < ::StandardError; end

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#245
class Capybara::Playwright::Node::TextInput < ::Capybara::Playwright::Node::Settable
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#246
  def set(value, **options); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#307
class Capybara::Playwright::Node::TimeInput < ::Capybara::Playwright::Node::Settable
  include ::Capybara::Playwright::Node::UpdateValueJS

  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#310
  def set(value, **options); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#275
module Capybara::Playwright::Node::UpdateValueJS
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#276
  def update_value_js(element, value); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/page.rb#5
module Capybara::Playwright::PageExtension
  # source://capybara-playwright-driver//lib/capybara/playwright/page.rb#6
  def initialize(*args, **kwargs); end

  # source://capybara-playwright-driver//lib/capybara/playwright/page.rb#95
  def capybara_accept_modal(dialog_type, **options, &block); end

  # source://capybara-playwright-driver//lib/capybara/playwright/page.rb#184
  def capybara_current_frame; end

  # source://capybara-playwright-driver//lib/capybara/playwright/page.rb#123
  def capybara_dismiss_modal(dialog_type, **options, &block); end

  # source://capybara-playwright-driver//lib/capybara/playwright/page.rb#180
  def capybara_pop_frame; end

  # @param frame [Playwright::Frame]
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/page.rb#176
  def capybara_push_frame(frame); end

  # source://capybara-playwright-driver//lib/capybara/playwright/page.rb#171
  def capybara_reset_frames; end

  # source://capybara-playwright-driver//lib/capybara/playwright/page.rb#157
  def capybara_response_headers; end

  # source://capybara-playwright-driver//lib/capybara/playwright/page.rb#167
  def capybara_status_code; end

  private

  # source://capybara-playwright-driver//lib/capybara/playwright/page.rb#15
  def _update_internal_logger(internal_logger); end

  # source://capybara-playwright-driver//lib/capybara/playwright/page.rb#44
  def capybara_dialog_event_handler; end

  # source://capybara-playwright-driver//lib/capybara/playwright/page.rb#19
  def capybara_initialize; end

  # source://capybara-playwright-driver//lib/capybara/playwright/page.rb#50
  def capybara_on_unexpected_modal(dialog); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/page.rb#59
class Capybara::Playwright::PageExtension::DialogAcceptor
  # @return [DialogAcceptor] a new instance of DialogAcceptor
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/page.rb#60
  def initialize(dialog_type, options); end

  # source://capybara-playwright-driver//lib/capybara/playwright/page.rb#65
  def handle(dialog); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/page.rb#74
class Capybara::Playwright::PageExtension::DialogMessageMatcher
  # @return [DialogMessageMatcher] a new instance of DialogMessageMatcher
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/page.rb#75
  def initialize(text_or_regex_or_nil); end

  # @return [Boolean]
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/page.rb#83
  def matches?(message); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/page.rb#149
class Capybara::Playwright::PageExtension::Headers < ::Hash
  # source://capybara-playwright-driver//lib/capybara/playwright/page.rb#150
  def [](key); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/page_options.rb#3
class Capybara::Playwright::PageOptions
  # @return [PageOptions] a new instance of PageOptions
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/page_options.rb#4
  def initialize(options); end

  # source://capybara-playwright-driver//lib/capybara/playwright/page_options.rb#38
  def value; end
end

# source://capybara-playwright-driver//lib/capybara/playwright/page_options.rb#8
Capybara::Playwright::PageOptions::NEW_PAGE_PARAMS = T.let(T.unsafe(nil), Array)

# source://capybara-playwright-driver//lib/capybara/playwright/shadow_root_node.rb#5
class Capybara::Playwright::ShadowRootNode < ::Capybara::Playwright::Node
  # @return [ShadowRootNode] a new instance of ShadowRootNode
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/shadow_root_node.rb#6
  def initialize(driver, internal_logger, page, element); end

  # source://capybara-playwright-driver//lib/capybara/playwright/shadow_root_node.rb#11
  def all_text; end

  # source://capybara-playwright-driver//lib/capybara/playwright/shadow_root_node.rb#22
  def visible_text; end
end

# source://capybara-playwright-driver//lib/capybara/playwright/tmpdir_owner.rb#3
module Capybara::Playwright::TmpdirOwner
  # source://capybara-playwright-driver//lib/capybara/playwright/tmpdir_owner.rb#14
  def remove_tmpdir; end

  # source://capybara-playwright-driver//lib/capybara/playwright/tmpdir_owner.rb#6
  def tmpdir; end
end

# source://capybara-playwright-driver//lib/capybara/playwright/tmpdir_owner.rb#22
class Capybara::Playwright::TmpdirOwner::TmpdirRemover
  # @return [TmpdirRemover] a new instance of TmpdirRemover
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/tmpdir_owner.rb#23
  def initialize(tmpdir); end

  # source://capybara-playwright-driver//lib/capybara/playwright/tmpdir_owner.rb#28
  def call(*args); end
end

# source://capybara-playwright-driver//lib/capybara/playwright/version.rb#5
Capybara::Playwright::VERSION = T.let(T.unsafe(nil), String)

# source://capybara-playwright-driver//lib/capybara/playwright/node.rb#20
module Capybara::WithElementHandlePatch
  # @raise [ArgumentError]
  #
  # source://capybara-playwright-driver//lib/capybara/playwright/node.rb#21
  def with_playwright_element_handle(&block); end
end

class Playwright::ElementHandle < ::Playwright::JSHandle
  include ::Capybara::CapybaraObscuredPatch
end

class Playwright::Page < ::Playwright::PlaywrightApi
  include ::Capybara::Playwright::PageExtension
end
