# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rails/all/rails.rbi
#
# rails-06c38ce5d5d6
class Hash
  def _deep_transform_keys_in_object!(object, &block); end
  def _deep_transform_keys_in_object(object, &block); end
  def _deep_transform_values_in_object!(object, &block); end
  def _deep_transform_values_in_object(object, &block); end
  def as_json(options = nil); end
  def assert_valid_keys(*valid_keys); end
  def blank?; end
  def deep_dup; end
  def deep_merge!(other_hash, &block); end
  def deep_merge(other_hash, &block); end
  def deep_stringify_keys!; end
  def deep_stringify_keys; end
  def deep_symbolize_keys!; end
  def deep_symbolize_keys; end
  def deep_transform_keys!(&block); end
  def deep_transform_keys(&block); end
  def deep_transform_values!(&block); end
  def deep_transform_values(&block); end
  def except!(*keys); end
  def except(*keys); end
  def extract!(*keys); end
  def extractable_options?; end
  def nested_under_indifferent_access; end
  def reverse_merge!(other_hash); end
  def reverse_merge(other_hash); end
  def reverse_update(other_hash); end
  def self.from_trusted_xml(xml); end
  def self.from_xml(xml, disallowed_types = nil); end
  def slice!(*keys); end
  def stringify_keys!; end
  def stringify_keys; end
  def symbolize_keys!; end
  def symbolize_keys; end
  def to_options!; end
  def to_options; end
  def to_param(namespace = nil); end
  def to_query(namespace = nil); end
  def to_xml(options = nil); end
  def with_defaults!(other_hash); end
  def with_defaults(other_hash); end
  def with_indifferent_access; end
end
module ActiveSupport
  def parse_json_times; end
  def parse_json_times=(obj); end
  def self.eager_load!; end
  def self.escape_html_entities_in_json(*args, &block); end
  def self.escape_html_entities_in_json=(arg); end
  def self.gem_version; end
  def self.json_encoder(*args, &block); end
  def self.json_encoder=(arg); end
  def self.parse_json_times; end
  def self.parse_json_times=(obj); end
  def self.test_order; end
  def self.test_order=(obj); end
  def self.time_precision(*args, &block); end
  def self.time_precision=(arg); end
  def self.to_time_preserves_timezone; end
  def self.to_time_preserves_timezone=(value); end
  def self.use_standard_json_time_format(*args, &block); end
  def self.use_standard_json_time_format=(arg); end
  def self.version; end
  def test_order; end
  def test_order=(obj); end
  extend ActiveSupport::Autoload
  extend ActiveSupport::LazyLoadHooks
end
module ActiveSupport::LazyLoadHooks
  def execute_hook(name, base, options, block); end
  def on_load(name, options = nil, &block); end
  def run_load_hooks(name, base = nil); end
  def self.extended(base); end
  def with_execution_control(name, block, once); end
end
module Kernel
  def class_eval(*args, &block); end
  def concern(topic, &module_definition); end
  def enable_warnings; end
  def self.concern(topic, &module_definition); end
  def self.enable_warnings; end
  def self.silence_warnings; end
  def self.suppress(*exception_classes); end
  def self.with_warnings(flag); end
  def silence_warnings; end
  def suppress(*exception_classes); end
  def with_warnings(flag); end
end
class Module
  def alias_attribute(new_name, old_name); end
  def anonymous?; end
  def attr_internal(*attrs); end
  def attr_internal_accessor(*attrs); end
  def attr_internal_define(attr_name, type); end
  def attr_internal_ivar_name(attr); end
  def attr_internal_reader(*attrs); end
  def attr_internal_writer(*attrs); end
  def cattr_accessor(*syms, instance_reader: nil, instance_writer: nil, instance_accessor: nil, default: nil, &blk); end
  def cattr_reader(*syms, instance_reader: nil, instance_accessor: nil, default: nil); end
  def cattr_writer(*syms, instance_writer: nil, instance_accessor: nil, default: nil); end
  def delegate(*methods, to: nil, prefix: nil, allow_nil: nil, private: nil); end
  def delegate_missing_to(target, allow_nil: nil); end
  def deprecate(*method_names); end
  def mattr_accessor(*syms, instance_reader: nil, instance_writer: nil, instance_accessor: nil, default: nil, &blk); end
  def mattr_reader(*syms, instance_reader: nil, instance_accessor: nil, default: nil); end
  def mattr_writer(*syms, instance_writer: nil, instance_accessor: nil, default: nil); end
  def method_visibility(method); end
  def module_parent; end
  def module_parent_name; end
  def module_parents; end
  def parent; end
  def parent_name; end
  def parents; end
  def redefine_method(method, &block); end
  def redefine_singleton_method(method, &block); end
  def remove_possible_method(method); end
  def remove_possible_singleton_method(method); end
  def self.attr_internal_naming_format; end
  def self.attr_internal_naming_format=(arg0); end
  def silence_redefinition_of_method(method); end
  def thread_cattr_accessor(*syms, instance_reader: nil, instance_writer: nil, instance_accessor: nil); end
  def thread_cattr_reader(*syms, instance_reader: nil, instance_accessor: nil); end
  def thread_cattr_writer(*syms, instance_writer: nil, instance_accessor: nil); end
  def thread_mattr_accessor(*syms, instance_reader: nil, instance_writer: nil, instance_accessor: nil); end
  def thread_mattr_reader(*syms, instance_reader: nil, instance_accessor: nil); end
  def thread_mattr_writer(*syms, instance_writer: nil, instance_accessor: nil); end
  include ActiveSupport::Dependencies::ModuleConstMissing
  include Module::Concerning
end
class Module::DelegationError < NoMethodError
end
class ActiveSupport::Deprecation
  def self.allocate; end
  def self.behavior(*args, &block); end
  def self.behavior=(arg); end
  def self.debug(*args, &block); end
  def self.debug=(arg); end
  def self.deprecate_methods(*args, &block); end
  def self.deprecation_horizon(*args, &block); end
  def self.deprecation_horizon=(arg); end
  def self.deprecation_warning(deprecated_method_name, message = nil, caller_backtrace = nil); end
  def self.gem_name(*args, &block); end
  def self.gem_name=(arg); end
  def self.initialize(*args, &block); end
  def self.instance; end
  def self.new(*arg0); end
  def self.silence(*args, &block); end
  def self.silenced(*args, &block); end
  def self.silenced=(arg); end
  def self.warn(message = nil, callstack = nil); end
  extend ActiveSupport::Deprecation::InstanceDelegator::ClassMethods
  extend Singleton::SingletonClassMethods
  include ActiveSupport::Deprecation::Behavior
  include ActiveSupport::Deprecation::InstanceDelegator
  include ActiveSupport::Deprecation::MethodWrapper
  include ActiveSupport::Deprecation::Reporting
  include Singleton
end
module ActiveSupport::Deprecation::InstanceDelegator
  def self.included(base); end
end
module ActiveSupport::Deprecation::InstanceDelegator::ClassMethods
  def include(included_module); end
  def method_added(method_name); end
end
module ActiveSupport::Deprecation::InstanceDelegator::OverrideDelegators
  def deprecation_warning(deprecated_method_name, message = nil, caller_backtrace = nil); end
  def warn(message = nil, callstack = nil); end
end
module ActiveSupport::Notifications
  def self.instrument(name, payload = nil); end
  def self.instrumenter; end
  def self.monotonic_subscribe(pattern = nil, callback = nil, &block); end
  def self.notifier; end
  def self.notifier=(arg0); end
  def self.publish(name, *args); end
  def self.subscribe(pattern = nil, callback = nil, &block); end
  def self.subscribed(callback, pattern = nil, monotonic: nil, &block); end
  def self.unsubscribe(subscriber_or_name); end
end
class ActiveSupport::Notifications::Instrumenter
  def finish(name, payload); end
  def finish_with_state(listeners_state, name, payload); end
  def id; end
  def initialize(notifier); end
  def instrument(name, payload = nil); end
  def start(name, payload); end
  def unique_id; end
end
class ActiveSupport::Notifications::Event
  def <<(event); end
  def allocations; end
  def children; end
  def cpu_time; end
  def duration; end
  def end; end
  def end=(ending); end
  def finish!; end
  def idle_time; end
  def initialize(name, start, ending, transaction_id, payload); end
  def name; end
  def now; end
  def now_allocations; end
  def now_cpu; end
  def parent_of?(event); end
  def payload; end
  def self.clock_gettime_supported?; end
  def start!; end
  def time; end
  def transaction_id; end
end
class ActiveSupport::Notifications::Fanout
  def finish(name, id, payload, listeners = nil); end
  def initialize; end
  def listeners_for(name); end
  def listening?(name); end
  def lock; end
  def locked?; end
  def publish(name, *args); end
  def start(name, id, payload); end
  def subscribe(pattern = nil, callable = nil, monotonic: nil, &block); end
  def synchronize(&block); end
  def try_lock; end
  def unlock; end
  def unsubscribe(subscriber_or_name); end
  def wait; end
  include Mutex_m
end
module ActiveSupport::Notifications::Fanout::Subscribers
  def self.event_object_subscriber(pattern, block); end
  def self.new(pattern, listener, monotonic); end
  def self.wrap_all(pattern, subscriber); end
end
class ActiveSupport::Notifications::Fanout::Subscribers::Matcher
  def ===(name); end
  def exclusions; end
  def initialize(pattern); end
  def pattern; end
  def self.wrap(pattern); end
  def unsubscribe!(name); end
end
class ActiveSupport::Notifications::Fanout::Subscribers::Evented
  def finish(name, id, payload); end
  def initialize(pattern, delegate); end
  def matches?(name); end
  def pattern; end
  def publish(name, *args); end
  def start(name, id, payload); end
  def subscribed_to?(name); end
  def unsubscribe!(name); end
end
class ActiveSupport::Notifications::Fanout::Subscribers::Timed < ActiveSupport::Notifications::Fanout::Subscribers::Evented
  def finish(name, id, payload); end
  def publish(name, *args); end
  def start(name, id, payload); end
end
class ActiveSupport::Notifications::Fanout::Subscribers::MonotonicTimed < ActiveSupport::Notifications::Fanout::Subscribers::Evented
  def finish(name, id, payload); end
  def publish(name, *args); end
  def start(name, id, payload); end
end
class ActiveSupport::Notifications::Fanout::Subscribers::EventObject < ActiveSupport::Notifications::Fanout::Subscribers::Evented
  def build_event(name, id, payload); end
  def finish(name, id, payload); end
  def start(name, id, payload); end
end
class ActiveSupport::Notifications::Fanout::Subscribers::AllMessages
  def finish(name, id, payload); end
  def initialize(delegate); end
  def matches?(arg0); end
  def publish(name, *args); end
  def start(name, id, payload); end
  def subscribed_to?(name); end
  def unsubscribe!(*arg0); end
end
module ActiveSupport::PerThreadRegistry
  def instance; end
  def method_missing(name, *args, &block); end
  def self.extended(object); end
end
class ActiveSupport::Notifications::InstrumentationRegistry
  def initialize; end
  def instrumenter_for(notifier); end
  extend ActiveSupport::PerThreadRegistry
end
class ActiveSupport::DeprecationException < StandardError
end
module ActiveSupport::Deprecation::Behavior
  def arity_coerce(behavior); end
  def behavior; end
  def behavior=(behavior); end
  def debug; end
  def debug=(arg0); end
end
module ActiveSupport::Deprecation::Reporting
  def _extract_callstack(callstack); end
  def deprecated_method_warning(method_name, message = nil); end
  def deprecation_caller_message(callstack); end
  def deprecation_message(callstack, message = nil); end
  def deprecation_warning(deprecated_method_name, message = nil, caller_backtrace = nil); end
  def extract_callstack(callstack); end
  def gem_name; end
  def gem_name=(arg0); end
  def ignored_callstack(path); end
  def silence; end
  def silenced; end
  def silenced=(arg0); end
  def warn(message = nil, callstack = nil); end
end
module ActiveSupport::Deprecation::DeprecatedConstantAccessor
  def self.included(base); end
end
class Array
  def as_json(options = nil); end
  def blank?; end
  def deep_dup; end
  def excluding(*elements); end
  def extract!; end
  def extract_options!; end
  def fifth; end
  def forty_two; end
  def fourth; end
  def from(position); end
  def in_groups(number, fill_with = nil); end
  def in_groups_of(number, fill_with = nil); end
  def including(*elements); end
  def inquiry; end
  def second; end
  def second_to_last; end
  def self.try_convert(arg0); end
  def split(value = nil); end
  def third; end
  def third_to_last; end
  def to(position); end
  def to_default_s; end
  def to_formatted_s(format = nil); end
  def to_param; end
  def to_query(key); end
  def to_sentence(options = nil); end
  def to_xml(options = nil); end
  def without(*elements); end
end
module ActiveSupport::Deprecation::MethodWrapper
  def deprecate_methods(target_module, *method_names); end
end
class ActiveSupport::Deprecation::DeprecationProxy
  def inspect; end
  def method_missing(called, *args, &block); end
  def self.new(*args, &block); end
end
class ActiveSupport::Deprecation::DeprecatedObjectProxy < ActiveSupport::Deprecation::DeprecationProxy
  def initialize(object, message, deprecator = nil); end
  def target; end
  def warn(callstack, called, args); end
end
class ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy < ActiveSupport::Deprecation::DeprecationProxy
  def initialize(instance, method, var = nil, deprecator = nil); end
  def target; end
  def warn(callstack, called, args); end
end
class ActiveSupport::Deprecation::DeprecatedConstantProxy < ActiveSupport::Deprecation::DeprecationProxy
  def class; end
  def initialize(old_const, new_const, deprecator = nil, message: nil); end
  def target; end
  def warn(callstack, called, args); end
end
module ActiveSupport::Inflector
  def apply_inflections(word, rules, locale = nil); end
  def camelize(term, uppercase_first_letter = nil); end
  def classify(table_name); end
  def const_regexp(camel_cased_word); end
  def constantize(camel_cased_word); end
  def dasherize(underscored_word); end
  def deconstantize(path); end
  def demodulize(path); end
  def foreign_key(class_name, separate_class_name_and_id_with_underscore = nil); end
  def humanize(lower_case_and_underscored_word, capitalize: nil, keep_id_suffix: nil); end
  def inflections(locale = nil); end
  def ordinal(number); end
  def ordinalize(number); end
  def parameterize(string, separator: nil, preserve_case: nil, locale: nil); end
  def pluralize(word, locale = nil); end
  def safe_constantize(camel_cased_word); end
  def singularize(word, locale = nil); end
  def tableize(class_name); end
  def titleize(word, keep_id_suffix: nil); end
  def transliterate(string, replacement = nil, locale: nil); end
  def underscore(camel_cased_word); end
  def upcase_first(string); end
  extend ActiveSupport::Inflector
  extend ActiveSupport::Inflector
end
class ActiveSupport::Inflector::Inflections
  def acronym(word); end
  def acronyms; end
  def acronyms_camelize_regex; end
  def acronyms_underscore_regex; end
  def clear(scope = nil); end
  def define_acronym_regex_patterns; end
  def human(rule, replacement); end
  def humans; end
  def initialize; end
  def initialize_dup(orig); end
  def irregular(singular, plural); end
  def plural(rule, replacement); end
  def plurals; end
  def self.instance(locale = nil); end
  def singular(rule, replacement); end
  def singulars; end
  def uncountable(*words); end
  def uncountables; end
end
class ActiveSupport::Inflector::Inflections::Uncountables < Array
  def <<(*word); end
  def add(words); end
  def delete(entry); end
  def initialize; end
  def to_regex(string); end
  def uncountable?(str); end
end
module ActiveSupport::Autoload
  def autoload(const_name, path = nil); end
  def autoload_at(path); end
  def autoload_under(path); end
  def autoloads; end
  def eager_autoload; end
  def eager_load!; end
  def self.extended(base); end
end
module ActiveSupport::VERSION
end
module ActiveSupport::Concern
  def append_features(base); end
  def class_methods(&class_methods_module_definition); end
  def included(base = nil, &block); end
  def self.extended(base); end
end
class ActiveSupport::Concern::MultipleIncludedBlocks < StandardError
  def initialize; end
end
module ActiveSupport::LoggerThreadSafeLevel
  def add(severity, message = nil, progname = nil, &block); end
  def after_initialize; end
  def debug?; end
  def error?; end
  def fatal?; end
  def info?; end
  def level; end
  def local_level; end
  def local_level=(level); end
  def local_log_id; end
  def unknown?; end
  def warn?; end
  extend ActiveSupport::Concern
end
module LoggerSilence
  extend ActiveSupport::Concern
end
module ActiveSupport::LoggerSilence
  def silence(temporary_level = nil); end
  extend ActiveSupport::Concern
end
class ActiveSupport::Logger < Logger
  def initialize(*args); end
  def self.broadcast(logger); end
  def self.local_levels; end
  def self.local_levels=(obj); end
  def self.logger_outputs_to?(logger, *sources); end
  def self.silencer; end
  def self.silencer=(obj); end
  def silencer; end
  def silencer=(obj); end
  include ActiveSupport::LoggerSilence
  include ActiveSupport::LoggerThreadSafeLevel
end
class ActiveSupport::Logger::SimpleFormatter < Logger::Formatter
  def call(severity, timestamp, progname, msg); end
end
module DateAndTime
end
module DateAndTime::Compatibility
  def preserve_timezone; end
  def self.preserve_timezone; end
  def self.preserve_timezone=(obj); end
end
class Object < BasicObject
  def acts_like?(duck); end
  def as_json(options = nil); end
  def blank?; end
  def deep_dup; end
  def duplicable?; end
  def html_safe?; end
  def in?(another_object); end
  def instance_values; end
  def instance_variable_names; end
  def presence; end
  def presence_in(another_object); end
  def present?; end
  def to_param; end
  def to_query(key); end
  def with_options(options, &block); end
  include ActiveSupport::Dependencies::Loadable
  include ActiveSupport::Tryable
end
class NilClass
  def as_json(options = nil); end
  def blank?; end
  def to_param; end
  def try!(method_name = nil, *args); end
  def try(method_name = nil, *args); end
end
class FalseClass
  def as_json(options = nil); end
  def blank?; end
  def to_param; end
end
class TrueClass
  def as_json(options = nil); end
  def blank?; end
  def to_param; end
end
class String
  def acts_like_string?; end
  def as_json(options = nil); end
  def at(position); end
  def blank?; end
  def camelcase(first_letter = nil); end
  def camelize(first_letter = nil); end
  def classify; end
  def constantize; end
  def dasherize; end
  def deconstantize; end
  def demodulize; end
  def ends_with?(*arg0); end
  def exclude?(string); end
  def first(limit = nil); end
  def foreign_key(separate_class_name_and_id_with_underscore = nil); end
  def from(position); end
  def html_safe; end
  def humanize(capitalize: nil, keep_id_suffix: nil); end
  def in_time_zone(zone = nil); end
  def indent!(amount, indent_string = nil, indent_empty_lines = nil); end
  def indent(amount, indent_string = nil, indent_empty_lines = nil); end
  def inquiry; end
  def is_utf8?; end
  def last(limit = nil); end
  def mb_chars; end
  def parameterize(separator: nil, preserve_case: nil, locale: nil); end
  def pluralize(count = nil, locale = nil); end
  def remove!(*patterns); end
  def remove(*patterns); end
  def safe_constantize; end
  def singularize(locale = nil); end
  def squish!; end
  def squish; end
  def starts_with?(*arg0); end
  def strip_heredoc; end
  def tableize; end
  def titlecase(keep_id_suffix: nil); end
  def titleize(keep_id_suffix: nil); end
  def to(position); end
  def to_date; end
  def to_datetime; end
  def to_time(form = nil); end
  def truncate(truncate_at, options = nil); end
  def truncate_bytes(truncate_at, omission: nil); end
  def truncate_words(words_count, options = nil); end
  def underscore; end
  def upcase_first; end
end
class Numeric
  def as_json(options = nil); end
  def blank?; end
  def byte; end
  def bytes; end
  def day; end
  def days; end
  def exabyte; end
  def exabytes; end
  def fortnight; end
  def fortnights; end
  def gigabyte; end
  def gigabytes; end
  def hour; end
  def hours; end
  def html_safe?; end
  def in_milliseconds; end
  def kilobyte; end
  def kilobytes; end
  def megabyte; end
  def megabytes; end
  def minute; end
  def minutes; end
  def petabyte; end
  def petabytes; end
  def second; end
  def seconds; end
  def terabyte; end
  def terabytes; end
  def week; end
  def weeks; end
end
class Time
  def acts_like_time?; end
  def advance(options); end
  def ago(seconds); end
  def as_json(options = nil); end
  def at_beginning_of_day; end
  def at_beginning_of_hour; end
  def at_beginning_of_minute; end
  def at_end_of_day; end
  def at_end_of_hour; end
  def at_end_of_minute; end
  def at_midday; end
  def at_middle_of_day; end
  def at_midnight; end
  def at_noon; end
  def beginning_of_day; end
  def beginning_of_hour; end
  def beginning_of_minute; end
  def blank?; end
  def change(options); end
  def compare_with_coercion(other); end
  def compare_without_coercion(arg0); end
  def end_of_day; end
  def end_of_hour; end
  def end_of_minute; end
  def eql_with_coercion(other); end
  def eql_without_coercion(arg0); end
  def formatted_offset(colon = nil, alternate_utc_string = nil); end
  def in(seconds); end
  def midday; end
  def middle_of_day; end
  def midnight; end
  def minus_with_coercion(other); end
  def minus_with_duration(other); end
  def minus_without_coercion(other); end
  def minus_without_duration(arg0); end
  def next_day(days = nil); end
  def next_month(months = nil); end
  def next_year(years = nil); end
  def noon; end
  def plus_with_duration(other); end
  def plus_without_duration(arg0); end
  def prev_day(days = nil); end
  def prev_month(months = nil); end
  def prev_year(years = nil); end
  def rfc3339(fraction_digits = nil); end
  def sec_fraction; end
  def seconds_since_midnight; end
  def seconds_until_end_of_day; end
  def self.===(other); end
  def self.at_with_coercion(*args); end
  def self.at_without_coercion(*arg0); end
  def self.current; end
  def self.days_in_month(month, year = nil); end
  def self.days_in_year(year = nil); end
  def self.find_zone!(time_zone); end
  def self.find_zone(time_zone); end
  def self.rfc3339(str); end
  def self.use_zone(time_zone); end
  def self.zone; end
  def self.zone=(time_zone); end
  def self.zone_default; end
  def self.zone_default=(arg0); end
  def since(seconds); end
  def to_default_s; end
  def to_formatted_s(format = nil); end
  include DateAndTime::Calculations
  include DateAndTime::Compatibility
  include DateAndTime::Zones
end
class ActiveSupport::KeyGenerator
  def generate_key(salt, key_size = nil); end
  def initialize(secret, options = nil); end
end
class ActiveSupport::CachingKeyGenerator
  def generate_key(*args); end
  def initialize(key_generator); end
end
module ActiveSupport::SecurityUtils
  def fixed_length_secure_compare(a, b); end
  def secure_compare(a, b); end
  def self.fixed_length_secure_compare(a, b); end
  def self.secure_compare(a, b); end
end
module ActiveSupport::Messages
end
class ActiveSupport::Messages::Metadata
  def as_json(options = nil); end
  def fresh?; end
  def initialize(message, expires_at = nil, purpose = nil); end
  def match?(purpose); end
  def self.decode(message); end
  def self.encode(message); end
  def self.extract_metadata(message); end
  def self.pick_expiry(expires_at, expires_in); end
  def self.verify(message, purpose); end
  def self.wrap(message, expires_at: nil, expires_in: nil, purpose: nil); end
  def verify(purpose); end
end
module ActiveSupport::Messages::Rotator
  def initialize(*arg0, on_rotation: nil, **options); end
  def rotate(*secrets, **options); end
  def run_rotations(on_rotation); end
end
module ActiveSupport::Messages::Rotator::Encryptor
  def build_rotation(secret = nil, sign_secret = nil, options); end
  def decrypt_and_verify(*args, on_rotation: nil, **options); end
  include ActiveSupport::Messages::Rotator
end
module ActiveSupport::Messages::Rotator::Verifier
  def build_rotation(secret = nil, options); end
  def verified(*args, on_rotation: nil, **options); end
  include ActiveSupport::Messages::Rotator
end
class ActiveSupport::MessageVerifier
  def decode(data); end
  def encode(data); end
  def generate(value, expires_at: nil, expires_in: nil, purpose: nil); end
  def generate_digest(data); end
  def initialize(*arg0, on_rotation: nil, **options); end
  def valid_message?(signed_message); end
  def verified(*args, on_rotation: nil, **options); end
  def verify(*args); end
end
class ActiveSupport::MessageVerifier::InvalidSignature < StandardError
end
class ActiveSupport::MessageEncryptor
  def _decrypt(encrypted_message, purpose); end
  def _encrypt(value, **metadata_options); end
  def aead_mode?; end
  def decrypt_and_verify(*args, on_rotation: nil, **options); end
  def encrypt_and_sign(value, expires_at: nil, expires_in: nil, purpose: nil); end
  def initialize(*arg0, on_rotation: nil, **options); end
  def new_cipher; end
  def resolve_verifier; end
  def self.default_cipher; end
  def self.key_len(cipher = nil); end
  def self.use_authenticated_message_encryption; end
  def self.use_authenticated_message_encryption=(obj); end
  def verifier; end
end
module ActiveSupport::MessageEncryptor::NullSerializer
  def self.dump(value); end
  def self.load(value); end
end
module ActiveSupport::MessageEncryptor::NullVerifier
  def self.generate(value); end
  def self.verify(value); end
end
class ActiveSupport::MessageEncryptor::InvalidMessage < StandardError
end
class ActiveSupport::EncryptedFile
  def change(&block); end
  def content_path; end
  def decrypt(contents); end
  def encrypt(contents); end
  def encryptor; end
  def env_key; end
  def handle_missing_key; end
  def initialize(content_path:, key_path:, env_key:, raise_if_missing_key:); end
  def key; end
  def key_path; end
  def raise_if_missing_key; end
  def read; end
  def read_env_key; end
  def read_key_file; end
  def self.generate_key; end
  def write(contents); end
  def writing(contents); end
end
class ActiveSupport::EncryptedFile::MissingContentError < RuntimeError
  def initialize(content_path); end
end
class ActiveSupport::EncryptedFile::MissingKeyError < RuntimeError
  def initialize(key_path:, env_key:); end
end
class ActiveSupport::OrderedOptions < Hash
  def [](key); end
  def []=(key, value); end
  def _get(arg0); end
  def method_missing(name, *args); end
  def respond_to_missing?(name, include_private); end
end
class ActiveSupport::InheritableOptions < ActiveSupport::OrderedOptions
  def inheritable_copy; end
  def initialize(parent = nil); end
end
class ActiveSupport::EncryptedConfiguration < ActiveSupport::EncryptedFile
  def [](*args, &block); end
  def config; end
  def deserialize(config); end
  def fetch(*args, &block); end
  def initialize(config_path:, key_path:, env_key:, raise_if_missing_key:); end
  def method_missing(method, *args, &block); end
  def options; end
  def read; end
  def respond_to_missing?(name, include_private = nil); end
  def write(contents); end
end
class ActiveSupport::HashWithIndifferentAccess < Hash
  def [](key); end
  def []=(key, value); end
  def assoc(key); end
  def compact; end
  def convert_key(key); end
  def convert_value(value, options = nil); end
  def deep_stringify_keys!; end
  def deep_stringify_keys; end
  def deep_symbolize_keys; end
  def default(*args); end
  def delete(key); end
  def dig(*args); end
  def dup; end
  def except(*keys); end
  def extractable_options?; end
  def fetch(key, *extras); end
  def fetch_values(*indices, &block); end
  def has_key?(key); end
  def include?(key); end
  def initialize(constructor = nil); end
  def key?(key); end
  def member?(key); end
  def merge!(other_hash); end
  def merge(hash, &block); end
  def nested_under_indifferent_access; end
  def regular_update(*arg0); end
  def regular_writer(arg0, arg1); end
  def reject(*args, &block); end
  def replace(other_hash); end
  def reverse_merge!(other_hash); end
  def reverse_merge(other_hash); end
  def select(*args, &block); end
  def self.[](*args); end
  def set_defaults(target); end
  def slice!(*keys); end
  def slice(*keys); end
  def store(key, value); end
  def stringify_keys!; end
  def stringify_keys; end
  def symbolize_keys; end
  def to_hash; end
  def to_options!; end
  def to_options; end
  def transform_keys!; end
  def transform_keys(*args, &block); end
  def transform_values(*args, &block); end
  def update(other_hash); end
  def values_at(*keys); end
  def with_defaults!(other_hash); end
  def with_defaults(other_hash); end
  def with_indifferent_access; end
  def without(*keys); end
end
module Rails
  def self.app_class; end
  def self.app_class=(arg0); end
  def self.application; end
  def self.application=(arg0); end
  def self.autoloaders; end
  def self.backtrace_cleaner; end
  def self.cache; end
  def self.cache=(arg0); end
  def self.configuration; end
  def self.env; end
  def self.env=(environment); end
  def self.gem_version; end
  def self.groups(*groups); end
  def self.initialize!(*args, &block); end
  def self.initialized?(*args, &block); end
  def self.logger; end
  def self.logger=(arg0); end
  def self.public_path; end
  def self.root; end
  def self.version; end
  extend ActiveSupport::Autoload
end
module Rails::Initializable
  def initializers; end
  def run_initializers(group = nil, *args); end
  def self.included(base); end
end
class Rails::Initializable::Initializer
  def after; end
  def before; end
  def belongs_to?(group); end
  def bind(context); end
  def block; end
  def context_class; end
  def initialize(name, context, options, &block); end
  def name; end
  def run(*args); end
end
class Rails::Initializable::Collection < Array
  def +(other); end
  def tsort_each_child(initializer, &block); end
  def tsort_each_node; end
  include TSort
end
module Rails::Initializable::ClassMethods
  def initializer(name, opts = nil, &blk); end
  def initializers; end
  def initializers_chain; end
  def initializers_for(binding); end
end
module ActiveSupport::Multibyte
  def self.proxy_class; end
  def self.proxy_class=(klass); end
end
class Rails::Railtie
  def config; end
  def configure(&block); end
  def each_registered_block(type, &block); end
  def initialize; end
  def railtie_name(*args, &block); end
  def railtie_namespace; end
  def run_console_blocks(app); end
  def run_generators_blocks(app); end
  def run_runner_blocks(app); end
  def run_tasks_blocks(app); end
  def self.abstract_railtie?; end
  def self.config(*args, &block); end
  def self.configure(&block); end
  def self.console(&blk); end
  def self.generate_railtie_name(string); end
  def self.generators(&blk); end
  def self.inherited(base); end
  def self.instance; end
  def self.method_missing(name, *args, &block); end
  def self.new(*arg0); end
  def self.railtie_name(name = nil); end
  def self.rake_tasks(&blk); end
  def self.register_block_for(type, &blk); end
  def self.respond_to_missing?(name, _); end
  def self.runner(&blk); end
  def self.subclasses; end
  extend Rails::Initializable::ClassMethods
  include Rails::Initializable
end
class Rails::Engine < Rails::Railtie
  def _all_autoload_once_paths; end
  def _all_autoload_paths; end
  def _all_load_paths(add_autoload_paths_to_load_path); end
  def app; end
  def build_middleware; end
  def build_request(env); end
  def call(env); end
  def config; end
  def default_middleware_stack; end
  def eager_load!; end
  def endpoint; end
  def engine_name(*args, &block); end
  def env_config; end
  def has_migrations?; end
  def helpers; end
  def helpers_paths; end
  def initialize; end
  def isolated?(*args, &block); end
  def load_config_initializer(initializer); end
  def load_console(app = nil); end
  def load_generators(app = nil); end
  def load_runner(app = nil); end
  def load_seed; end
  def load_tasks(app = nil); end
  def middleware(*args, &block); end
  def paths(*args, &block); end
  def railties; end
  def root(*args, &block); end
  def routes(&block); end
  def routes?; end
  def run_tasks_blocks(*arg0); end
  def self.called_from; end
  def self.called_from=(arg0); end
  def self.eager_load!(*args, &block); end
  def self.endpoint(endpoint = nil); end
  def self.engine_name(name = nil); end
  def self.find(path); end
  def self.find_root(from); end
  def self.find_root_with_flag(flag, root_path, default = nil); end
  def self.inherited(base); end
  def self.isolate_namespace(mod); end
  def self.isolated; end
  def self.isolated=(arg0); end
  def self.isolated?; end
  def with_inline_jobs; end
end
class Rails::Engine::Railties
  def -(others); end
  def _all; end
  def each(*args, &block); end
  def initialize; end
  include Enumerable
end
class Rails::Secrets
  def self.decrypt(data); end
  def self.encrypt(data); end
  def self.encryptor; end
  def self.handle_missing_key; end
  def self.key; end
  def self.key_path; end
  def self.parse(paths, env:); end
  def self.path; end
  def self.preprocess(path); end
  def self.read; end
  def self.read_for_editing(&block); end
  def self.read_key_file; end
  def self.root=(arg0); end
  def self.write(contents); end
  def self.writing(contents); end
end
class Rails::Secrets::MissingKeyError < RuntimeError
  def initialize; end
end
class Rails::Application < Rails::Engine
  def assets; end
  def assets=(arg0); end
  def build_middleware; end
  def build_middleware_stack; end
  def build_request(env); end
  def config; end
  def config=(arg0); end
  def config_for(name, env: nil); end
  def console(&blk); end
  def credentials; end
  def default_middleware_stack; end
  def default_url_options(*args, &block); end
  def default_url_options=(arg); end
  def encrypted(path, key_path: nil, env_key: nil); end
  def env_config; end
  def executor; end
  def generate_development_secret; end
  def generators(&blk); end
  def helpers_paths; end
  def initialize!(group = nil); end
  def initialize(initial_variable_values = nil, &block); end
  def initialized?; end
  def initializer(name, opts = nil, &block); end
  def initializers; end
  def isolate_namespace(mod); end
  def key_generator; end
  def message_verifier(verifier_name); end
  def migration_railties; end
  def ordered_railties; end
  def railties_initializers(current); end
  def rake_tasks(&block); end
  def reload_routes!; end
  def reloader; end
  def reloaders; end
  def require_environment!; end
  def routes_reloader; end
  def run_console_blocks(app); end
  def run_generators_blocks(app); end
  def run_load_hooks!; end
  def run_runner_blocks(app); end
  def run_tasks_blocks(app); end
  def runner(&blk); end
  def sandbox; end
  def sandbox=(arg0); end
  def sandbox?; end
  def secret_key_base; end
  def secrets; end
  def secrets=(arg0); end
  def self.add_lib_to_load_path!(root); end
  def self.create(initial_variable_values = nil, &block); end
  def self.find_root(from); end
  def self.inherited(base); end
  def self.instance; end
  def self.new(*arg0); end
  def to_app; end
  def validate_secret_key_base(secret_key_base); end
  def watchable_args; end
end
class Rails::Application::NonSymbolAccessDeprecatedHash < ActiveSupport::HashWithIndifferentAccess
  def []=(key, value); end
  def convert_key(key); end
  def convert_value(value, options = nil); end
  def initialize(value = nil); end
end
module Rails::VERSION
end
class LoadError < ScriptError
  def is_missing?(location); end
end
class NameError < StandardError
  def missing_name; end
  def missing_name?(name); end
end
module ActiveSupport::Concurrency
end
class ActiveSupport::Concurrency::ShareLock
  def busy_for_exclusive?(purpose); end
  def busy_for_sharing?(purpose); end
  def eligible_waiters?(compatible); end
  def exclusive(purpose: nil, compatible: nil, after_compatible: nil, no_wait: nil); end
  def initialize; end
  def raw_state; end
  def sharing; end
  def start_exclusive(purpose: nil, compatible: nil, no_wait: nil); end
  def start_sharing; end
  def stop_exclusive(compatible: nil); end
  def stop_sharing; end
  def wait_for(method); end
  def yield_shares(purpose: nil, compatible: nil, block_share: nil); end
  include MonitorMixin
end
module ActiveSupport::Dependencies
  def _eager_load_paths; end
  def _eager_load_paths=(obj); end
  def autoload_module!(into, const_name, qualified_name, path_suffix); end
  def autoload_once_paths; end
  def autoload_once_paths=(obj); end
  def autoload_paths; end
  def autoload_paths=(obj); end
  def autoloadable_module?(path_suffix); end
  def autoloaded?(desc); end
  def autoloaded_constants; end
  def autoloaded_constants=(obj); end
  def clear; end
  def constant_watch_stack; end
  def constant_watch_stack=(obj); end
  def constantize(name); end
  def depend_on(file_name, message = nil); end
  def explicitly_unloadable_constants; end
  def explicitly_unloadable_constants=(obj); end
  def history; end
  def history=(obj); end
  def hook!; end
  def interlock; end
  def interlock=(obj); end
  def load?; end
  def load_file(path, const_paths = nil); end
  def load_missing_constant(from_mod, const_name); end
  def load_once_path?(path); end
  def loadable_constants_for_path(path, bases = nil); end
  def loaded; end
  def loaded=(obj); end
  def loading; end
  def loading=(obj); end
  def log(message); end
  def logger; end
  def logger=(obj); end
  def mark_for_unload(const_desc); end
  def mechanism; end
  def mechanism=(obj); end
  def new_constants_in(*descs); end
  def qualified_const_defined?(path); end
  def qualified_name_for(mod, name); end
  def reference(klass); end
  def remove_constant(const); end
  def remove_unloadable_constants!; end
  def require_or_load(file_name, const_path = nil); end
  def safe_constantize(name); end
  def search_for_file(path_suffix); end
  def self._eager_load_paths; end
  def self._eager_load_paths=(obj); end
  def self.autoload_once_paths; end
  def self.autoload_once_paths=(obj); end
  def self.autoload_paths; end
  def self.autoload_paths=(o); end
  def self.autoloaded_constants; end
  def self.autoloaded_constants=(obj); end
  def self.constant_watch_stack; end
  def self.constant_watch_stack=(obj); end
  def self.explicitly_unloadable_constants; end
  def self.explicitly_unloadable_constants=(obj); end
  def self.history; end
  def self.history=(obj); end
  def self.interlock; end
  def self.interlock=(obj); end
  def self.load_interlock; end
  def self.loaded; end
  def self.loaded=(obj); end
  def self.loading; end
  def self.loading=(obj); end
  def self.logger; end
  def self.logger=(obj); end
  def self.mechanism; end
  def self.mechanism=(obj); end
  def self.run_interlock; end
  def self.unload_interlock; end
  def self.verbose; end
  def self.verbose=(verbose); end
  def self.warnings_on_first_load; end
  def self.warnings_on_first_load=(obj); end
  def to_constant_name(desc); end
  def unhook!; end
  def verbose; end
  def verbose=(obj); end
  def warnings_on_first_load; end
  def warnings_on_first_load=(obj); end
  def will_unload?(const_desc); end
  extend ActiveSupport::Dependencies
end
class ActiveSupport::Dependencies::Interlock
  def done_running; end
  def done_unloading; end
  def initialize; end
  def loading; end
  def permit_concurrent_loads; end
  def raw_state(&block); end
  def running; end
  def start_running; end
  def start_unloading; end
  def unloading; end
end
class ActiveSupport::Dependencies::WatchStack
  def each(&block); end
  def initialize; end
  def new_constants; end
  def pop_modules(modules); end
  def watch_namespaces(namespaces); end
  def watching; end
  def watching?; end
  include Enumerable
end
module ActiveSupport::Dependencies::ModuleConstMissing
  def const_missing(const_name); end
  def guess_for_anonymous(const_name); end
  def self.append_features(base); end
  def self.exclude_from(base); end
  def unloadable(const_desc = nil); end
end
module ActiveSupport::Dependencies::Loadable
  def load(file, wrap = nil); end
  def load_dependency(file); end
  def require(file); end
  def require_dependency(file_name, message = nil); end
  def require_or_load(file_name); end
  def self.exclude_from(base); end
  def unloadable(const_desc); end
end
module ActiveSupport::Dependencies::Blamable
  def blame_file!(file); end
  def blamed_files; end
  def copy_blame!(exc); end
  def describe_blame; end
end
class ActiveSupport::Dependencies::ClassCache
  def [](key); end
  def clear!; end
  def empty?; end
  def get(key); end
  def initialize; end
  def key?(key); end
  def safe_get(key); end
  def store(klass); end
end
class Exception
  def as_json(options = nil); end
  include ActiveSupport::Dependencies::Blamable
end
module ActiveSupport::Dependencies::ZeitwerkIntegration
  def self.autoload_once?(autoload_path); end
  def self.decorate_dependencies; end
  def self.eager_load?(autoload_path); end
  def self.freeze_paths; end
  def self.setup_autoloaders(enable_reloading); end
  def self.take_over(enable_reloading:); end
end
module ActiveSupport::Dependencies::ZeitwerkIntegration::Decorations
  def autoloaded?(object); end
  def autoloaded_constants; end
  def clear; end
  def constantize(cpath); end
  def safe_constantize(cpath); end
  def unhook!; end
  def verbose=(verbose); end
end
module ActiveSupport::Dependencies::ZeitwerkIntegration::Inflector
  def self.camelize(basename, _abspath); end
end
module Rails::Autoloaders
  def self.each; end
  def self.logger=(logger); end
  def self.main; end
  def self.once; end
  def self.zeitwerk_enabled?; end
end
class Symbol
  def as_json(options = nil); end
end
class BigDecimal < Numeric
  def as_json(options = nil); end
  def duplicable?; end
end
class Method
  def duplicable?; end
end
class Complex < Numeric
end
class Rational < Numeric
end
module ActiveSupport::Tryable
  def try!(method_name = nil, *args, &b); end
  def try(method_name = nil, *args, &b); end
end
class Delegator < BasicObject
  include ActiveSupport::Tryable
end
class DateTime < Date
  def <=>(other); end
  def acts_like_date?; end
  def acts_like_time?; end
  def advance(options); end
  def ago(seconds); end
  def as_json(options = nil); end
  def at_beginning_of_day; end
  def at_beginning_of_hour; end
  def at_beginning_of_minute; end
  def at_end_of_day; end
  def at_end_of_hour; end
  def at_end_of_minute; end
  def at_midday; end
  def at_middle_of_day; end
  def at_midnight; end
  def at_noon; end
  def beginning_of_day; end
  def beginning_of_hour; end
  def beginning_of_minute; end
  def blank?; end
  def change(options); end
  def default_inspect; end
  def end_of_day; end
  def end_of_hour; end
  def end_of_minute; end
  def formatted_offset(colon = nil, alternate_utc_string = nil); end
  def getgm; end
  def getlocal(utc_offset = nil); end
  def getutc; end
  def gmtime; end
  def in(seconds); end
  def inspect; end
  def localtime(utc_offset = nil); end
  def midday; end
  def middle_of_day; end
  def midnight; end
  def noon; end
  def nsec; end
  def offset_in_seconds; end
  def readable_inspect; end
  def seconds_since_midnight; end
  def seconds_since_unix_epoch; end
  def seconds_until_end_of_day; end
  def self.civil_from_format(utc_or_local, year, month = nil, day = nil, hour = nil, min = nil, sec = nil); end
  def self.current; end
  def since(seconds); end
  def subsec; end
  def to_default_s; end
  def to_f; end
  def to_formatted_s(format = nil); end
  def to_i; end
  def usec; end
  def utc; end
  def utc?; end
  def utc_offset; end
  include DateAndTime::Compatibility
end
module ActiveSupport::XmlMini_REXML
  def collapse(element, depth); end
  def empty_content?(element); end
  def get_attributes(element); end
  def merge!(hash, key, value); end
  def merge_element!(hash, element, depth); end
  def merge_texts!(hash, element); end
  def parse(data); end
  extend ActiveSupport::XmlMini_REXML
end
module ActiveSupport::XmlMini
  def _dasherize(key); end
  def _parse_binary(bin, entity); end
  def _parse_file(file, entity); end
  def backend; end
  def backend=(name); end
  def cast_backend_name_to_module(name); end
  def current_thread_backend; end
  def current_thread_backend=(name); end
  def depth; end
  def depth=(arg0); end
  def parse(*args, &block); end
  def rename_key(key, options = nil); end
  def to_tag(key, value, options); end
  def with_backend(name); end
  extend ActiveSupport::XmlMini
end
module ActiveSupport::XmlMini::FileLike
  def content_type; end
  def content_type=(arg0); end
  def original_filename; end
  def original_filename=(arg0); end
end
class ActiveSupport::Duration
  def %(other); end
  def *(other); end
  def +(other); end
  def -(other); end
  def -@; end
  def /(other); end
  def <=>(other); end
  def ==(other); end
  def after(time = nil); end
  def ago(time = nil); end
  def as_json(options = nil); end
  def before(time = nil); end
  def coerce(other); end
  def encode_with(coder); end
  def eql?(other); end
  def from_now(time = nil); end
  def hash; end
  def init_with(coder); end
  def initialize(value, parts); end
  def inspect; end
  def instance_of?(klass); end
  def is_a?(klass); end
  def iso8601(precision: nil); end
  def kind_of?(klass); end
  def method_missing(method, *args, &block); end
  def parts; end
  def parts=(arg0); end
  def raise_type_error(other); end
  def respond_to_missing?(method, _); end
  def self.===(other); end
  def self.build(value); end
  def self.calculate_total_seconds(parts); end
  def self.days(value); end
  def self.hours(value); end
  def self.minutes(value); end
  def self.months(value); end
  def self.parse(iso8601duration); end
  def self.seconds(value); end
  def self.weeks(value); end
  def self.years(value); end
  def since(time = nil); end
  def sum(sign, time = nil); end
  def to_i; end
  def to_s; end
  def until(time = nil); end
  def value; end
  def value=(arg0); end
end
class ActiveSupport::Duration::Scalar < Numeric
  def %(other); end
  def *(other); end
  def +(other); end
  def -(other); end
  def -@; end
  def /(other); end
  def <=>(other); end
  def calculate(op, other); end
  def coerce(other); end
  def initialize(value); end
  def raise_type_error(other); end
  def to_f(*args, &block); end
  def to_i(*args, &block); end
  def to_s(*args, &block); end
  def value; end
end
class ActiveSupport::TimeZone
  def <=>(zone); end
  def =~(re); end
  def at(*args); end
  def encode_with(coder); end
  def formatted_offset(colon = nil, alternate_utc_string = nil); end
  def init_with(coder); end
  def initialize(name, utc_offset = nil, tzinfo = nil); end
  def iso8601(str); end
  def local(*args); end
  def local_to_utc(time, dst = nil); end
  def name; end
  def now; end
  def parse(str, now = nil); end
  def parts_to_time(parts, now); end
  def period_for_local(time, dst = nil); end
  def period_for_utc(time); end
  def periods_for_local(time); end
  def rfc3339(str); end
  def self.[](arg); end
  def self.all; end
  def self.clear; end
  def self.country_zones(country_code); end
  def self.create(*arg0); end
  def self.find_tzinfo(name); end
  def self.load_country_zones(code); end
  def self.new(name); end
  def self.seconds_to_utc_offset(seconds, colon = nil); end
  def self.us_zones; end
  def self.zones_map; end
  def strptime(str, format, now = nil); end
  def time_now; end
  def to_s; end
  def today; end
  def tomorrow; end
  def tzinfo; end
  def utc_offset; end
  def utc_to_local(time); end
  def yesterday; end
  include Comparable
end
class ActiveSupport::TimeWithZone
  def +(other); end
  def -(other); end
  def <=>(other); end
  def acts_like_time?; end
  def advance(options); end
  def after?(arg0); end
  def ago(other); end
  def as_json(options = nil); end
  def before?(arg0); end
  def between?(min, max); end
  def blank?; end
  def change(options); end
  def comparable_time; end
  def day; end
  def dst?; end
  def duration_of_variable_length?(obj); end
  def encode_with(coder); end
  def eql?(other); end
  def formatted_offset(colon = nil, alternate_utc_string = nil); end
  def freeze; end
  def future?; end
  def get_period_and_ensure_valid_local_time(period); end
  def getgm; end
  def getlocal(utc_offset = nil); end
  def getutc; end
  def gmt?; end
  def gmt_offset; end
  def gmtime; end
  def gmtoff; end
  def hash; end
  def hour; end
  def httpdate; end
  def in(other); end
  def in_time_zone(new_zone = nil); end
  def init_with(coder); end
  def initialize(utc_time, time_zone, local_time = nil, period = nil); end
  def inspect; end
  def is_a?(klass); end
  def isdst; end
  def iso8601(fraction_digits = nil); end
  def kind_of?(klass); end
  def localtime(utc_offset = nil); end
  def marshal_dump; end
  def marshal_load(variables); end
  def mday; end
  def method_missing(sym, *args, &block); end
  def min; end
  def mon; end
  def month; end
  def nsec; end
  def past?; end
  def period; end
  def respond_to?(sym, include_priv = nil); end
  def respond_to_missing?(sym, include_priv); end
  def rfc2822; end
  def rfc3339(fraction_digits = nil); end
  def rfc822; end
  def sec; end
  def self.name; end
  def since(other); end
  def strftime(format); end
  def time; end
  def time_zone; end
  def to_a; end
  def to_date; end
  def to_datetime; end
  def to_f; end
  def to_formatted_s(format = nil); end
  def to_i; end
  def to_r; end
  def to_s(format = nil); end
  def to_time; end
  def today?; end
  def transfer_time_values_to_utc_constructor(time); end
  def tv_sec; end
  def usec; end
  def utc; end
  def utc?; end
  def utc_offset; end
  def wday; end
  def wrap_with_time_zone(time); end
  def xmlschema(fraction_digits = nil); end
  def yday; end
  def year; end
  def zone; end
  include Comparable
end
module DateAndTime::Zones
  def in_time_zone(zone = nil); end
  def time_with_zone(time, zone); end
end
module DateAndTime::Calculations
  def after?(date_or_time); end
  def all_day; end
  def all_month; end
  def all_quarter; end
  def all_week(start_day = nil); end
  def all_year; end
  def at_beginning_of_month; end
  def at_beginning_of_quarter; end
  def at_beginning_of_week(start_day = nil); end
  def at_beginning_of_year; end
  def at_end_of_month; end
  def at_end_of_quarter; end
  def at_end_of_week(start_day = nil); end
  def at_end_of_year; end
  def before?(date_or_time); end
  def beginning_of_month; end
  def beginning_of_quarter; end
  def beginning_of_week(start_day = nil); end
  def beginning_of_year; end
  def copy_time_to(other); end
  def days_ago(days); end
  def days_since(days); end
  def days_span(day); end
  def days_to_week_start(start_day = nil); end
  def end_of_month; end
  def end_of_quarter; end
  def end_of_week(start_day = nil); end
  def end_of_year; end
  def first_hour(date_or_time); end
  def future?; end
  def last_hour(date_or_time); end
  def last_month; end
  def last_quarter; end
  def last_week(start_day = nil, same_time: nil); end
  def last_weekday; end
  def last_year; end
  def monday; end
  def months_ago(months); end
  def months_since(months); end
  def next_occurring(day_of_week); end
  def next_quarter; end
  def next_week(given_day_in_next_week = nil, same_time: nil); end
  def next_weekday; end
  def on_weekday?; end
  def on_weekend?; end
  def past?; end
  def prev_occurring(day_of_week); end
  def prev_quarter; end
  def prev_week(start_day = nil, same_time: nil); end
  def prev_weekday; end
  def sunday; end
  def today?; end
  def tomorrow; end
  def weeks_ago(weeks); end
  def weeks_since(weeks); end
  def years_ago(years); end
  def years_since(years); end
  def yesterday; end
end
class Date
  def acts_like_date?; end
  def advance(options); end
  def ago(seconds); end
  def as_json(options = nil); end
  def at_beginning_of_day; end
  def at_end_of_day; end
  def at_midday; end
  def at_middle_of_day; end
  def at_midnight; end
  def at_noon; end
  def beginning_of_day; end
  def blank?; end
  def change(options); end
  def compare_with_coercion(other); end
  def compare_without_coercion(arg0); end
  def default_inspect; end
  def end_of_day; end
  def in(seconds); end
  def midday; end
  def middle_of_day; end
  def midnight; end
  def minus_with_duration(other); end
  def minus_without_duration(arg0); end
  def noon; end
  def plus_with_duration(other); end
  def plus_without_duration(arg0); end
  def readable_inspect; end
  def self.beginning_of_week; end
  def self.beginning_of_week=(week_start); end
  def self.beginning_of_week_default; end
  def self.beginning_of_week_default=(arg0); end
  def self.current; end
  def self.find_beginning_of_week!(week_start); end
  def self.tomorrow; end
  def self.yesterday; end
  def since(seconds); end
  def to_default_s; end
  def to_formatted_s(format = nil); end
  include DateAndTime::Calculations
  include DateAndTime::Zones
end
class Integer < Numeric
  def month; end
  def months; end
  def multiple_of?(number); end
  def ordinal; end
  def ordinalize; end
  def year; end
  def years; end
end
class ActiveSupport::XMLConverter
  def become_array?(value); end
  def become_content?(value); end
  def become_empty_string?(value); end
  def become_hash?(value); end
  def deep_to_h(value); end
  def garbage?(value); end
  def initialize(xml, disallowed_types = nil); end
  def normalize_keys(params); end
  def nothing?(value); end
  def process_array(value); end
  def process_content(value); end
  def process_hash(value); end
  def to_h; end
end
class ActiveSupport::XMLConverter::DisallowedType < StandardError
  def initialize(type); end
end
module ActiveSupport::BigDecimalWithDefaultFormat
  def to_s(format = nil); end
end
module ActiveSupport::ToJsonWithActiveSupportEncoder
  def to_json(options = nil); end
end
class Struct
  def as_json(options = nil); end
end
class Float < Numeric
  def as_json(options = nil); end
end
class Regexp
  def as_json(options = nil); end
  def multiline?; end
end
module Enumerable
  def _original_sum_with_required_identity(*arg0); end
  def as_json(options = nil); end
  def exclude?(object); end
  def excluding(*elements); end
  def including(*elements); end
  def index_by; end
  def index_with(default = nil); end
  def many?; end
  def pluck(*keys); end
  def without(*elements); end
end
class IO
  def as_json(options = nil); end
end
class Range
  def as_json(options = nil); end
  def overlaps?(other); end
  def sum(identity = nil); end
end
class URI::Generic
  def as_json(options = nil); end
end
class Pathname
  def as_json(options = nil); end
end
class Process::Status
  def as_json(options = nil); end
end
class ActiveSupport::OptionMerger
  def initialize(context, options); end
  def method_missing(method, *arguments, &block); end
end
module Rails::Paths
end
class Rails::Paths::Root
  def [](path); end
  def []=(path, value); end
  def add(path, options = nil); end
  def all_paths; end
  def autoload_once; end
  def autoload_paths; end
  def eager_load; end
  def filter_by(&block); end
  def initialize(path); end
  def keys; end
  def load_paths; end
  def path; end
  def path=(arg0); end
  def values; end
  def values_at(*list); end
end
class Rails::Paths::Path
  def <<(path); end
  def absolute_current; end
  def autoload!; end
  def autoload?; end
  def autoload_once!; end
  def autoload_once?; end
  def children; end
  def concat(paths); end
  def each(&block); end
  def eager_load!; end
  def eager_load?; end
  def existent; end
  def existent_directories; end
  def expanded; end
  def extensions; end
  def files_in(path); end
  def first; end
  def glob; end
  def glob=(arg0); end
  def initialize(root, current, paths, options = nil); end
  def last; end
  def load_path!; end
  def load_path?; end
  def push(path); end
  def skip_autoload!; end
  def skip_autoload_once!; end
  def skip_eager_load!; end
  def skip_load_path!; end
  def to_a; end
  def to_ary; end
  def unshift(*paths); end
  include Enumerable
end
module Rails::Rack
end
module Rails::Configuration
end
class Rails::Configuration::MiddlewareStackProxy
  def +(other); end
  def delete(*args, &block); end
  def delete_operations; end
  def initialize(operations = nil, delete_operations = nil); end
  def insert(*args, &block); end
  def insert_after(*args, &block); end
  def insert_before(*args, &block); end
  def merge_into(other); end
  def operations; end
  def swap(*args, &block); end
  def unshift(*args, &block); end
  def use(*args, &block); end
end
class Rails::Configuration::Generators
  def aliases; end
  def aliases=(arg0); end
  def api_only; end
  def api_only=(arg0); end
  def colorize_logging; end
  def colorize_logging=(arg0); end
  def fallbacks; end
  def fallbacks=(arg0); end
  def hidden_namespaces; end
  def hide_namespace(namespace); end
  def initialize; end
  def initialize_copy(source); end
  def method_missing(method, *args); end
  def options; end
  def options=(arg0); end
  def templates; end
  def templates=(arg0); end
end
class Rails::Railtie::Configuration
  def after_initialize(&block); end
  def app_generators; end
  def app_middleware; end
  def before_configuration(&block); end
  def before_eager_load(&block); end
  def before_initialize(&block); end
  def eager_load_namespaces; end
  def initialize; end
  def method_missing(name, *args, &blk); end
  def respond_to?(name, include_private = nil); end
  def self.eager_load_namespaces; end
  def to_prepare(&blk); end
  def to_prepare_blocks; end
  def watchable_dirs; end
  def watchable_files; end
end
module I18n
end
class I18n::Railtie < Rails::Railtie
  def self.include_fallbacks_module; end
  def self.init_fallbacks(fallbacks); end
  def self.initialize_i18n(app); end
  def self.validate_fallbacks(fallbacks); end
  def self.watched_dirs_with_extensions(paths); end
end
class ActiveSupport::Railtie < Rails::Railtie
end
class Class < Module
  def class_attribute(*attrs, instance_accessor: nil, instance_reader: nil, instance_writer: nil, instance_predicate: nil, default: nil); end
  def descendants; end
  def subclasses; end
end
module ActionPack
  def self.gem_version; end
  def self.version; end
end
module ActionPack::VERSION
end
module Rack
end
module ActionDispatch
  def self.test_app; end
  def self.test_app=(obj); end
  def test_app; end
  def test_app=(obj); end
  extend ActiveSupport::Autoload
end
class ActionDispatch::IllegalStateError < StandardError
end
module ActionDispatch::Http
  extend ActiveSupport::Autoload
end
module ActionDispatch::Session
end
class ActiveSupport::Messages::RotationConfiguration
  def encrypted; end
  def initialize; end
  def rotate(kind, *args); end
  def signed; end
end
class ActionDispatch::Railtie < Rails::Railtie
end
module ActiveModel
  def self.eager_load!; end
  def self.gem_version; end
  def self.version; end
  extend ActiveSupport::Autoload
end
module ActiveModel::VERSION
end
module ActiveModel::Serializers
  extend ActiveSupport::Autoload
end
class ActiveModel::Railtie < Rails::Railtie
end
module ActiveJob
  def self.gem_version; end
  def self.version; end
  extend ActiveSupport::Autoload
end
module ActiveJob::VERSION
end
class ActiveJob::Railtie < Rails::Railtie
end
module Arel
  def self.arel_node?(value); end
  def self.fetch_attribute(value); end
  def self.sql(raw_sql); end
  def self.star; end
end
class Arel::ArelError < StandardError
end
class Arel::EmptyJoinError < Arel::ArelError
end
module Arel::Crud
  def compile_delete; end
  def compile_insert(values); end
  def compile_update(values, pk); end
  def create_insert; end
end
module Arel::FactoryMethods
  def coalesce(*exprs); end
  def create_and(clauses); end
  def create_false; end
  def create_join(to, constraint = nil, klass = nil); end
  def create_on(expr); end
  def create_string_join(to); end
  def create_table_alias(relation, name); end
  def create_true; end
  def grouping(expr); end
  def lower(column); end
end
module Arel::Expressions
  def average; end
  def count(distinct = nil); end
  def extract(field); end
  def maximum; end
  def minimum; end
  def sum; end
end
module Arel::Predications
  def between(other); end
  def concat(other); end
  def does_not_match(other, escape = nil, case_sensitive = nil); end
  def does_not_match_all(others, escape = nil); end
  def does_not_match_any(others, escape = nil); end
  def does_not_match_regexp(other, case_sensitive = nil); end
  def eq(other); end
  def eq_all(others); end
  def eq_any(others); end
  def grouping_all(method_id, others, *extras); end
  def grouping_any(method_id, others, *extras); end
  def gt(right); end
  def gt_all(others); end
  def gt_any(others); end
  def gteq(right); end
  def gteq_all(others); end
  def gteq_any(others); end
  def in(other); end
  def in_all(others); end
  def in_any(others); end
  def infinity?(value); end
  def is_distinct_from(other); end
  def is_not_distinct_from(other); end
  def lt(right); end
  def lt_all(others); end
  def lt_any(others); end
  def lteq(right); end
  def lteq_all(others); end
  def lteq_any(others); end
  def matches(other, escape = nil, case_sensitive = nil); end
  def matches_all(others, escape = nil, case_sensitive = nil); end
  def matches_any(others, escape = nil, case_sensitive = nil); end
  def matches_regexp(other, case_sensitive = nil); end
  def not_between(other); end
  def not_eq(other); end
  def not_eq_all(others); end
  def not_eq_any(others); end
  def not_in(other); end
  def not_in_all(others); end
  def not_in_any(others); end
  def open_ended?(value); end
  def quoted_array(others); end
  def quoted_node(other); end
  def unboundable?(value); end
  def when(right); end
end
module Arel::WindowPredications
  def over(expr = nil); end
end
module Arel::Math
  def &(other); end
  def *(other); end
  def +(other); end
  def -(other); end
  def /(other); end
  def <<(other); end
  def >>(other); end
  def ^(other); end
  def |(other); end
  def ~; end
end
module Arel::AliasPredication
  def as(other); end
end
module Arel::OrderPredications
  def asc; end
  def desc; end
end
class Arel::Table
  def ==(other); end
  def [](name); end
  def able_to_type_cast?; end
  def alias(name = nil); end
  def eql?(other); end
  def from; end
  def group(*columns); end
  def hash; end
  def having(expr); end
  def initialize(name, as: nil, type_caster: nil); end
  def join(relation, klass = nil); end
  def name; end
  def name=(arg0); end
  def order(*expr); end
  def outer_join(relation); end
  def project(*things); end
  def self.engine; end
  def self.engine=(arg0); end
  def skip(amount); end
  def table_alias; end
  def table_alias=(arg0); end
  def table_name; end
  def take(amount); end
  def type_cast_for_database(attribute_name, value); end
  def type_caster; end
  def where(condition); end
  include Arel::Crud
  include Arel::FactoryMethods
end
module Arel::Attributes
end
class Anonymous_Struct_1 < Struct
  def name; end
  def name=(_); end
  def relation; end
  def relation=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Arel::Attributes::Attribute < Anonymous_Struct_1
  def able_to_type_cast?; end
  def lower; end
  def type_cast_for_database(value); end
  include Arel::AliasPredication
  include Arel::Expressions
  include Arel::Math
  include Arel::OrderPredications
  include Arel::Predications
end
class Arel::Attributes::String < Arel::Attributes::Attribute
end
class Arel::Attributes::Time < Arel::Attributes::Attribute
end
class Arel::Attributes::Boolean < Arel::Attributes::Attribute
end
class Arel::Attributes::Decimal < Arel::Attributes::Attribute
end
class Arel::Attributes::Float < Arel::Attributes::Attribute
end
class Arel::Attributes::Integer < Arel::Attributes::Attribute
end
class Arel::Attributes::Undefined < Arel::Attributes::Attribute
end
module Arel::Visitors
end
class Arel::Visitors::Visitor
  def accept(object, collector = nil); end
  def dispatch; end
  def get_dispatch_cache; end
  def initialize; end
  def self.dispatch_cache; end
  def visit(object, collector = nil); end
end
class Arel::Visitors::DepthFirst < Arel::Visitors::Visitor
  def binary(o); end
  def function(o); end
  def get_dispatch_cache; end
  def initialize(block = nil); end
  def nary(o); end
  def terminal(o); end
  def unary(o); end
  def visit(o, _ = nil); end
  def visit_ActiveSupport_Multibyte_Chars(o); end
  def visit_ActiveSupport_StringInquirer(o); end
  def visit_Arel_Attribute(o); end
  def visit_Arel_Attributes_Attribute(o); end
  def visit_Arel_Attributes_Boolean(o); end
  def visit_Arel_Attributes_Decimal(o); end
  def visit_Arel_Attributes_Float(o); end
  def visit_Arel_Attributes_Integer(o); end
  def visit_Arel_Attributes_String(o); end
  def visit_Arel_Attributes_Time(o); end
  def visit_Arel_Nodes_And(o); end
  def visit_Arel_Nodes_As(o); end
  def visit_Arel_Nodes_Ascending(o); end
  def visit_Arel_Nodes_Assignment(o); end
  def visit_Arel_Nodes_Avg(o); end
  def visit_Arel_Nodes_Between(o); end
  def visit_Arel_Nodes_BindParam(o); end
  def visit_Arel_Nodes_Case(o); end
  def visit_Arel_Nodes_Comment(o); end
  def visit_Arel_Nodes_Concat(o); end
  def visit_Arel_Nodes_Count(o); end
  def visit_Arel_Nodes_Cube(o); end
  def visit_Arel_Nodes_DeleteStatement(o); end
  def visit_Arel_Nodes_Descending(o); end
  def visit_Arel_Nodes_DoesNotMatch(o); end
  def visit_Arel_Nodes_Else(o); end
  def visit_Arel_Nodes_Equality(o); end
  def visit_Arel_Nodes_Exists(o); end
  def visit_Arel_Nodes_False(o); end
  def visit_Arel_Nodes_FullOuterJoin(o); end
  def visit_Arel_Nodes_GreaterThan(o); end
  def visit_Arel_Nodes_GreaterThanOrEqual(o); end
  def visit_Arel_Nodes_Group(o); end
  def visit_Arel_Nodes_Grouping(o); end
  def visit_Arel_Nodes_GroupingElement(o); end
  def visit_Arel_Nodes_GroupingSet(o); end
  def visit_Arel_Nodes_Having(o); end
  def visit_Arel_Nodes_In(o); end
  def visit_Arel_Nodes_InfixOperation(o); end
  def visit_Arel_Nodes_InnerJoin(o); end
  def visit_Arel_Nodes_InsertStatement(o); end
  def visit_Arel_Nodes_IsDistinctFrom(o); end
  def visit_Arel_Nodes_IsNotDistinctFrom(o); end
  def visit_Arel_Nodes_JoinSource(o); end
  def visit_Arel_Nodes_Lateral(o); end
  def visit_Arel_Nodes_LessThan(o); end
  def visit_Arel_Nodes_LessThanOrEqual(o); end
  def visit_Arel_Nodes_Limit(o); end
  def visit_Arel_Nodes_Lock(o); end
  def visit_Arel_Nodes_Matches(o); end
  def visit_Arel_Nodes_Max(o); end
  def visit_Arel_Nodes_Min(o); end
  def visit_Arel_Nodes_NamedFunction(o); end
  def visit_Arel_Nodes_Node(o); end
  def visit_Arel_Nodes_Not(o); end
  def visit_Arel_Nodes_NotEqual(o); end
  def visit_Arel_Nodes_NotIn(o); end
  def visit_Arel_Nodes_NotRegexp(o); end
  def visit_Arel_Nodes_Offset(o); end
  def visit_Arel_Nodes_On(o); end
  def visit_Arel_Nodes_OptimizerHints(o); end
  def visit_Arel_Nodes_Or(o); end
  def visit_Arel_Nodes_Ordering(o); end
  def visit_Arel_Nodes_OuterJoin(o); end
  def visit_Arel_Nodes_Regexp(o); end
  def visit_Arel_Nodes_RightOuterJoin(o); end
  def visit_Arel_Nodes_RollUp(o); end
  def visit_Arel_Nodes_SelectCore(o); end
  def visit_Arel_Nodes_SelectStatement(o); end
  def visit_Arel_Nodes_SqlLiteral(o); end
  def visit_Arel_Nodes_StringJoin(o); end
  def visit_Arel_Nodes_Sum(o); end
  def visit_Arel_Nodes_TableAlias(o); end
  def visit_Arel_Nodes_True(o); end
  def visit_Arel_Nodes_UnqualifiedColumn(o); end
  def visit_Arel_Nodes_UpdateStatement(o); end
  def visit_Arel_Nodes_ValuesList(o); end
  def visit_Arel_Nodes_When(o); end
  def visit_Arel_Nodes_Window(o); end
  def visit_Arel_Table(o); end
  def visit_Array(o); end
  def visit_BigDecimal(o); end
  def visit_Class(o); end
  def visit_Date(o); end
  def visit_DateTime(o); end
  def visit_FalseClass(o); end
  def visit_Float(o); end
  def visit_Hash(o); end
  def visit_Integer(o); end
  def visit_NilClass(o); end
  def visit_Set(o); end
  def visit_String(o); end
  def visit_Symbol(o); end
  def visit_Time(o); end
  def visit_TrueClass(o); end
end
class Arel::Visitors::UnsupportedVisitError < StandardError
  def initialize(object); end
end
class Arel::Visitors::ToSql < Arel::Visitors::Visitor
  def aggregate(name, o, collector); end
  def build_subselect(key, o); end
  def collect_in_clause(left, right, collector); end
  def collect_nodes_for(nodes, collector, spacer, connector = nil); end
  def collect_not_in_clause(left, right, collector); end
  def collect_optimizer_hints(o, collector); end
  def compile(node, collector = nil); end
  def has_join_sources?(o); end
  def has_limit_or_offset_or_orders?(o); end
  def infix_value(o, collector, value); end
  def infix_value_with_paren(o, collector, value, suppress_parens = nil); end
  def initialize(connection); end
  def inject_join(list, collector, join_str); end
  def is_distinct_from(o, collector); end
  def literal(o, collector); end
  def maybe_visit(thing, collector); end
  def prepare_delete_statement(o); end
  def prepare_update_statement(o); end
  def quote(value); end
  def quote_column_name(name); end
  def quote_table_name(name); end
  def quoted(o, a); end
  def sanitize_as_sql_comment(value); end
  def unboundable?(value); end
  def unsupported(o, collector); end
  def visit_ActiveSupport_Multibyte_Chars(o, collector); end
  def visit_ActiveSupport_StringInquirer(o, collector); end
  def visit_Arel_Attributes_Attribute(o, collector); end
  def visit_Arel_Nodes_Addition(o, collector); end
  def visit_Arel_Nodes_And(o, collector); end
  def visit_Arel_Nodes_As(o, collector); end
  def visit_Arel_Nodes_Ascending(o, collector); end
  def visit_Arel_Nodes_Assignment(o, collector); end
  def visit_Arel_Nodes_Avg(o, collector); end
  def visit_Arel_Nodes_Between(o, collector); end
  def visit_Arel_Nodes_Bin(o, collector); end
  def visit_Arel_Nodes_BindParam(o, collector); end
  def visit_Arel_Nodes_Case(o, collector); end
  def visit_Arel_Nodes_Casted(o, collector); end
  def visit_Arel_Nodes_Comment(o, collector); end
  def visit_Arel_Nodes_Count(o, collector); end
  def visit_Arel_Nodes_CurrentRow(o, collector); end
  def visit_Arel_Nodes_DeleteStatement(o, collector); end
  def visit_Arel_Nodes_Descending(o, collector); end
  def visit_Arel_Nodes_Distinct(o, collector); end
  def visit_Arel_Nodes_DistinctOn(o, collector); end
  def visit_Arel_Nodes_Division(o, collector); end
  def visit_Arel_Nodes_DoesNotMatch(o, collector); end
  def visit_Arel_Nodes_Else(o, collector); end
  def visit_Arel_Nodes_Equality(o, collector); end
  def visit_Arel_Nodes_Except(o, collector); end
  def visit_Arel_Nodes_Exists(o, collector); end
  def visit_Arel_Nodes_Extract(o, collector); end
  def visit_Arel_Nodes_False(o, collector); end
  def visit_Arel_Nodes_Following(o, collector); end
  def visit_Arel_Nodes_FullOuterJoin(o, collector); end
  def visit_Arel_Nodes_GreaterThan(o, collector); end
  def visit_Arel_Nodes_GreaterThanOrEqual(o, collector); end
  def visit_Arel_Nodes_Group(o, collector); end
  def visit_Arel_Nodes_Grouping(o, collector); end
  def visit_Arel_Nodes_In(o, collector); end
  def visit_Arel_Nodes_InfixOperation(o, collector); end
  def visit_Arel_Nodes_InnerJoin(o, collector); end
  def visit_Arel_Nodes_InsertStatement(o, collector); end
  def visit_Arel_Nodes_Intersect(o, collector); end
  def visit_Arel_Nodes_IsDistinctFrom(o, collector); end
  def visit_Arel_Nodes_IsNotDistinctFrom(o, collector); end
  def visit_Arel_Nodes_JoinSource(o, collector); end
  def visit_Arel_Nodes_LessThan(o, collector); end
  def visit_Arel_Nodes_LessThanOrEqual(o, collector); end
  def visit_Arel_Nodes_Limit(o, collector); end
  def visit_Arel_Nodes_Lock(o, collector); end
  def visit_Arel_Nodes_Matches(o, collector); end
  def visit_Arel_Nodes_Max(o, collector); end
  def visit_Arel_Nodes_Min(o, collector); end
  def visit_Arel_Nodes_Multiplication(o, collector); end
  def visit_Arel_Nodes_NamedFunction(o, collector); end
  def visit_Arel_Nodes_NamedWindow(o, collector); end
  def visit_Arel_Nodes_Not(o, collector); end
  def visit_Arel_Nodes_NotEqual(o, collector); end
  def visit_Arel_Nodes_NotIn(o, collector); end
  def visit_Arel_Nodes_NotRegexp(o, collector); end
  def visit_Arel_Nodes_Offset(o, collector); end
  def visit_Arel_Nodes_On(o, collector); end
  def visit_Arel_Nodes_OptimizerHints(o, collector); end
  def visit_Arel_Nodes_Or(o, collector); end
  def visit_Arel_Nodes_OuterJoin(o, collector); end
  def visit_Arel_Nodes_Over(o, collector); end
  def visit_Arel_Nodes_Preceding(o, collector); end
  def visit_Arel_Nodes_Quoted(o, collector); end
  def visit_Arel_Nodes_Range(o, collector); end
  def visit_Arel_Nodes_Regexp(o, collector); end
  def visit_Arel_Nodes_RightOuterJoin(o, collector); end
  def visit_Arel_Nodes_Rows(o, collector); end
  def visit_Arel_Nodes_SelectCore(o, collector); end
  def visit_Arel_Nodes_SelectOptions(o, collector); end
  def visit_Arel_Nodes_SelectStatement(o, collector); end
  def visit_Arel_Nodes_SqlLiteral(o, collector); end
  def visit_Arel_Nodes_StringJoin(o, collector); end
  def visit_Arel_Nodes_Subtraction(o, collector); end
  def visit_Arel_Nodes_Sum(o, collector); end
  def visit_Arel_Nodes_TableAlias(o, collector); end
  def visit_Arel_Nodes_True(o, collector); end
  def visit_Arel_Nodes_UnaryOperation(o, collector); end
  def visit_Arel_Nodes_Union(o, collector); end
  def visit_Arel_Nodes_UnionAll(o, collector); end
  def visit_Arel_Nodes_UnqualifiedColumn(o, collector); end
  def visit_Arel_Nodes_UpdateStatement(o, collector); end
  def visit_Arel_Nodes_ValuesList(o, collector); end
  def visit_Arel_Nodes_When(o, collector); end
  def visit_Arel_Nodes_Window(o, collector); end
  def visit_Arel_Nodes_With(o, collector); end
  def visit_Arel_Nodes_WithRecursive(o, collector); end
  def visit_Arel_SelectManager(o, collector); end
  def visit_Arel_Table(o, collector); end
  def visit_Array(o, collector); end
  def visit_BigDecimal(o, collector); end
  def visit_Class(o, collector); end
  def visit_Date(o, collector); end
  def visit_DateTime(o, collector); end
  def visit_FalseClass(o, collector); end
  def visit_Float(o, collector); end
  def visit_Hash(o, collector); end
  def visit_Integer(o, collector); end
  def visit_NilClass(o, collector); end
  def visit_Set(o, collector); end
  def visit_String(o, collector); end
  def visit_Symbol(o, collector); end
  def visit_Time(o, collector); end
  def visit_TrueClass(o, collector); end
end
class Arel::Visitors::SQLite < Arel::Visitors::ToSql
  def visit_Arel_Nodes_False(o, collector); end
  def visit_Arel_Nodes_IsDistinctFrom(o, collector); end
  def visit_Arel_Nodes_IsNotDistinctFrom(o, collector); end
  def visit_Arel_Nodes_Lock(o, collector); end
  def visit_Arel_Nodes_SelectStatement(o, collector); end
  def visit_Arel_Nodes_True(o, collector); end
end
class Arel::Visitors::PostgreSQL < Arel::Visitors::ToSql
  def grouping_array_or_grouping_element(o, collector); end
  def grouping_parentheses(o, collector); end
  def visit_Arel_Nodes_BindParam(o, collector); end
  def visit_Arel_Nodes_Cube(o, collector); end
  def visit_Arel_Nodes_DistinctOn(o, collector); end
  def visit_Arel_Nodes_DoesNotMatch(o, collector); end
  def visit_Arel_Nodes_GroupingElement(o, collector); end
  def visit_Arel_Nodes_GroupingSet(o, collector); end
  def visit_Arel_Nodes_IsDistinctFrom(o, collector); end
  def visit_Arel_Nodes_IsNotDistinctFrom(o, collector); end
  def visit_Arel_Nodes_Lateral(o, collector); end
  def visit_Arel_Nodes_Matches(o, collector); end
  def visit_Arel_Nodes_NotRegexp(o, collector); end
  def visit_Arel_Nodes_Regexp(o, collector); end
  def visit_Arel_Nodes_RollUp(o, collector); end
end
class Arel::Visitors::MySQL < Arel::Visitors::ToSql
  def build_subselect(key, o); end
  def prepare_delete_statement(o); end
  def prepare_update_statement(o); end
  def visit_Arel_Nodes_Bin(o, collector); end
  def visit_Arel_Nodes_Concat(o, collector); end
  def visit_Arel_Nodes_IsDistinctFrom(o, collector); end
  def visit_Arel_Nodes_IsNotDistinctFrom(o, collector); end
  def visit_Arel_Nodes_SelectCore(o, collector); end
  def visit_Arel_Nodes_SelectStatement(o, collector); end
  def visit_Arel_Nodes_UnqualifiedColumn(o, collector); end
end
class Arel::Visitors::MSSQL < Arel::Visitors::ToSql
  def collect_optimizer_hints(o, collector); end
  def determine_order_by(orders, x); end
  def find_left_table_pk(o); end
  def find_primary_key(o); end
  def get_offset_limit_clause(o); end
  def initialize(*arg0); end
  def row_num_literal(order_by); end
  def select_count?(x); end
  def visit_Arel_Nodes_DeleteStatement(o, collector); end
  def visit_Arel_Nodes_IsDistinctFrom(o, collector); end
  def visit_Arel_Nodes_IsNotDistinctFrom(o, collector); end
  def visit_Arel_Nodes_OptimizerHints(o, collector); end
  def visit_Arel_Nodes_SelectCore(o, collector); end
  def visit_Arel_Nodes_SelectStatement(o, collector); end
  def visit_Arel_Visitors_MSSQL_RowNumber(o, collector); end
end
class Arel::Visitors::MSSQL::RowNumber < Struct
  def children; end
  def children=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Arel::Visitors::Oracle < Arel::Visitors::ToSql
  def is_distinct_from(o, collector); end
  def order_hacks(o); end
  def split_order_string(string); end
  def visit_Arel_Nodes_BindParam(o, collector); end
  def visit_Arel_Nodes_Except(o, collector); end
  def visit_Arel_Nodes_Limit(o, collector); end
  def visit_Arel_Nodes_Offset(o, collector); end
  def visit_Arel_Nodes_SelectStatement(o, collector); end
  def visit_Arel_Nodes_UpdateStatement(o, collector); end
end
class Arel::Visitors::Oracle12 < Arel::Visitors::ToSql
  def is_distinct_from(o, collector); end
  def visit_Arel_Nodes_BindParam(o, collector); end
  def visit_Arel_Nodes_Except(o, collector); end
  def visit_Arel_Nodes_Limit(o, collector); end
  def visit_Arel_Nodes_Offset(o, collector); end
  def visit_Arel_Nodes_SelectOptions(o, collector); end
  def visit_Arel_Nodes_SelectStatement(o, collector); end
  def visit_Arel_Nodes_UpdateStatement(o, collector); end
end
class Arel::Visitors::WhereSql < Arel::Visitors::ToSql
  def initialize(inner_visitor, *args, &block); end
  def visit_Arel_Nodes_SelectCore(o, collector); end
end
class Arel::Visitors::Dot < Arel::Visitors::Visitor
  def accept(object, collector); end
  def binary(o); end
  def edge(name); end
  def extract(o); end
  def function(o); end
  def initialize; end
  def named_window(o); end
  def nary(o); end
  def quote(string); end
  def to_dot; end
  def unary(o); end
  def visit(o); end
  def visit_Arel_Attribute(o); end
  def visit_Arel_Attributes_Attribute(o); end
  def visit_Arel_Attributes_Boolean(o); end
  def visit_Arel_Attributes_Float(o); end
  def visit_Arel_Attributes_Integer(o); end
  def visit_Arel_Attributes_String(o); end
  def visit_Arel_Attributes_Time(o); end
  def visit_Arel_Nodes_And(o); end
  def visit_Arel_Nodes_As(o); end
  def visit_Arel_Nodes_Assignment(o); end
  def visit_Arel_Nodes_Avg(o); end
  def visit_Arel_Nodes_Between(o); end
  def visit_Arel_Nodes_BindParam(o); end
  def visit_Arel_Nodes_Casted(o); end
  def visit_Arel_Nodes_Comment(o); end
  def visit_Arel_Nodes_Concat(o); end
  def visit_Arel_Nodes_Count(o); end
  def visit_Arel_Nodes_Cube(o); end
  def visit_Arel_Nodes_DeleteStatement(o); end
  def visit_Arel_Nodes_DoesNotMatch(o); end
  def visit_Arel_Nodes_Equality(o); end
  def visit_Arel_Nodes_Exists(o); end
  def visit_Arel_Nodes_Extract(o); end
  def visit_Arel_Nodes_Following(o); end
  def visit_Arel_Nodes_FullOuterJoin(o); end
  def visit_Arel_Nodes_GreaterThan(o); end
  def visit_Arel_Nodes_GreaterThanOrEqual(o); end
  def visit_Arel_Nodes_Group(o); end
  def visit_Arel_Nodes_Grouping(o); end
  def visit_Arel_Nodes_GroupingElement(o); end
  def visit_Arel_Nodes_GroupingSet(o); end
  def visit_Arel_Nodes_Having(o); end
  def visit_Arel_Nodes_In(o); end
  def visit_Arel_Nodes_InnerJoin(o); end
  def visit_Arel_Nodes_InsertStatement(o); end
  def visit_Arel_Nodes_IsDistinctFrom(o); end
  def visit_Arel_Nodes_IsNotDistinctFrom(o); end
  def visit_Arel_Nodes_JoinSource(o); end
  def visit_Arel_Nodes_LessThan(o); end
  def visit_Arel_Nodes_LessThanOrEqual(o); end
  def visit_Arel_Nodes_Limit(o); end
  def visit_Arel_Nodes_Matches(o); end
  def visit_Arel_Nodes_Max(o); end
  def visit_Arel_Nodes_Min(o); end
  def visit_Arel_Nodes_NamedFunction(o); end
  def visit_Arel_Nodes_NamedWindow(o); end
  def visit_Arel_Nodes_Not(o); end
  def visit_Arel_Nodes_NotEqual(o); end
  def visit_Arel_Nodes_NotIn(o); end
  def visit_Arel_Nodes_Offset(o); end
  def visit_Arel_Nodes_On(o); end
  def visit_Arel_Nodes_OptimizerHints(o); end
  def visit_Arel_Nodes_Or(o); end
  def visit_Arel_Nodes_Ordering(o); end
  def visit_Arel_Nodes_OuterJoin(o); end
  def visit_Arel_Nodes_Over(o); end
  def visit_Arel_Nodes_Preceding(o); end
  def visit_Arel_Nodes_Range(o); end
  def visit_Arel_Nodes_RightOuterJoin(o); end
  def visit_Arel_Nodes_RollUp(o); end
  def visit_Arel_Nodes_Rows(o); end
  def visit_Arel_Nodes_SelectCore(o); end
  def visit_Arel_Nodes_SelectStatement(o); end
  def visit_Arel_Nodes_SqlLiteral(o); end
  def visit_Arel_Nodes_StringJoin(o); end
  def visit_Arel_Nodes_Sum(o); end
  def visit_Arel_Nodes_TableAlias(o); end
  def visit_Arel_Nodes_UnqualifiedColumn(o); end
  def visit_Arel_Nodes_UpdateStatement(o); end
  def visit_Arel_Nodes_ValuesList(o); end
  def visit_Arel_Nodes_Window(o); end
  def visit_Arel_Table(o); end
  def visit_Array(o); end
  def visit_BigDecimal(o); end
  def visit_Date(o); end
  def visit_DateTime(o); end
  def visit_FalseClass(o); end
  def visit_Float(o); end
  def visit_Hash(o); end
  def visit_Integer(o); end
  def visit_NilClass(o); end
  def visit_Set(o); end
  def visit_String(o); end
  def visit_Symbol(o); end
  def visit_Time(o); end
  def visit_TrueClass(o); end
  def visit_edge(o, method); end
  def window(o); end
  def with_node(node); end
end
class Arel::Visitors::Dot::Node
  def fields; end
  def fields=(arg0); end
  def id; end
  def id=(arg0); end
  def initialize(name, id, fields = nil); end
  def name; end
  def name=(arg0); end
end
class Anonymous_Struct_2 < Struct
  def from; end
  def from=(_); end
  def name; end
  def name=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def to; end
  def to=(_); end
end
class Arel::Visitors::Dot::Edge < Anonymous_Struct_2
end
class Arel::Visitors::IBM_DB < Arel::Visitors::ToSql
  def collect_optimizer_hints(o, collector); end
  def is_distinct_from(o, collector); end
  def visit_Arel_Nodes_Limit(o, collector); end
  def visit_Arel_Nodes_OptimizerHints(o, collector); end
  def visit_Arel_Nodes_SelectCore(o, collector); end
end
class Arel::Visitors::Informix < Arel::Visitors::ToSql
  def visit_Arel_Nodes_Limit(o, collector); end
  def visit_Arel_Nodes_Offset(o, collector); end
  def visit_Arel_Nodes_OptimizerHints(o, collector); end
  def visit_Arel_Nodes_SelectCore(o, collector); end
  def visit_Arel_Nodes_SelectStatement(o, collector); end
end
module Arel::Collectors
end
class Arel::Collectors::PlainString
  def <<(str); end
  def initialize; end
  def value; end
end
class Arel::Collectors::SQLString < Arel::Collectors::PlainString
  def add_bind(bind); end
  def initialize(*arg0); end
end
class Arel::TreeManager
  def ast; end
  def initialize; end
  def initialize_copy(other); end
  def to_dot; end
  def to_sql(engine = nil); end
  def where(expr); end
  include Arel::FactoryMethods
end
module Arel::TreeManager::StatementMethods
  def key; end
  def key=(key); end
  def offset(offset); end
  def order(*expr); end
  def take(limit); end
  def where(expr); end
  def wheres=(exprs); end
end
class Arel::InsertManager < Arel::TreeManager
  def columns; end
  def create_values(values); end
  def create_values_list(rows); end
  def initialize; end
  def insert(fields); end
  def into(table); end
  def select(select); end
  def values=(val); end
end
class Arel::SelectManager < Arel::TreeManager
  def as(other); end
  def collapse(exprs); end
  def comment(*values); end
  def constraints; end
  def distinct(value = nil); end
  def distinct_on(value); end
  def except(other); end
  def exists; end
  def from(table); end
  def froms; end
  def group(*columns); end
  def having(expr); end
  def initialize(table = nil); end
  def initialize_copy(other); end
  def intersect(other); end
  def join(relation, klass = nil); end
  def join_sources; end
  def lateral(table_name = nil); end
  def limit; end
  def limit=(limit); end
  def lock(locking = nil); end
  def locked; end
  def minus(other); end
  def offset; end
  def offset=(amount); end
  def on(*exprs); end
  def optimizer_hints(*hints); end
  def order(*expr); end
  def orders; end
  def outer_join(relation); end
  def project(*projections); end
  def projections; end
  def projections=(projections); end
  def skip(amount); end
  def source; end
  def take(limit); end
  def taken; end
  def union(operation, other = nil); end
  def where_sql(engine = nil); end
  def window(name); end
  def with(*subqueries); end
  include Arel::Crud
end
class Arel::UpdateManager < Arel::TreeManager
  def initialize; end
  def set(values); end
  def table(table); end
  include Arel::TreeManager::StatementMethods
end
class Arel::DeleteManager < Arel::TreeManager
  def from(relation); end
  def initialize; end
  include Arel::TreeManager::StatementMethods
end
module Arel::Nodes
  def self.build_quoted(other, attribute = nil); end
end
class Arel::Nodes::Node
  def and(right); end
  def each(&block); end
  def not; end
  def or(right); end
  def to_sql(engine = nil); end
  include Arel::FactoryMethods
  include Enumerable
end
class Arel::Nodes::NodeExpression < Arel::Nodes::Node
  include Arel::AliasPredication
  include Arel::Expressions
  include Arel::Math
  include Arel::OrderPredications
  include Arel::Predications
end
class Arel::Nodes::SelectStatement < Arel::Nodes::NodeExpression
  def ==(other); end
  def cores; end
  def eql?(other); end
  def hash; end
  def initialize(cores = nil); end
  def initialize_copy(other); end
  def limit; end
  def limit=(arg0); end
  def lock; end
  def lock=(arg0); end
  def offset; end
  def offset=(arg0); end
  def orders; end
  def orders=(arg0); end
  def with; end
  def with=(arg0); end
end
class Arel::Nodes::SelectCore < Arel::Nodes::Node
  def ==(other); end
  def comment; end
  def comment=(arg0); end
  def eql?(other); end
  def from; end
  def from=(value); end
  def froms; end
  def froms=(value); end
  def groups; end
  def groups=(arg0); end
  def hash; end
  def havings; end
  def havings=(arg0); end
  def initialize; end
  def initialize_copy(other); end
  def optimizer_hints; end
  def optimizer_hints=(arg0); end
  def projections; end
  def projections=(arg0); end
  def set_quantifier; end
  def set_quantifier=(arg0); end
  def source; end
  def source=(arg0); end
  def wheres; end
  def wheres=(arg0); end
  def windows; end
  def windows=(arg0); end
end
class Arel::Nodes::InsertStatement < Arel::Nodes::Node
  def ==(other); end
  def columns; end
  def columns=(arg0); end
  def eql?(other); end
  def hash; end
  def initialize; end
  def initialize_copy(other); end
  def relation; end
  def relation=(arg0); end
  def select; end
  def select=(arg0); end
  def values; end
  def values=(arg0); end
end
class Arel::Nodes::UpdateStatement < Arel::Nodes::Node
  def ==(other); end
  def eql?(other); end
  def hash; end
  def initialize; end
  def initialize_copy(other); end
  def key; end
  def key=(arg0); end
  def limit; end
  def limit=(arg0); end
  def offset; end
  def offset=(arg0); end
  def orders; end
  def orders=(arg0); end
  def relation; end
  def relation=(arg0); end
  def values; end
  def values=(arg0); end
  def wheres; end
  def wheres=(arg0); end
end
class Arel::Nodes::BindParam < Arel::Nodes::Node
  def ==(other); end
  def eql?(other); end
  def hash; end
  def infinite?; end
  def initialize(value); end
  def nil?; end
  def unboundable?; end
  def value; end
end
class Arel::Nodes::Distinct < Arel::Nodes::NodeExpression
  def ==(other); end
  def eql?(other); end
  def hash; end
end
class Arel::Nodes::True < Arel::Nodes::NodeExpression
  def ==(other); end
  def eql?(other); end
  def hash; end
end
class Arel::Nodes::False < Arel::Nodes::NodeExpression
  def ==(other); end
  def eql?(other); end
  def hash; end
end
class Arel::Nodes::Unary < Arel::Nodes::NodeExpression
  def ==(other); end
  def eql?(other); end
  def expr; end
  def expr=(arg0); end
  def hash; end
  def initialize(expr); end
  def value; end
end
class Arel::Nodes::Bin < Arel::Nodes::Unary
end
class Arel::Nodes::Cube < Arel::Nodes::Unary
end
class Arel::Nodes::DistinctOn < Arel::Nodes::Unary
end
class Arel::Nodes::Group < Arel::Nodes::Unary
end
class Arel::Nodes::GroupingElement < Arel::Nodes::Unary
end
class Arel::Nodes::GroupingSet < Arel::Nodes::Unary
end
class Arel::Nodes::Lateral < Arel::Nodes::Unary
end
class Arel::Nodes::Limit < Arel::Nodes::Unary
end
class Arel::Nodes::Lock < Arel::Nodes::Unary
end
class Arel::Nodes::Not < Arel::Nodes::Unary
end
class Arel::Nodes::Offset < Arel::Nodes::Unary
end
class Arel::Nodes::On < Arel::Nodes::Unary
end
class Arel::Nodes::OptimizerHints < Arel::Nodes::Unary
end
class Arel::Nodes::Ordering < Arel::Nodes::Unary
end
class Arel::Nodes::RollUp < Arel::Nodes::Unary
end
class Arel::Nodes::Grouping < Arel::Nodes::Unary
end
class Arel::Nodes::Ascending < Arel::Nodes::Ordering
  def ascending?; end
  def descending?; end
  def direction; end
  def reverse; end
end
class Arel::Nodes::Descending < Arel::Nodes::Ordering
  def ascending?; end
  def descending?; end
  def direction; end
  def reverse; end
end
class Arel::Nodes::UnqualifiedColumn < Arel::Nodes::Unary
  def attribute; end
  def attribute=(arg0); end
  def column; end
  def name; end
  def relation; end
end
class Arel::Nodes::With < Arel::Nodes::Unary
  def children; end
end
class Arel::Nodes::WithRecursive < Arel::Nodes::With
end
class Arel::Nodes::Binary < Arel::Nodes::NodeExpression
  def ==(other); end
  def eql?(other); end
  def hash; end
  def initialize(left, right); end
  def initialize_copy(other); end
  def left; end
  def left=(arg0); end
  def right; end
  def right=(arg0); end
end
class Arel::Nodes::As < Arel::Nodes::Binary
end
class Arel::Nodes::Assignment < Arel::Nodes::Binary
end
class Arel::Nodes::Between < Arel::Nodes::Binary
end
class Arel::Nodes::GreaterThan < Arel::Nodes::Binary
end
class Arel::Nodes::GreaterThanOrEqual < Arel::Nodes::Binary
end
class Arel::Nodes::Join < Arel::Nodes::Binary
end
class Arel::Nodes::LessThan < Arel::Nodes::Binary
end
class Arel::Nodes::LessThanOrEqual < Arel::Nodes::Binary
end
class Arel::Nodes::NotEqual < Arel::Nodes::Binary
end
class Arel::Nodes::NotIn < Arel::Nodes::Binary
end
class Arel::Nodes::Or < Arel::Nodes::Binary
end
class Arel::Nodes::Union < Arel::Nodes::Binary
end
class Arel::Nodes::UnionAll < Arel::Nodes::Binary
end
class Arel::Nodes::Intersect < Arel::Nodes::Binary
end
class Arel::Nodes::Except < Arel::Nodes::Binary
end
class Arel::Nodes::Equality < Arel::Nodes::Binary
  def operand1; end
  def operand2; end
  def operator; end
end
class Arel::Nodes::IsDistinctFrom < Arel::Nodes::Equality
end
class Arel::Nodes::IsNotDistinctFrom < Arel::Nodes::Equality
end
class Arel::Nodes::In < Arel::Nodes::Equality
end
class Arel::Nodes::JoinSource < Arel::Nodes::Binary
  def empty?; end
  def initialize(single_source, joinop = nil); end
end
class Arel::Nodes::DeleteStatement < Arel::Nodes::Node
  def ==(other); end
  def eql?(other); end
  def hash; end
  def initialize(relation = nil, wheres = nil); end
  def initialize_copy(other); end
  def key; end
  def key=(arg0); end
  def left; end
  def left=(arg0); end
  def limit; end
  def limit=(arg0); end
  def offset; end
  def offset=(arg0); end
  def orders; end
  def orders=(arg0); end
  def relation; end
  def relation=(arg0); end
  def right; end
  def right=(arg0); end
  def wheres; end
  def wheres=(arg0); end
end
class Arel::Nodes::TableAlias < Arel::Nodes::Binary
  def [](name); end
  def able_to_type_cast?; end
  def name; end
  def relation; end
  def table_alias; end
  def table_name; end
  def type_cast_for_database(*args); end
end
class Arel::Nodes::InfixOperation < Arel::Nodes::Binary
  def initialize(operator, left, right); end
  def operator; end
  include Arel::AliasPredication
  include Arel::Expressions
  include Arel::Math
  include Arel::OrderPredications
  include Arel::Predications
end
class Arel::Nodes::Multiplication < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::Division < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::Addition < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::Subtraction < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::Concat < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::BitwiseAnd < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::BitwiseOr < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::BitwiseXor < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::BitwiseShiftLeft < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::BitwiseShiftRight < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::UnaryOperation < Arel::Nodes::Unary
  def initialize(operator, operand); end
  def operator; end
end
class Arel::Nodes::BitwiseNot < Arel::Nodes::UnaryOperation
  def initialize(operand); end
end
class Arel::Nodes::Over < Arel::Nodes::Binary
  def initialize(left, right = nil); end
  def operator; end
  include Arel::AliasPredication
end
class Arel::Nodes::Matches < Arel::Nodes::Binary
  def case_sensitive; end
  def case_sensitive=(arg0); end
  def escape; end
  def initialize(left, right, escape = nil, case_sensitive = nil); end
end
class Arel::Nodes::DoesNotMatch < Arel::Nodes::Matches
end
class Arel::Nodes::Regexp < Arel::Nodes::Binary
  def case_sensitive; end
  def case_sensitive=(arg0); end
  def initialize(left, right, case_sensitive = nil); end
end
class Arel::Nodes::NotRegexp < Arel::Nodes::Regexp
end
class Arel::Nodes::And < Arel::Nodes::NodeExpression
  def ==(other); end
  def children; end
  def eql?(other); end
  def hash; end
  def initialize(children); end
  def left; end
  def right; end
end
class Arel::Nodes::Function < Arel::Nodes::NodeExpression
  def ==(other); end
  def alias; end
  def alias=(arg0); end
  def as(aliaz); end
  def distinct; end
  def distinct=(arg0); end
  def eql?(other); end
  def expressions; end
  def expressions=(arg0); end
  def hash; end
  def initialize(expr, aliaz = nil); end
  include Arel::WindowPredications
end
class Arel::Nodes::Sum < Arel::Nodes::Function
end
class Arel::Nodes::Exists < Arel::Nodes::Function
end
class Arel::Nodes::Max < Arel::Nodes::Function
end
class Arel::Nodes::Min < Arel::Nodes::Function
end
class Arel::Nodes::Avg < Arel::Nodes::Function
end
class Arel::Nodes::Count < Arel::Nodes::Function
  def initialize(expr, distinct = nil, aliaz = nil); end
end
class Arel::Nodes::Extract < Arel::Nodes::Unary
  def ==(other); end
  def eql?(other); end
  def field; end
  def field=(arg0); end
  def hash; end
  def initialize(expr, field); end
end
class Arel::Nodes::ValuesList < Arel::Nodes::Unary
  def rows; end
end
class Arel::Nodes::NamedFunction < Arel::Nodes::Function
  def ==(other); end
  def eql?(other); end
  def hash; end
  def initialize(name, expr, aliaz = nil); end
  def name; end
  def name=(arg0); end
end
class Arel::Nodes::Window < Arel::Nodes::Node
  def ==(other); end
  def eql?(other); end
  def frame(expr); end
  def framing; end
  def framing=(arg0); end
  def hash; end
  def initialize; end
  def initialize_copy(other); end
  def order(*expr); end
  def orders; end
  def orders=(arg0); end
  def partition(*expr); end
  def partitions; end
  def partitions=(arg0); end
  def range(expr = nil); end
  def rows(expr = nil); end
end
class Arel::Nodes::NamedWindow < Arel::Nodes::Window
  def ==(other); end
  def eql?(other); end
  def hash; end
  def initialize(name); end
  def initialize_copy(other); end
  def name; end
  def name=(arg0); end
end
class Arel::Nodes::Rows < Arel::Nodes::Unary
  def initialize(expr = nil); end
end
class Arel::Nodes::Range < Arel::Nodes::Unary
  def initialize(expr = nil); end
end
class Arel::Nodes::CurrentRow < Arel::Nodes::Node
  def ==(other); end
  def eql?(other); end
  def hash; end
end
class Arel::Nodes::Preceding < Arel::Nodes::Unary
  def initialize(expr = nil); end
end
class Arel::Nodes::Following < Arel::Nodes::Unary
  def initialize(expr = nil); end
end
class Arel::Nodes::Case < Arel::Nodes::NodeExpression
  def ==(other); end
  def case; end
  def case=(arg0); end
  def conditions; end
  def conditions=(arg0); end
  def default; end
  def default=(arg0); end
  def else(expression); end
  def eql?(other); end
  def hash; end
  def initialize(expression = nil, default = nil); end
  def initialize_copy(other); end
  def then(expression); end
  def when(condition, expression = nil); end
end
class Arel::Nodes::When < Arel::Nodes::Binary
end
class Arel::Nodes::Else < Arel::Nodes::Unary
end
class Arel::Nodes::FullOuterJoin < Arel::Nodes::Join
end
class Arel::Nodes::InnerJoin < Arel::Nodes::Join
end
class Arel::Nodes::OuterJoin < Arel::Nodes::Join
end
class Arel::Nodes::RightOuterJoin < Arel::Nodes::Join
end
class Arel::Nodes::StringJoin < Arel::Nodes::Join
  def initialize(left, right = nil); end
end
class Arel::Nodes::Comment < Arel::Nodes::Node
  def ==(other); end
  def eql?(other); end
  def hash; end
  def initialize(values); end
  def initialize_copy(other); end
  def values; end
end
class Arel::Nodes::SqlLiteral < String
  def encode_with(coder); end
  include Arel::AliasPredication
  include Arel::Expressions
  include Arel::OrderPredications
  include Arel::Predications
end
class Arel::Nodes::Casted < Arel::Nodes::NodeExpression
  def ==(other); end
  def attribute; end
  def eql?(other); end
  def hash; end
  def initialize(val, attribute); end
  def nil?; end
  def val; end
end
class Arel::Nodes::Quoted < Arel::Nodes::Unary
  def infinite?; end
  def nil?; end
  def val; end
end
module ActiveRecord
  def self.eager_load!; end
  def self.gem_version; end
  def self.version; end
  extend ActiveSupport::Autoload
end
module ActiveRecord::VERSION
end
class ActiveModel::Attribute
  def ==(other); end
  def _original_value_for_database; end
  def assigned?; end
  def came_from_user?; end
  def changed?; end
  def changed_from_assignment?; end
  def changed_in_place?; end
  def encode_with(coder); end
  def eql?(other); end
  def forgetting_assignment; end
  def has_been_read?; end
  def hash; end
  def init_with(coder); end
  def initialize(name, value_before_type_cast, type, original_attribute = nil); end
  def initialize_dup(other); end
  def initialized?; end
  def name; end
  def original_attribute; end
  def original_value; end
  def original_value_for_database; end
  def self.from_database(name, value, type); end
  def self.from_user(name, value, type, original_attribute = nil); end
  def self.null(name); end
  def self.uninitialized(name, type); end
  def self.with_cast_value(name, value, type); end
  def type; end
  def type_cast(*arg0); end
  def value; end
  def value_before_type_cast; end
  def value_for_database; end
  def with_cast_value(value); end
  def with_type(type); end
  def with_value_from_database(value); end
  def with_value_from_user(value); end
end
class ActiveModel::Attribute::FromDatabase < ActiveModel::Attribute
  def _original_value_for_database; end
  def type_cast(value); end
end
class ActiveModel::Attribute::FromUser < ActiveModel::Attribute
  def came_from_user?; end
  def type_cast(value); end
end
class ActiveModel::Attribute::WithCastValue < ActiveModel::Attribute
  def changed_in_place?; end
  def type_cast(value); end
end
class ActiveModel::Attribute::Null < ActiveModel::Attribute
  def initialize(name); end
  def type_cast(*arg0); end
  def with_cast_value(value); end
  def with_type(type); end
  def with_value_from_database(value); end
  def with_value_from_user(value); end
end
class ActiveModel::Attribute::Uninitialized < ActiveModel::Attribute
  def forgetting_assignment; end
  def initialize(name, type); end
  def initialized?; end
  def original_value; end
  def value; end
  def value_for_database; end
  def with_type(type); end
end
class ActiveModel::AttributeSet
  def ==(other); end
  def [](name); end
  def []=(name, value); end
  def accessed; end
  def attributes; end
  def deep_dup; end
  def each_value(*args, &block); end
  def except(*args, &block); end
  def fetch(*args, &block); end
  def fetch_value(name, &block); end
  def freeze; end
  def initialize(attributes); end
  def initialize_clone(_); end
  def initialize_dup(_); end
  def initialized_attributes; end
  def key?(name); end
  def keys; end
  def map(&block); end
  def reset(key); end
  def to_h; end
  def to_hash; end
  def values_before_type_cast; end
  def write_cast_value(name, value); end
  def write_from_database(name, value); end
  def write_from_user(name, value); end
end
class ActiveModel::AttributeSet::Builder
  def build_from_database(values = nil, additional_types = nil); end
  def default_attributes; end
  def initialize(types, default_attributes = nil); end
  def types; end
end
class ActiveModel::LazyAttributeHash
  def ==(other); end
  def [](key); end
  def []=(key, value); end
  def additional_types; end
  def assign_default_value(name); end
  def deep_dup; end
  def default_attributes; end
  def delegate_hash; end
  def each_key(*args, &block); end
  def each_value(*args, &block); end
  def except(*args, &block); end
  def fetch(*args, &block); end
  def initialize(types, values, additional_types, default_attributes, delegate_hash = nil); end
  def initialize_dup(_); end
  def key?(key); end
  def marshal_dump; end
  def marshal_load(values); end
  def materialize; end
  def select; end
  def transform_values(*args, &block); end
  def types; end
  def values; end
end
class ActiveModel::AttributeSet::YAMLEncoder
  def decode(coder); end
  def default_types; end
  def encode(attribute_set, coder); end
  def initialize(default_types); end
end
class ActiveModel::MissingAttributeError < NoMethodError
end
module ActiveModel::AttributeMethods
  def _read_attribute(attr); end
  def attribute_method?(attr_name); end
  def attribute_missing(match, *args, &block); end
  def matched_attribute_method(method_name); end
  def method_missing(method, *args, &block); end
  def missing_attribute(attr_name, stack); end
  def respond_to?(method, include_private_methods = nil); end
  def respond_to_without_attributes?(*arg0); end
  extend ActiveSupport::Concern
end
module ActiveModel::AttributeMethods::ClassMethods
  def alias_attribute(new_name, old_name); end
  def attribute_alias(name); end
  def attribute_alias?(new_name); end
  def attribute_method_affix(*affixes); end
  def attribute_method_matchers_cache; end
  def attribute_method_matchers_matching(method_name); end
  def attribute_method_prefix(*prefixes); end
  def attribute_method_suffix(*suffixes); end
  def define_attribute_method(attr_name); end
  def define_attribute_methods(*attr_names); end
  def define_proxy_call(include_private, mod, name, target, *extra); end
  def generated_attribute_methods; end
  def instance_method_already_implemented?(method_name); end
  def undefine_attribute_methods; end
end
class ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher
  def initialize(options = nil); end
  def match(method_name); end
  def method_name(attr_name); end
  def plain?; end
  def prefix; end
  def suffix; end
  def target; end
end
class ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher::AttributeMethodMatch < Struct
  def attr_name; end
  def attr_name=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def target; end
  def target=(_); end
end
module ActiveModel::AttributeMethods::AttrNames
  def self.define_attribute_accessor_method(mod, attr_name, writer: nil); end
end
module ActiveRecord::AttributeMethods
  def [](attr_name); end
  def []=(attr_name, value); end
  def accessed_fields; end
  def attribute_for_inspect(attr_name); end
  def attribute_method?(attr_name); end
  def attribute_names; end
  def attribute_present?(attribute); end
  def attributes; end
  def attributes_for_create(attribute_names); end
  def attributes_for_update(attribute_names); end
  def attributes_with_values(attribute_names); end
  def format_for_inspect(value); end
  def has_attribute?(attr_name); end
  def pk_attribute?(name); end
  def respond_to?(name, include_private = nil); end
  extend ActiveSupport::Autoload
  extend ActiveSupport::Concern
  include ActiveModel::AttributeMethods
end
class ActiveRecord::AttributeMethods::GeneratedAttributeMethods < Module
  def lock; end
  def locked?; end
  def synchronize(&block); end
  def try_lock; end
  def unlock; end
  include Mutex_m
end
module ActiveRecord::AttributeMethods::ClassMethods
  def attribute_method?(attribute); end
  def attribute_names; end
  def class_method_defined_within?(name, klass, superklass = nil); end
  def column_for_attribute(name); end
  def dangerous_attribute_method?(name); end
  def dangerous_class_method?(method_name); end
  def define_attribute_methods; end
  def has_attribute?(attr_name); end
  def inherited(child_class); end
  def initialize_generated_modules; end
  def instance_method_already_implemented?(method_name); end
  def method_defined_within?(name, klass, superklass = nil); end
  def undefine_attribute_methods; end
end
module ActiveRecord::ConnectionAdapters
  extend ActiveSupport::Autoload
  extend ActiveSupport::Autoload
end
module ActiveRecord::ConnectionAdapters::DetermineIfPreparableVisitor
  def accept(object, collector); end
  def preparable; end
  def preparable=(arg0); end
  def visit_Arel_Nodes_In(o, collector); end
  def visit_Arel_Nodes_NotIn(o, collector); end
  def visit_Arel_Nodes_SqlLiteral(o, collector); end
end
class ActiveRecord::ConnectionAdapters::SchemaCache
  def add(table_name); end
  def clear!; end
  def clear_data_source_cache!(name); end
  def columns(table_name); end
  def columns_hash(table_name); end
  def columns_hash?(table_name); end
  def connection; end
  def connection=(arg0); end
  def data_source_exists?(name); end
  def data_sources(name); end
  def database_version; end
  def deep_deduplicate(value); end
  def encode_with(coder); end
  def indexes(table_name); end
  def init_with(coder); end
  def initialize(conn); end
  def initialize_dup(other); end
  def marshal_dump; end
  def marshal_load(array); end
  def prepare_data_sources; end
  def primary_keys(table_name); end
  def size; end
  def version; end
end
module ActiveRecord::ConnectionAdapters::Deduplicable
  def -@; end
  def deduplicate; end
  def deduplicated; end
  extend ActiveSupport::Concern
end
module ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods
  def new(*arg0); end
  def registry; end
end
class ActiveRecord::ConnectionAdapters::SqlTypeMetadata
  def ==(other); end
  def deduplicated; end
  def eql?(other); end
  def hash; end
  def initialize(sql_type: nil, type: nil, limit: nil, precision: nil, scale: nil); end
  def limit; end
  def precision; end
  def scale; end
  def sql_type; end
  def type; end
  extend ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods
  include ActiveRecord::ConnectionAdapters::Deduplicable
end
class ActiveRecord::SchemaDumper
  def define_params; end
  def dump(stream); end
  def extensions(stream); end
  def fk_ignore_pattern; end
  def fk_ignore_pattern=(obj); end
  def foreign_keys(table, stream); end
  def format_colspec(colspec); end
  def format_index_parts(options); end
  def format_options(options); end
  def formatted_version; end
  def header(stream); end
  def ignore_tables; end
  def ignore_tables=(obj); end
  def ignored?(table_name); end
  def index_parts(index); end
  def indexes(table, stream); end
  def indexes_in_create(table, stream); end
  def initialize(connection, options = nil); end
  def remove_prefix_and_suffix(table); end
  def self.dump(connection = nil, stream = nil, config = nil); end
  def self.fk_ignore_pattern; end
  def self.fk_ignore_pattern=(obj); end
  def self.generate_options(config); end
  def self.ignore_tables; end
  def self.ignore_tables=(obj); end
  def self.new(*arg0); end
  def table(table, stream); end
  def table_name; end
  def table_name=(arg0); end
  def tables(stream); end
  def trailer(stream); end
end
class ActiveRecord::ConnectionAdapters::SchemaDumper < ActiveRecord::SchemaDumper
  def column_spec(column); end
  def column_spec_for_primary_key(column); end
  def default_primary_key?(column); end
  def explicit_primary_key_default?(column); end
  def prepare_column_options(column); end
  def schema_collation(column); end
  def schema_default(column); end
  def schema_expression(column); end
  def schema_limit(column); end
  def schema_precision(column); end
  def schema_scale(column); end
  def schema_type(column); end
  def schema_type_with_virtual(column); end
  def self.create(connection, options); end
end
class ActiveRecord::ConnectionAdapters::AbstractAdapter
  def __callbacks; end
  def __callbacks?; end
  def _checkin_callbacks; end
  def _checkout_callbacks; end
  def _run_checkin_callbacks(&block); end
  def _run_checkout_callbacks(&block); end
  def active?; end
  def adapter_name; end
  def advisory_locks_enabled?; end
  def arel_visitor; end
  def build_insert_sql(insert); end
  def build_statement_pool; end
  def can_perform_case_insensitive_comparison_for?(column); end
  def case_insensitive_comparison(attribute, value); end
  def case_sensitive_comparison(attribute, value); end
  def check_version; end
  def clear_cache!; end
  def close; end
  def collector; end
  def column_for(table_name, column_name); end
  def column_for_attribute(attribute); end
  def column_name_for_operation(operation, node); end
  def database_version; end
  def default_index_type?(index); end
  def default_uniqueness_comparison(attribute, value, klass); end
  def delete(*arg0); end
  def disable_extension(name); end
  def disable_referential_integrity; end
  def discard!; end
  def disconnect!; end
  def enable_extension(name); end
  def expire; end
  def extensions; end
  def extract_limit(sql_type); end
  def extract_precision(sql_type); end
  def extract_scale(sql_type); end
  def get_advisory_lock(lock_id); end
  def get_database_version; end
  def in_use?; end
  def index_algorithms; end
  def initialize(connection, logger = nil, config = nil); end
  def initialize_type_map(m = nil); end
  def insert(*arg0); end
  def lease; end
  def lock; end
  def log(sql, name = nil, binds = nil, type_casted_binds = nil, statement_name = nil); end
  def logger; end
  def migration_context; end
  def migrations_paths; end
  def owner; end
  def pool; end
  def pool=(arg0); end
  def prefetch_primary_key?(table_name = nil); end
  def prepared_statements; end
  def preventing_writes?; end
  def raw_connection; end
  def reconnect!; end
  def register_class_with_limit(mapping, key, klass); end
  def register_class_with_precision(mapping, key, klass); end
  def release_advisory_lock(lock_id); end
  def reload_type_map; end
  def replica?; end
  def requires_reloading?; end
  def reset!; end
  def rollback_db_transaction(*arg0); end
  def rollback_to_savepoint(*arg0); end
  def schema_cache; end
  def schema_cache=(cache); end
  def schema_migration; end
  def seconds_idle; end
  def self.__callbacks; end
  def self.__callbacks=(val); end
  def self.__callbacks?; end
  def self._checkin_callbacks; end
  def self._checkin_callbacks=(value); end
  def self._checkout_callbacks; end
  def self._checkout_callbacks=(value); end
  def self.build_read_query_regexp(*parts); end
  def self.type_cast_config_to_boolean(config); end
  def self.type_cast_config_to_integer(config); end
  def steal!; end
  def supports_advisory_locks?; end
  def supports_bulk_alter?; end
  def supports_comments?; end
  def supports_comments_in_create?; end
  def supports_datetime_with_precision?; end
  def supports_ddl_transactions?; end
  def supports_explain?; end
  def supports_expression_index?; end
  def supports_extensions?; end
  def supports_foreign_keys?; end
  def supports_foreign_keys_in_create?(*args, &block); end
  def supports_foreign_tables?; end
  def supports_index_sort_order?; end
  def supports_indexes_in_create?; end
  def supports_insert_conflict_target?; end
  def supports_insert_on_duplicate_skip?; end
  def supports_insert_on_duplicate_update?; end
  def supports_insert_returning?; end
  def supports_json?; end
  def supports_lazy_transactions?; end
  def supports_materialized_views?; end
  def supports_multi_insert?(*args, &block); end
  def supports_optimizer_hints?; end
  def supports_partial_index?; end
  def supports_savepoints?; end
  def supports_transaction_isolation?; end
  def supports_validate_constraints?; end
  def supports_views?; end
  def supports_virtual_columns?; end
  def translate_exception(exception, message:, sql:, binds:); end
  def translate_exception_class(e, sql, binds); end
  def truncate(*arg0); end
  def truncate_tables(*arg0); end
  def type_map; end
  def unprepared_statement; end
  def update(*arg0); end
  def valid_type?(type); end
  def verify!; end
  def visitor; end
  def without_prepared_statement?(binds); end
  extend ActiveSupport::Callbacks::ClassMethods
  extend ActiveSupport::DescendantsTracker
  include ActiveRecord::ConnectionAdapters::DatabaseLimits
  include ActiveRecord::ConnectionAdapters::QueryCache
  include ActiveRecord::ConnectionAdapters::Quoting
  include ActiveRecord::ConnectionAdapters::Savepoints
  include ActiveSupport::Callbacks
end
class ActiveRecord::ConnectionAdapters::AbstractAdapter::SchemaCreation
  def accept(o); end
  def action_sql(action, dependency); end
  def add_column_options!(sql, options); end
  def add_table_options!(create_sql, options); end
  def column_options(o); end
  def foreign_key_in_create(from_table, to_table, options); end
  def foreign_key_options(*args, &block); end
  def initialize(conn); end
  def options_include_default?(*args, &block); end
  def quote_column_name(*args, &block); end
  def quote_default_expression(*args, &block); end
  def quote_table_name(*args, &block); end
  def supports_foreign_keys?(*args, &block); end
  def supports_indexes_in_create?(*args, &block); end
  def table_modifier_in_create(o); end
  def table_options(o); end
  def to_sql(sql); end
  def type_to_sql(*args, &block); end
  def visit_AddColumnDefinition(o); end
  def visit_AddForeignKey(o); end
  def visit_AlterTable(o); end
  def visit_ColumnDefinition(o); end
  def visit_DropForeignKey(name); end
  def visit_ForeignKeyDefinition(o); end
  def visit_PrimaryKeyDefinition(o); end
  def visit_TableDefinition(o); end
end
class ActiveSupport::Concurrency::LoadInterlockAwareMonitor < Monitor
  def mon_enter; end
end
class Arel::Collectors::Bind
  def <<(str); end
  def add_bind(bind); end
  def initialize; end
  def value; end
end
class Arel::Collectors::Composite
  def <<(str); end
  def add_bind(bind, &block); end
  def initialize(left, right); end
  def left; end
  def right; end
  def value; end
end
class Arel::Collectors::SubstituteBinds
  def <<(str); end
  def add_bind(bind); end
  def delegate; end
  def initialize(quoter, delegate_collector); end
  def quoter; end
  def value; end
end
module ActiveSupport::DescendantsTracker
  def descendants; end
  def direct_descendants; end
  def inherited(base); end
  def self.accumulate_descendants(klass, acc); end
  def self.clear; end
  def self.descendants(klass); end
  def self.direct_descendants(klass); end
  def self.store_inherited(klass, descendant); end
end
class ActiveSupport::DescendantsTracker::DescendantsArray
  def <<(klass); end
  def cleanup!; end
  def each; end
  def initialize; end
  def initialize_copy(orig); end
  def refs_size; end
  def reject!; end
  include Enumerable
end
module ActiveSupport::Callbacks
  def halted_callback_hook(filter); end
  def run_callbacks(kind); end
  extend ActiveSupport::Concern
end
module ActiveSupport::Callbacks::Conditionals
end
class ActiveSupport::Callbacks::Conditionals::Value
  def call(target, value); end
  def initialize(&block); end
end
module ActiveSupport::Callbacks::Filters
end
class ActiveSupport::Callbacks::Filters::Environment < Struct
  def halted; end
  def halted=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def target; end
  def target=(_); end
  def value; end
  def value=(_); end
end
class ActiveSupport::Callbacks::Filters::Before
  def self.build(callback_sequence, user_callback, user_conditions, chain_config, filter); end
  def self.halting(callback_sequence, user_callback, halted_lambda, filter); end
  def self.halting_and_conditional(callback_sequence, user_callback, user_conditions, halted_lambda, filter); end
end
class ActiveSupport::Callbacks::Filters::After
  def self.build(callback_sequence, user_callback, user_conditions, chain_config); end
  def self.conditional(callback_sequence, user_callback, user_conditions); end
  def self.halting(callback_sequence, user_callback); end
  def self.halting_and_conditional(callback_sequence, user_callback, user_conditions); end
  def self.simple(callback_sequence, user_callback); end
end
class ActiveSupport::Callbacks::Callback
  def apply(callback_sequence); end
  def chain_config; end
  def check_conditionals(conditionals); end
  def compute_identifier(filter); end
  def conditions_lambdas; end
  def current_scopes; end
  def duplicates?(other); end
  def filter; end
  def initialize(name, filter, kind, options, chain_config); end
  def kind; end
  def kind=(arg0); end
  def matches?(_kind, _filter); end
  def merge_conditional_options(chain, if_option:, unless_option:); end
  def name; end
  def name=(arg0); end
  def raw_filter; end
  def self.build(chain, filter, kind, options); end
end
class ActiveSupport::Callbacks::CallTemplate
  def expand(target, value, block); end
  def initialize(target, method, arguments, block); end
  def inverted_lambda; end
  def make_lambda; end
  def self.build(filter, callback); end
end
class ActiveSupport::Callbacks::CallbackSequence
  def after(&after); end
  def around(call_template, user_conditions); end
  def before(&before); end
  def expand_call_template(arg, block); end
  def final?; end
  def initialize(nested = nil, call_template = nil, user_conditions = nil); end
  def invoke_after(arg); end
  def invoke_before(arg); end
  def nested; end
  def skip?(arg); end
end
class ActiveSupport::Callbacks::CallbackChain
  def append(*callbacks); end
  def append_one(callback); end
  def chain; end
  def clear; end
  def compile; end
  def config; end
  def default_terminator; end
  def delete(o); end
  def each(&block); end
  def empty?; end
  def index(o); end
  def initialize(name, config); end
  def initialize_copy(other); end
  def insert(index, o); end
  def name; end
  def prepend(*callbacks); end
  def prepend_one(callback); end
  def remove_duplicates(callback); end
  include Enumerable
end
module ActiveSupport::Callbacks::ClassMethods
  def __update_callbacks(name); end
  def define_callbacks(*names); end
  def get_callbacks(name); end
  def normalize_callback_params(filters, block); end
  def reset_callbacks(name); end
  def set_callback(name, *filter_list, &block); end
  def set_callbacks(name, callbacks); end
  def skip_callback(name, *filter_list, &block); end
end
module ActiveSupport::JSON
  def self.convert_dates_from(data); end
  def self.decode(json); end
  def self.encode(value, options = nil); end
  def self.parse_error; end
end
module ActiveSupport::JSON::Encoding
  def self.escape_html_entities_in_json; end
  def self.escape_html_entities_in_json=(arg0); end
  def self.json_encoder; end
  def self.json_encoder=(arg0); end
  def self.time_precision; end
  def self.time_precision=(arg0); end
  def self.use_standard_json_time_format; end
  def self.use_standard_json_time_format=(arg0); end
end
class ActiveSupport::JSON::Encoding::JSONGemEncoder
  def encode(value); end
  def initialize(options = nil); end
  def jsonify(value); end
  def options; end
  def stringify(jsonified); end
end
class ActiveSupport::JSON::Encoding::JSONGemEncoder::EscapedString < String
  def to_json(*arg0); end
  def to_s; end
end
class ActiveSupport::Multibyte::Chars
  def <=>(*args, &block); end
  def =~(*args, &block); end
  def acts_like_string?(*args, &block); end
  def as_json(options = nil); end
  def chars(string); end
  def compose; end
  def decompose; end
  def grapheme_length; end
  def initialize(string); end
  def limit(limit); end
  def method_missing(method, *args, &block); end
  def normalize(form = nil); end
  def respond_to_missing?(method, include_private); end
  def reverse!(*args); end
  def reverse; end
  def self.consumes?(string); end
  def slice!(*args); end
  def split(*args); end
  def tidy_bytes!(*args); end
  def tidy_bytes(force = nil); end
  def titlecase; end
  def titleize; end
  def to_s; end
  def to_str; end
  def wrapped_string; end
  include Comparable
end
module ActiveRecord::ConnectionAdapters::Quoting
  def _quote(value); end
  def _type_cast(value); end
  def column_name_matcher; end
  def column_name_with_order_matcher; end
  def id_value_for_database(value); end
  def lookup_cast_type(sql_type); end
  def lookup_cast_type_from_column(column); end
  def quote(value); end
  def quote_column_name(column_name); end
  def quote_default_expression(value, column); end
  def quote_string(s); end
  def quote_table_name(table_name); end
  def quote_table_name_for_assignment(table, attr); end
  def quoted_binary(value); end
  def quoted_date(value); end
  def quoted_false; end
  def quoted_time(value); end
  def quoted_true; end
  def sanitize_as_sql_comment(value); end
  def type_cast(value, column = nil); end
  def type_cast_from_column(column, value); end
  def type_casted_binds(binds); end
  def unquoted_false; end
  def unquoted_true; end
end
module ActiveRecord::ConnectionAdapters::DatabaseStatements
  def add_transaction_record(record); end
  def arel_from_relation(relation); end
  def begin_db_transaction; end
  def begin_isolated_db_transaction(isolation); end
  def begin_transaction(*args, &block); end
  def build_fixture_sql(fixtures, table_name); end
  def build_fixture_statements(fixture_set); end
  def build_truncate_statements(*table_names); end
  def cacheable_query(klass, arel); end
  def combine_multi_statements(total_sql); end
  def commit_db_transaction; end
  def commit_transaction(*args, &block); end
  def create(arel, name = nil, pk = nil, id_value = nil, sequence_name = nil, binds = nil); end
  def current_transaction(*args, &block); end
  def default_insert_value(column); end
  def default_sequence_name(table, column); end
  def delete(arel, name = nil, binds = nil); end
  def disable_lazy_transactions!(*args, &block); end
  def empty_insert_statement_value(primary_key = nil); end
  def enable_lazy_transactions!(*args, &block); end
  def exec_delete(sql, name = nil, binds = nil); end
  def exec_insert(sql, name = nil, binds = nil, pk = nil, sequence_name = nil); end
  def exec_query(sql, name = nil, binds = nil, prepare: nil); end
  def exec_rollback_db_transaction; end
  def exec_update(sql, name = nil, binds = nil); end
  def execute(sql, name = nil); end
  def execute_batch(sql, name = nil); end
  def initialize; end
  def insert(arel, name = nil, pk = nil, id_value = nil, sequence_name = nil, binds = nil); end
  def insert_fixture(fixture, table_name); end
  def insert_fixtures_set(fixture_set, tables_to_delete = nil); end
  def last_inserted_id(result); end
  def materialize_transactions(*args, &block); end
  def open_transactions(*args, &block); end
  def query(sql, name = nil); end
  def query_value(sql, name = nil); end
  def query_values(sql, name = nil); end
  def reset_sequence!(table, column, sequence = nil); end
  def reset_transaction; end
  def rollback_db_transaction; end
  def rollback_to_savepoint(name = nil); end
  def rollback_transaction(*args, &block); end
  def sanitize_limit(limit); end
  def select(sql, name = nil, binds = nil); end
  def select_all(arel, name = nil, binds = nil, preparable: nil); end
  def select_one(arel, name = nil, binds = nil); end
  def select_prepared(sql, name = nil, binds = nil); end
  def select_rows(arel, name = nil, binds = nil); end
  def select_value(arel, name = nil, binds = nil); end
  def select_values(arel, name = nil, binds = nil); end
  def single_value_from_rows(rows); end
  def sql_for_insert(sql, pk, binds); end
  def to_sql(arel_or_sql_string, binds = nil); end
  def to_sql_and_binds(arel_or_sql_string, binds = nil); end
  def transaction(requires_new: nil, isolation: nil, joinable: nil); end
  def transaction_isolation_levels; end
  def transaction_manager; end
  def transaction_open?; end
  def transaction_state; end
  def truncate(table_name, name = nil); end
  def truncate_tables(*table_names); end
  def update(arel, name = nil, binds = nil); end
  def with_multi_statements; end
  def with_yaml_fallback(value); end
  def within_new_transaction(*args, &block); end
  def write_query?(sql); end
end
module ActiveSupport::ActionableError
  def self.actions(error); end
  def self.dispatch(error, name); end
  extend ActiveSupport::Concern
end
class ActiveSupport::ActionableError::NonActionable < StandardError
end
module ActiveSupport::ActionableError::ClassMethods
  def action(name, &block); end
end
class ActiveModel::Error
  def ==(other); end
  def attribute; end
  def attributes_for_hash; end
  def base; end
  def detail; end
  def eql?(other); end
  def full_message; end
  def hash; end
  def initialize(base, attribute, type = nil, **options); end
  def initialize_dup(other); end
  def match?(attribute, type = nil, **options); end
  def message; end
  def options; end
  def raw_type; end
  def strict_match?(attribute, type, **options); end
  def type; end
end
class ActiveModel::NestedError < ActiveModel::Error
  def initialize(base, inner_error, override_options = nil); end
  def inner_error; end
  def message(*args, &block); end
  extend Forwardable
end
class ActiveModel::Errors
  def [](attribute); end
  def add(attribute, type = nil, **options); end
  def add_from_legacy_details_hash(details); end
  def added?(attribute, type = nil, options = nil); end
  def any?(*args, &block); end
  def as_json(options = nil); end
  def blank?(*args, &block); end
  def clear(*args, &block); end
  def copy!(other); end
  def count(*args, &block); end
  def delete(attribute, type = nil, **options); end
  def deprecation_removal_warning(method_name); end
  def deprecation_rename_warning(old_method_name, new_method_name); end
  def details; end
  def each(&block); end
  def empty?(*args, &block); end
  def errors; end
  def full_message(attribute, message); end
  def full_messages; end
  def full_messages_for(attribute); end
  def generate_message(attribute, type = nil, options = nil); end
  def group_by_attribute; end
  def has_key?(attribute); end
  def import(error, override_options = nil); end
  def include?(attribute); end
  def init_with(coder); end
  def initialize(base); end
  def initialize_dup(other); end
  def key?(attribute); end
  def keys; end
  def marshal_load(array); end
  def merge!(other); end
  def messages; end
  def messages_for(attribute); end
  def normalize_arguments(attribute, type, **options); end
  def objects; end
  def of_kind?(attribute, message = nil); end
  def self.i18n_customize_full_message; end
  def self.i18n_customize_full_message=(arg0); end
  def size(*args, &block); end
  def slice!(*keys); end
  def to_a; end
  def to_hash(full_messages = nil); end
  def to_xml(options = nil); end
  def uniq!(*args, &block); end
  def values; end
  def where(attribute, type = nil, **options); end
  extend Forwardable
  include Enumerable
end
class ActiveModel::DeprecationHandlingMessageHash < SimpleDelegator
  def []=(attribute, value); end
  def initialize(errors); end
  def prepare_content; end
end
class ActiveModel::DeprecationHandlingMessageArray < SimpleDelegator
  def <<(message); end
  def initialize(content, errors, attribute); end
end
class ActiveModel::DeprecationHandlingDetailsHash < SimpleDelegator
  def initialize(details); end
end
class ActiveModel::StrictValidationFailed < StandardError
end
class ActiveModel::RangeError < RangeError
end
class ActiveModel::UnknownAttributeError < NoMethodError
  def attribute; end
  def initialize(record, attribute); end
  def record; end
end
class ActiveRecord::ActiveRecordError < StandardError
end
class ActiveRecord::SubclassNotFound < ActiveRecord::ActiveRecordError
end
class ActiveRecord::AssociationTypeMismatch < ActiveRecord::ActiveRecordError
end
class ActiveRecord::SerializationTypeMismatch < ActiveRecord::ActiveRecordError
end
class ActiveRecord::AdapterNotSpecified < ActiveRecord::ActiveRecordError
end
class ActiveRecord::TableNotSpecified < ActiveRecord::ActiveRecordError
end
class ActiveRecord::AdapterNotFound < ActiveRecord::ActiveRecordError
end
class ActiveRecord::ConnectionNotEstablished < ActiveRecord::ActiveRecordError
end
class ActiveRecord::ReadOnlyError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::RecordNotFound < ActiveRecord::ActiveRecordError
  def id; end
  def initialize(message = nil, model = nil, primary_key = nil, id = nil); end
  def model; end
  def primary_key; end
end
class ActiveRecord::RecordNotSaved < ActiveRecord::ActiveRecordError
  def initialize(message = nil, record = nil); end
  def record; end
end
class ActiveRecord::RecordNotDestroyed < ActiveRecord::ActiveRecordError
  def initialize(message = nil, record = nil); end
  def record; end
end
class ActiveRecord::StatementInvalid < ActiveRecord::ActiveRecordError
  def binds; end
  def initialize(message = nil, sql: nil, binds: nil); end
  def sql; end
end
class ActiveRecord::WrappedDatabaseException < ActiveRecord::StatementInvalid
end
class ActiveRecord::RecordNotUnique < ActiveRecord::WrappedDatabaseException
end
class ActiveRecord::InvalidForeignKey < ActiveRecord::WrappedDatabaseException
end
class ActiveRecord::MismatchedForeignKey < ActiveRecord::StatementInvalid
  def initialize(message: nil, sql: nil, binds: nil, table: nil, foreign_key: nil, target_table: nil, primary_key: nil, primary_key_column: nil); end
end
class ActiveRecord::NotNullViolation < ActiveRecord::StatementInvalid
end
class ActiveRecord::ValueTooLong < ActiveRecord::StatementInvalid
end
class ActiveRecord::RangeError < ActiveRecord::StatementInvalid
end
class ActiveRecord::PreparedStatementInvalid < ActiveRecord::ActiveRecordError
end
class ActiveRecord::NoDatabaseError < ActiveRecord::StatementInvalid
end
class ActiveRecord::PreparedStatementCacheExpired < ActiveRecord::StatementInvalid
end
class ActiveRecord::StaleObjectError < ActiveRecord::ActiveRecordError
  def attempted_action; end
  def initialize(record = nil, attempted_action = nil); end
  def record; end
end
class ActiveRecord::ConfigurationError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::ReadOnlyRecord < ActiveRecord::ActiveRecordError
end
class ActiveRecord::Rollback < ActiveRecord::ActiveRecordError
end
class ActiveRecord::DangerousAttributeError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::AttributeAssignmentError < ActiveRecord::ActiveRecordError
  def attribute; end
  def exception; end
  def initialize(message = nil, exception = nil, attribute = nil); end
end
class ActiveRecord::MultiparameterAssignmentErrors < ActiveRecord::ActiveRecordError
  def errors; end
  def initialize(errors = nil); end
end
class ActiveRecord::UnknownPrimaryKey < ActiveRecord::ActiveRecordError
  def initialize(model = nil, description = nil); end
  def model; end
end
class ActiveRecord::ImmutableRelation < ActiveRecord::ActiveRecordError
end
class ActiveRecord::TransactionIsolationError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::TransactionRollbackError < ActiveRecord::StatementInvalid
end
class ActiveRecord::SerializationFailure < ActiveRecord::TransactionRollbackError
end
class ActiveRecord::Deadlocked < ActiveRecord::TransactionRollbackError
end
class ActiveRecord::IrreversibleOrderError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::LockWaitTimeout < ActiveRecord::StatementInvalid
end
class ActiveRecord::StatementTimeout < ActiveRecord::StatementInvalid
end
class ActiveRecord::QueryCanceled < ActiveRecord::StatementInvalid
end
class ActiveRecord::UnknownAttributeReference < ActiveRecord::ActiveRecordError
end
class ActiveRecord::MigrationError < ActiveRecord::ActiveRecordError
  def initialize(message = nil); end
end
class ActiveRecord::IrreversibleMigration < ActiveRecord::MigrationError
end
class ActiveRecord::DuplicateMigrationVersionError < ActiveRecord::MigrationError
  def initialize(version = nil); end
end
class ActiveRecord::DuplicateMigrationNameError < ActiveRecord::MigrationError
  def initialize(name = nil); end
end
class ActiveRecord::UnknownMigrationVersionError < ActiveRecord::MigrationError
  def initialize(version = nil); end
end
class ActiveRecord::IllegalMigrationNameError < ActiveRecord::MigrationError
  def initialize(name = nil); end
end
class ActiveRecord::PendingMigrationError < ActiveRecord::MigrationError
  def _actions; end
  def _actions=(val); end
  def _actions?; end
  def initialize(message = nil); end
  def self._actions; end
  def self._actions=(val); end
  def self._actions?; end
  extend ActiveSupport::ActionableError::ClassMethods
  include ActiveSupport::ActionableError
end
class ActiveRecord::ConcurrentMigrationError < ActiveRecord::MigrationError
  def initialize(message = nil); end
end
class ActiveRecord::NoEnvironmentInSchemaError < ActiveRecord::MigrationError
  def initialize; end
end
class ActiveRecord::ProtectedEnvironmentError < ActiveRecord::ActiveRecordError
  def initialize(env = nil); end
end
class ActiveRecord::EnvironmentMismatchError < ActiveRecord::ActiveRecordError
  def initialize(current: nil, stored: nil); end
end
class ActiveRecord::Migration
  def announce(message); end
  def command_recorder; end
  def connection; end
  def copy(destination, sources, options = nil); end
  def disable_ddl_transaction; end
  def down; end
  def exec_migration(conn, direction); end
  def execute_block; end
  def initialize(name = nil, version = nil); end
  def method_missing(method, *arguments, &block); end
  def migrate(direction); end
  def name; end
  def name=(arg0); end
  def next_migration_number(number); end
  def proper_table_name(name, options = nil); end
  def reversible; end
  def revert(*migration_classes); end
  def reverting?; end
  def run(*migration_classes); end
  def say(message, subitem = nil); end
  def say_with_time(message); end
  def self.[](version); end
  def self.check_pending!(connection = nil); end
  def self.current_version; end
  def self.delegate; end
  def self.delegate=(arg0); end
  def self.disable_ddl_transaction!; end
  def self.disable_ddl_transaction; end
  def self.disable_ddl_transaction=(arg0); end
  def self.inherited(subclass); end
  def self.load_schema_if_pending!; end
  def self.maintain_test_schema!; end
  def self.method_missing(name, *args, &block); end
  def self.migrate(direction); end
  def self.nearest_delegate; end
  def self.verbose; end
  def self.verbose=(obj); end
  def suppress_messages; end
  def table_name_options(config = nil); end
  def up; end
  def up_only; end
  def verbose; end
  def verbose=(obj); end
  def version; end
  def version=(arg0); end
  def write(text = nil); end
end
class ActiveRecord::Migration::Current < ActiveRecord::Migration
end
class ActiveRecord::Migration::CheckPending
  def call(env); end
  def connection; end
  def initialize(app); end
end
class ActiveRecord::Migration::ReversibleBlockHelper < Struct
  def down; end
  def reverting; end
  def reverting=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def up; end
end
class ActiveRecord::MigrationProxy < Struct
  def announce(*args, &block); end
  def basename; end
  def disable_ddl_transaction(*args, &block); end
  def filename; end
  def filename=(_); end
  def initialize(name, version, filename, scope); end
  def load_migration; end
  def migrate(*args, &block); end
  def migration; end
  def mtime; end
  def name; end
  def name=(_); end
  def scope; end
  def scope=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def version; end
  def version=(_); end
  def write(*args, &block); end
end
class ActiveRecord::NullMigration < ActiveRecord::MigrationProxy
  def initialize; end
  def mtime; end
end
class ActiveRecord::MigrationContext
  def any_migrations?; end
  def current_environment; end
  def current_version; end
  def down(target_version = nil); end
  def forward(steps = nil); end
  def get_all_versions; end
  def initialize(migrations_paths, schema_migration); end
  def last_migration; end
  def last_stored_environment; end
  def migrate(target_version = nil, &block); end
  def migration_files; end
  def migrations; end
  def migrations_paths; end
  def migrations_status; end
  def move(direction, steps); end
  def needs_migration?; end
  def open; end
  def parse_migration_filename(filename); end
  def protected_environment?; end
  def rollback(steps = nil); end
  def run(direction, target_version); end
  def schema_migration; end
  def up(target_version = nil); end
end
class ActiveRecord::Migrator
  def current; end
  def current_migration; end
  def current_version; end
  def ddl_transaction(migration); end
  def down?; end
  def execute_migration_in_transaction(migration, direction); end
  def finish; end
  def generate_migrator_advisory_lock_id; end
  def initialize(direction, migrations, schema_migration, target_version = nil); end
  def invalid_target?; end
  def load_migrated; end
  def migrate; end
  def migrate_without_lock; end
  def migrated; end
  def migrations; end
  def pending_migrations; end
  def ran?(migration); end
  def record_environment; end
  def record_version_state_after_migrating(version); end
  def run; end
  def run_without_lock; end
  def runnable; end
  def self.current_version; end
  def self.migrations_paths; end
  def self.migrations_paths=(arg0); end
  def start; end
  def target; end
  def up?; end
  def use_advisory_lock?; end
  def use_transaction?(migration); end
  def validate(migrations); end
  def with_advisory_lock; end
end
module ActiveRecord::Migration::JoinTable
  def find_join_table_name(table_1, table_2, options = nil); end
  def join_table_name(table_1, table_2); end
end
module ActiveRecord::ConnectionAdapters::SchemaStatements
  def add_belongs_to(table_name, ref_name, **options); end
  def add_column(table_name, column_name, type, **options); end
  def add_column_for_alter(table_name, column_name, type, options = nil); end
  def add_foreign_key(from_table, to_table, options = nil); end
  def add_index(table_name, column_name, options = nil); end
  def add_index_options(table_name, column_name, comment: nil, **options); end
  def add_index_sort_order(quoted_columns, **options); end
  def add_options_for_index_columns(quoted_columns, **options); end
  def add_reference(table_name, ref_name, **options); end
  def add_timestamps(table_name, options = nil); end
  def assume_migrated_upto_version(version, migrations_paths = nil); end
  def bulk_change_table(table_name, operations); end
  def can_remove_index_by_name?(options); end
  def change_column(table_name, column_name, type, options = nil); end
  def change_column_comment(table_name, column_name, comment_or_changes); end
  def change_column_default(table_name, column_name, default_or_changes); end
  def change_column_null(table_name, column_name, null, default = nil); end
  def change_table(table_name, options = nil); end
  def change_table_comment(table_name, comment_or_changes); end
  def column_exists?(table_name, column_name, type = nil, **options); end
  def column_options_keys; end
  def columns(table_name); end
  def columns_for_distinct(columns, orders); end
  def create_alter_table(name); end
  def create_join_table(table_1, table_2, column_options: nil, **options); end
  def create_schema_dumper(options); end
  def create_table(table_name, id: nil, primary_key: nil, force: nil, **options); end
  def create_table_definition(*args); end
  def data_source_exists?(name); end
  def data_source_sql(name = nil, type: nil); end
  def data_sources; end
  def drop_join_table(table_1, table_2, options = nil); end
  def drop_table(table_name, options = nil); end
  def dump_schema_information; end
  def extract_foreign_key_action(specifier); end
  def extract_new_comment_value(default_or_changes); end
  def extract_new_default_value(default_or_changes); end
  def fetch_type_metadata(sql_type); end
  def foreign_key_column_for(table_name); end
  def foreign_key_exists?(from_table, to_table = nil, **options); end
  def foreign_key_for!(from_table, to_table: nil, **options); end
  def foreign_key_for(from_table, **options); end
  def foreign_key_name(table_name, options); end
  def foreign_key_options(from_table, to_table, options); end
  def foreign_keys(table_name); end
  def index_column_names(column_names); end
  def index_exists?(table_name, column_name, options = nil); end
  def index_name(table_name, options); end
  def index_name_exists?(table_name, index_name); end
  def index_name_for_remove(table_name, options = nil); end
  def index_name_options(column_names); end
  def indexes(table_name); end
  def insert_versions_sql(versions); end
  def internal_string_options_for_primary_key; end
  def native_database_types; end
  def options_for_index_columns(options); end
  def options_include_default?(options); end
  def primary_key(table_name); end
  def quoted_columns_for_index(column_names, **options); end
  def quoted_scope(name = nil, type: nil); end
  def remove_belongs_to(table_name, ref_name, foreign_key: nil, polymorphic: nil, **options); end
  def remove_column(table_name, column_name, type = nil, options = nil); end
  def remove_column_for_alter(table_name, column_name, type = nil, options = nil); end
  def remove_columns(table_name, *column_names); end
  def remove_columns_for_alter(table_name, *column_names); end
  def remove_foreign_key(from_table, to_table = nil, **options); end
  def remove_index(table_name, options = nil); end
  def remove_reference(table_name, ref_name, foreign_key: nil, polymorphic: nil, **options); end
  def remove_timestamps(table_name, options = nil); end
  def rename_column(table_name, column_name, new_column_name); end
  def rename_column_indexes(table_name, column_name, new_column_name); end
  def rename_index(table_name, old_name, new_name); end
  def rename_table(table_name, new_name); end
  def rename_table_indexes(table_name, new_name); end
  def schema_creation; end
  def strip_table_name_prefix_and_suffix(table_name); end
  def table_alias_for(table_name); end
  def table_comment(table_name); end
  def table_exists?(table_name); end
  def table_options(table_name); end
  def tables; end
  def type_to_sql(type, limit: nil, precision: nil, scale: nil, **arg4); end
  def update_table_definition(table_name, base); end
  def validate_index_length!(table_name, new_name, internal = nil); end
  def view_exists?(view_name); end
  def views; end
  include ActiveRecord::Migration::JoinTable
end
module ActiveRecord::ConnectionAdapters::DatabaseLimits
  def allowed_index_name_length; end
  def bind_params_length; end
  def column_name_length(*args, &block); end
  def columns_per_multicolumn_index(*args, &block); end
  def columns_per_table(*args, &block); end
  def in_clause_length; end
  def index_name_length; end
  def indexes_per_table(*args, &block); end
  def joins_per_query(*args, &block); end
  def max_identifier_length; end
  def sql_query_length(*args, &block); end
  def table_alias_length; end
  def table_name_length(*args, &block); end
end
module ActiveRecord::ConnectionAdapters::QueryCache
  def cache; end
  def cache_notification_info(sql, name, binds); end
  def cache_sql(sql, name, binds); end
  def clear_query_cache; end
  def configure_query_cache!; end
  def disable_query_cache!; end
  def enable_query_cache!; end
  def initialize(*arg0); end
  def locked?(arel); end
  def query_cache; end
  def query_cache_enabled; end
  def select_all(arel, name = nil, binds = nil, preparable: nil); end
  def self.dirties_query_cache(base, *method_names); end
  def self.included(base); end
  def uncached; end
end
module ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration
  def disable_query_cache!; end
  def enable_query_cache!; end
  def initialize(*arg0); end
  def query_cache_enabled; end
end
module ActiveRecord::ConnectionAdapters::Savepoints
  def create_savepoint(name = nil); end
  def current_savepoint_name; end
  def exec_rollback_to_savepoint(name = nil); end
  def release_savepoint(name = nil); end
end
class ActiveRecord::ConnectionAdapters::AbstractAdapter::Version
  def <=>(version_string); end
  def full_version_string; end
  def initialize(version_string, full_version_string = nil); end
  def to_s; end
  include Comparable
end
module ActiveRecord::Scoping
  def initialize_internals_callback; end
  def populate_with_current_scope_attributes; end
  extend ActiveSupport::Autoload
  extend ActiveSupport::Concern
end
module ActiveRecord::Scoping::ClassMethods
  def current_scope(skip_inherited_scope = nil); end
  def current_scope=(scope); end
  def scope_attributes; end
  def scope_attributes?; end
end
class ActiveRecord::Scoping::ScopeRegistry
  def initialize; end
  def raise_invalid_scope_type!(scope_type); end
  def set_value_for(scope_type, model, value); end
  def value_for(scope_type, model, skip_inherited_scope = nil); end
  extend ActiveSupport::PerThreadRegistry
end
module ActiveRecord::Coders
end
module ActiveRecord::Locking
  extend ActiveSupport::Autoload
end
module ActiveRecord::Middleware
  extend ActiveSupport::Autoload
end
module ActiveRecord::Tasks
  extend ActiveSupport::Autoload
end
module AbstractController
  def self.eager_load!; end
  extend ActiveSupport::Autoload
end
module ActionDispatch::Http::FilterRedirect
  def filtered_location; end
  def location_filter_match?; end
  def location_filters; end
end
module ActionDispatch::Http::Cache
end
module ActionDispatch::Http::Cache::Request
  def etag_matches?(etag); end
  def fresh?(response); end
  def if_modified_since; end
  def if_none_match; end
  def if_none_match_etags; end
  def not_modified?(modified_at); end
end
module ActionDispatch::Http::Cache::Response
  def cache_control; end
  def cache_control_headers; end
  def cache_control_segments; end
  def date; end
  def date=(utc_time); end
  def date?; end
  def etag=(weak_validators); end
  def etag?; end
  def generate_strong_etag(validators); end
  def generate_weak_etag(validators); end
  def handle_conditional_get!; end
  def last_modified; end
  def last_modified=(utc_time); end
  def last_modified?; end
  def merge_and_normalize_cache_control!(cache_control); end
  def prepare_cache_control!; end
  def strong_etag=(strong_validators); end
  def strong_etag?; end
  def weak_etag=(weak_validators); end
  def weak_etag?; end
end
class ActionDispatch::Response
  def [](*args, &block); end
  def []=(*args, &block); end
  def _cache_control; end
  def _cache_control=(v); end
  def abort; end
  def assign_default_content_type_and_charset!; end
  def await_commit; end
  def await_sent; end
  def before_committed; end
  def before_sending; end
  def body; end
  def body=(body); end
  def body_parts; end
  def build_buffer(response, body); end
  def charset; end
  def charset=(charset); end
  def close; end
  def code; end
  def commit!; end
  def committed?; end
  def content_type; end
  def content_type=(content_type); end
  def cookies; end
  def default_charset; end
  def default_charset=(obj); end
  def default_headers; end
  def default_headers=(obj); end
  def delete_header(key); end
  def each(&block); end
  def get_header(key); end
  def handle_no_content!; end
  def has_header?(key); end
  def header; end
  def headers; end
  def initialize(status = nil, header = nil, body = nil); end
  def media_type; end
  def message; end
  def munge_body_object(body); end
  def parse_content_type(content_type); end
  def parsed_content_type_header; end
  def prepare!; end
  def rack_response(status, header); end
  def redirect_url; end
  def request; end
  def request=(arg0); end
  def reset_body!; end
  def response_code; end
  def self.create(status = nil, header = nil, body = nil, default_headers: nil); end
  def self.default_charset; end
  def self.default_charset=(obj); end
  def self.default_headers; end
  def self.default_headers=(obj); end
  def self.merge_default_headers(original, default); end
  def send_file(path); end
  def sending!; end
  def sending?; end
  def sending_file=(v); end
  def sent!; end
  def sent?; end
  def set_content_type(content_type, charset); end
  def set_header(key, v); end
  def status; end
  def status=(status); end
  def status_message; end
  def stream; end
  def to_a; end
  def write(string); end
  include ActionDispatch::Http::Cache::Response
  include ActionDispatch::Http::FilterRedirect
  include MonitorMixin
  include Rack::Response::Helpers
end
class ActionDispatch::Response::Header < Anonymous_Delegator_3
  def []=(k, v); end
  def initialize(response, header); end
  def merge(other); end
  def to_hash; end
end
class ActionDispatch::Response::Buffer
  def abort; end
  def body; end
  def close; end
  def closed?; end
  def each(&block); end
  def each_chunk(&block); end
  def initialize(response, buf); end
  def write(string); end
end
class ActionDispatch::Response::FileBody
  def body; end
  def each; end
  def initialize(path); end
  def to_path; end
end
class ActionDispatch::Response::ContentTypeHeader < Struct
  def charset; end
  def charset=(_); end
  def mime_type; end
  def mime_type=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class ActionDispatch::Response::RackBody
  def body; end
  def close; end
  def each(*args, &block); end
  def initialize(response); end
  def respond_to?(method, include_private = nil); end
  def to_ary; end
  def to_path; end
end
module ActionController
  def self.add_renderer(key, &block); end
  def self.remove_renderer(key); end
  extend ActiveSupport::Autoload
end
module ActionController::Live
  def log_error(exception); end
  def new_controller_thread; end
  def process(name); end
  def response_body=(body); end
  extend ActiveSupport::Concern
end
module ActionController::Live::ClassMethods
  def make_response!(request); end
end
class ActionController::Live::SSE
  def close; end
  def initialize(stream, options = nil); end
  def perform_write(json, options); end
  def write(object, options = nil); end
end
class ActionController::Live::ClientDisconnected < RuntimeError
end
class ActionController::Live::Buffer < ActionDispatch::Response::Buffer
  def abort; end
  def call_on_error; end
  def close; end
  def connected?; end
  def each_chunk(&block); end
  def ignore_disconnect; end
  def ignore_disconnect=(arg0); end
  def initialize(response); end
  def on_error(&block); end
  def write(string); end
  include MonitorMixin
end
class ActionController::Live::Response < ActionDispatch::Response
  def before_committed; end
  def build_buffer(response, body); end
end
class ActionDispatch::Http::UploadedFile
  def close(unlink_now = nil); end
  def content_type; end
  def content_type=(arg0); end
  def eof?; end
  def headers; end
  def headers=(arg0); end
  def initialize(hash); end
  def open; end
  def original_filename; end
  def original_filename=(arg0); end
  def path; end
  def read(length = nil, buffer = nil); end
  def rewind; end
  def size; end
  def tempfile; end
  def tempfile=(arg0); end
  def to_io; end
  def to_path; end
end
class ActionController::ParameterMissing < KeyError
  def initialize(param); end
  def param; end
end
class ActionController::UnpermittedParameters < IndexError
  def initialize(params); end
  def params; end
end
class ActionController::UnfilteredParameters < ArgumentError
  def initialize; end
end
class ActionController::Parameters
  def ==(other); end
  def [](key); end
  def []=(key, value); end
  def always_permitted_parameters; end
  def always_permitted_parameters=(obj); end
  def array_of_permitted_scalars?(value); end
  def as_json(*args, &block); end
  def convert_hashes_to_parameters(key, value); end
  def convert_parameters_to_hashes(value, using); end
  def convert_value_to_parameters(value); end
  def converted_arrays; end
  def deep_dup; end
  def deep_transform_keys!(&block); end
  def deep_transform_keys(&block); end
  def delete(key, &block); end
  def delete_if(&block); end
  def dig(*keys); end
  def each(&block); end
  def each_element(object, &block); end
  def each_key(*args, &block); end
  def each_nested_attribute; end
  def each_pair(&block); end
  def each_value(&block); end
  def empty?(*args, &block); end
  def except(*keys); end
  def extract!(*keys); end
  def fetch(key, *args); end
  def has_key?(*args, &block); end
  def has_value?(*args, &block); end
  def hash_filter(params, filter); end
  def include?(*args, &block); end
  def init_with(coder); end
  def initialize(parameters = nil); end
  def initialize_copy(source); end
  def inspect; end
  def keep_if(&block); end
  def key?(*args, &block); end
  def keys(*args, &block); end
  def merge!(other_hash); end
  def merge(other_hash); end
  def nested_attributes?; end
  def new_instance_with_inherited_permitted_status(hash); end
  def non_scalar?(value); end
  def parameters; end
  def permit!; end
  def permit(*filters); end
  def permit_any_in_array(array); end
  def permit_any_in_parameters(params); end
  def permitted=(arg0); end
  def permitted?; end
  def permitted_scalar?(value); end
  def permitted_scalar_filter(params, permitted_key); end
  def reject!(&block); end
  def reject(&block); end
  def require(key); end
  def required(key); end
  def reverse_merge!(other_hash); end
  def reverse_merge(other_hash); end
  def select!(&block); end
  def select(&block); end
  def self.action_on_unpermitted_parameters; end
  def self.action_on_unpermitted_parameters=(obj); end
  def self.always_permitted_parameters; end
  def self.always_permitted_parameters=(obj); end
  def self.hook_into_yaml_loading; end
  def self.nested_attribute?(key, value); end
  def self.permit_all_parameters; end
  def self.permit_all_parameters=(obj); end
  def slice!(*keys); end
  def slice(*keys); end
  def stringify_keys; end
  def to_h; end
  def to_hash; end
  def to_param(*args); end
  def to_query(*args); end
  def to_s(*args, &block); end
  def to_unsafe_h; end
  def to_unsafe_hash; end
  def transform_keys!(&block); end
  def transform_keys(&block); end
  def transform_values!; end
  def transform_values; end
  def unpermitted_keys(params); end
  def unpermitted_parameters!(params); end
  def value?(*args, &block); end
  def values(*args, &block); end
  def values_at(*keys); end
  def with_defaults!(other_hash); end
  def with_defaults(other_hash); end
end
module ActionController::StrongParameters
  def params; end
  def params=(value); end
end
module URI
  def self.parser; end
end
module AbstractController::Railties
end
module AbstractController::Railties::RoutesHelpers
  def self.with(routes, include_path_helpers = nil); end
end
module ActionController::Railties
end
module ActionController::Railties::Helpers
  def inherited(klass); end
end
module ActionView
  def self.eager_load!; end
  def self.gem_version; end
  def self.version; end
  extend ActiveSupport::Autoload
end
module ActionView::VERSION
end
module ActiveSupport::Multibyte::Unicode
  def compose(codepoints); end
  def decompose(type, codepoints); end
  def default_normalization_form; end
  def default_normalization_form=(arg0); end
  def downcase(string); end
  def normalize(string, form = nil); end
  def pack_graphemes(unpacked); end
  def recode_windows1252_chars(string); end
  def swapcase(string); end
  def tidy_bytes(string, force = nil); end
  def unpack_graphemes(string); end
  def upcase(string); end
  extend ActiveSupport::Multibyte::Unicode
end
class ERB
end
module ERB::Util
  def html_escape_once(s); end
  def json_escape(s); end
  def self.html_escape_once(s); end
  def self.json_escape(s); end
  def self.unwrapped_html_escape(s); end
  def unwrapped_html_escape(s); end
end
class ActiveSupport::SafeBuffer < String
  def %(args); end
  def *(*arg0); end
  def +(other); end
  def <<(value); end
  def [](*args); end
  def []=(*args); end
  def capitalize!(*args); end
  def capitalize(*args, &block); end
  def chomp!(*args); end
  def chomp(*args, &block); end
  def chop!(*args); end
  def chop(*args, &block); end
  def clone_empty; end
  def concat(value); end
  def delete!(*args); end
  def delete(*args, &block); end
  def delete_prefix!(*args); end
  def delete_prefix(*args, &block); end
  def delete_suffix!(*args); end
  def delete_suffix(*args, &block); end
  def downcase!(*args); end
  def downcase(*args, &block); end
  def encode_with(coder); end
  def gsub!(*args, &block); end
  def gsub(*args, &block); end
  def html_escape_interpolated_argument(arg); end
  def html_safe?; end
  def initialize(str = nil); end
  def initialize_copy(other); end
  def insert(index, value); end
  def lstrip!(*args); end
  def lstrip(*args, &block); end
  def next!(*args); end
  def next(*args, &block); end
  def original_concat(*arg0); end
  def prepend(value); end
  def replace(value); end
  def reverse!(*args); end
  def reverse(*args, &block); end
  def rstrip!(*args); end
  def rstrip(*args, &block); end
  def safe_concat(value); end
  def set_block_back_references(block, match_data); end
  def slice!(*args); end
  def slice(*args, &block); end
  def squeeze!(*args); end
  def squeeze(*args, &block); end
  def strip!(*args); end
  def strip(*args, &block); end
  def sub!(*args, &block); end
  def sub(*args, &block); end
  def succ!(*args); end
  def succ(*args, &block); end
  def swapcase!(*args); end
  def swapcase(*args, &block); end
  def to_param; end
  def to_s; end
  def tr!(*args); end
  def tr(*args, &block); end
  def tr_s!(*args); end
  def tr_s(*args, &block); end
  def unicode_normalize!(*args); end
  def unicode_normalize(*args, &block); end
  def upcase!(*args); end
  def upcase(*args, &block); end
end
class ActiveSupport::SafeBuffer::SafeConcatError < StandardError
  def initialize; end
end
class Rails::Engine::Configuration < Rails::Railtie::Configuration
  def autoload_once_paths; end
  def autoload_once_paths=(arg0); end
  def autoload_paths; end
  def autoload_paths=(arg0); end
  def eager_load_paths; end
  def eager_load_paths=(arg0); end
  def generators; end
  def initialize(root = nil); end
  def middleware; end
  def middleware=(arg0); end
  def paths; end
  def root; end
  def root=(value); end
end
class ActionView::Railtie < Rails::Engine
end
class ActionController::Railtie < Rails::Railtie
end
class ActiveRecord::Railtie < Rails::Railtie
end
module ActionMailer
  def self.eager_load!; end
  def self.gem_version; end
  def self.version; end
  extend ActiveSupport::Autoload
end
module ActionMailer::VERSION
end
class ActionMailer::Railtie < Rails::Railtie
end
class ActiveSupport::StringInquirer < String
  def method_missing(method_name, *arguments); end
  def respond_to_missing?(method_name, include_private = nil); end
end
class ActiveSupport::Subscriber
  def self.add_event_subscriber(event); end
  def self.attach_to(namespace, subscriber = nil, notifier = nil); end
  def self.detach_from(namespace, notifier = nil); end
  def self.find_attached_subscriber; end
  def self.invalid_event?(event); end
  def self.method_added(event); end
  def self.namespace; end
  def self.notifier; end
  def self.pattern_subscribed?(pattern); end
  def self.prepare_pattern(event); end
  def self.remove_event_subscriber(event); end
  def self.subscriber; end
  def self.subscribers; end
end
class ActiveSupport::SubscriberQueueRegistry
  def get_queue(queue_key); end
  def initialize; end
  extend ActiveSupport::PerThreadRegistry
end
class ActiveSupport::LogSubscriber < ActiveSupport::Subscriber
  def self.colorize_logging; end
  def self.colorize_logging=(obj); end
  def self.flush_all!; end
  def self.log_subscribers; end
  def self.logger; end
  def self.logger=(arg0); end
end
class ActionController::LogSubscriber < ActiveSupport::LogSubscriber
end
module Mime
  def self.[](type); end
  def self.fetch(type); end
end
class Mime::Mimes
  def <<(type); end
  def delete_if; end
  def each; end
  def initialize; end
  def symbols; end
  include Enumerable
end
class Mime::Type
  def ==(mime_type); end
  def ===(list); end
  def =~(mime_type); end
  def all?; end
  def eql?(other); end
  def hash; end
  def html?; end
  def initialize(string, symbol = nil, synonyms = nil); end
  def method_missing(method, *args); end
  def ref; end
  def respond_to_missing?(method, include_private = nil); end
  def self.lookup(string); end
  def self.lookup_by_extension(extension); end
  def self.parse(accept_header); end
  def self.parse_data_with_trailing_star(type); end
  def self.parse_trailing_star(accept_header); end
  def self.register(string, symbol, mime_type_synonyms = nil, extension_synonyms = nil, skip_lookup = nil); end
  def self.register_alias(string, symbol, extension_synonyms = nil); end
  def self.register_callback(&block); end
  def self.unregister(symbol); end
  def string; end
  def symbol; end
  def synonyms; end
  def to_a; end
  def to_ary; end
  def to_s; end
  def to_str; end
  def to_sym; end
end
class Mime::Type::AcceptItem
  def <=>(item); end
  def index; end
  def index=(arg0); end
  def initialize(index, name, q = nil); end
  def name; end
  def name=(arg0); end
  def q; end
  def q=(arg0); end
  def to_s; end
end
class Mime::Type::AcceptList
  def self.find_item_by_name(array, name); end
  def self.sort!(list); end
end
class Mime::Type::InvalidMimeType < StandardError
end
class Mime::AllType < Mime::Type
  def all?; end
  def html?; end
  def initialize; end
  def self.allocate; end
  def self.instance; end
  def self.new(*arg0); end
  extend Singleton::SingletonClassMethods
  include Singleton
end
class Mime::NullType
  def method_missing(method, *args); end
  def nil?; end
  def ref; end
  def respond_to_missing?(method, _); end
  def self.allocate; end
  def self.instance; end
  def self.new(*arg0); end
  extend Singleton::SingletonClassMethods
  include Singleton
end
module ActionController::ParamsWrapper
  def _extract_parameters(parameters); end
  def _perform_parameter_wrapping; end
  def _wrap_parameters(parameters); end
  def _wrapper_enabled?; end
  def _wrapper_formats; end
  def _wrapper_key; end
  def process_action(*args); end
  extend ActiveSupport::Concern
end
class Anonymous_Struct_4 < Struct
  def exclude; end
  def exclude=(_); end
  def format; end
  def format=(_); end
  def include; end
  def include=(_); end
  def klass; end
  def klass=(_); end
  def model; end
  def model=(_); end
  def name; end
  def name=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class ActionController::ParamsWrapper::Options < Anonymous_Struct_4
  def _default_wrap_model; end
  def include; end
  def initialize(name, format, include, exclude, klass, model); end
  def lock; end
  def locked?; end
  def model; end
  def name; end
  def self.from_hash(hash); end
  def synchronize(&block); end
  def try_lock; end
  def unlock; end
  include Mutex_m
end
module ActionController::ParamsWrapper::ClassMethods
  def _set_wrapper_options(options); end
  def inherited(klass); end
  def wrap_parameters(name_or_model_or_options, options = nil); end
end
class ActionDispatch::MiddlewareStack
  def [](i); end
  def assert_index(index, where); end
  def build(app = nil, &block); end
  def build_middleware(klass, args, block); end
  def delete(target); end
  def each; end
  def initialize(*args); end
  def initialize_copy(other); end
  def insert(index, klass, *args, &block); end
  def insert_after(index, *args, &block); end
  def insert_before(index, klass, *args, &block); end
  def last; end
  def middlewares; end
  def middlewares=(arg0); end
  def size; end
  def swap(target, *args, &block); end
  def unshift(klass, *args, &block); end
  def use(klass, *args, &block); end
  include Enumerable
end
class ActionDispatch::MiddlewareStack::Middleware
  def ==(middleware); end
  def args; end
  def block; end
  def build(app); end
  def build_instrumented(app); end
  def initialize(klass, args, block); end
  def inspect; end
  def klass; end
  def name; end
end
class ActionDispatch::MiddlewareStack::InstrumentationProxy
  def call(env); end
  def initialize(middleware, class_name); end
end
class ActionDispatch::Http::Headers
  def [](key); end
  def []=(key, value); end
  def add(key, value); end
  def each(&block); end
  def env; end
  def env_name(key); end
  def fetch(key, default = nil); end
  def include?(key); end
  def initialize(request); end
  def key?(key); end
  def merge!(headers_or_env); end
  def merge(headers_or_env); end
  def self.from_hash(hash); end
  include Enumerable
end
class ActionController::ActionControllerError < StandardError
end
class ActionController::BadRequest < ActionController::ActionControllerError
  def initialize(msg = nil); end
end
class ActionController::RenderError < ActionController::ActionControllerError
end
class ActionController::RoutingError < ActionController::ActionControllerError
  def failures; end
  def initialize(message, failures = nil); end
end
class ActionController::UrlGenerationError < ActionController::ActionControllerError
end
class ActionController::MethodNotAllowed < ActionController::ActionControllerError
  def initialize(*allowed_methods); end
end
class ActionController::NotImplemented < ActionController::MethodNotAllowed
end
class ActionController::MissingFile < ActionController::ActionControllerError
end
class ActionController::SessionOverflowError < ActionController::ActionControllerError
  def initialize(message = nil); end
end
class ActionController::UnknownHttpMethod < ActionController::ActionControllerError
end
class ActionController::UnknownFormat < ActionController::ActionControllerError
end
class ActionController::RespondToMismatchError < ActionController::ActionControllerError
  def initialize(message = nil); end
end
class ActionController::MissingExactTemplate < ActionController::UnknownFormat
end
module ActionDispatch::Http::Parameters
  def binary_params_for?(controller, action); end
  def log_parse_error_once; end
  def parameters; end
  def params; end
  def params_parsers; end
  def parse_formatted_parameters(parsers); end
  def path_parameters; end
  def path_parameters=(parameters); end
  def set_binary_encoding(params, controller, action); end
  extend ActiveSupport::Concern
end
class ActionDispatch::Http::Parameters::ParseError < StandardError
  def initialize; end
end
module ActionDispatch::Http::Parameters::ClassMethods
  def parameter_parsers=(parsers); end
end
module ActionDispatch::Http::MimeNegotiation
  def accepts; end
  def content_mime_type; end
  def content_type; end
  def format(view_path = nil); end
  def format=(extension); end
  def format_from_path_extension; end
  def formats; end
  def formats=(extensions); end
  def has_content_type?; end
  def negotiate_mime(order); end
  def use_accept_header; end
  def valid_accept_header; end
  def variant; end
  def variant=(variant); end
  extend ActiveSupport::Concern
end
class ActiveSupport::ParameterFilter
  def compiled_filter; end
  def filter(params); end
  def filter_param(key, value); end
  def initialize(filters = nil, mask: nil); end
end
class ActiveSupport::ParameterFilter::CompiledFilter
  def blocks; end
  def call(params, parents = nil, original_params = nil); end
  def deep_regexps; end
  def initialize(regexps, deep_regexps, blocks, mask:); end
  def regexps; end
  def self.compile(filters, mask:); end
  def value_for_key(key, value, parents = nil, original_params = nil); end
end
module ActionDispatch::Http::FilterParameters
  def env_filter; end
  def filtered_env; end
  def filtered_parameters; end
  def filtered_path; end
  def filtered_query_string; end
  def initialize; end
  def parameter_filter; end
  def parameter_filter_for(filters); end
end
module ActionDispatch::Http::URL
  def domain(tld_length = nil); end
  def host; end
  def host_with_port; end
  def initialize; end
  def optional_port; end
  def port; end
  def port_string; end
  def protocol; end
  def raw_host_with_port; end
  def self.add_anchor(path, anchor); end
  def self.add_params(path, params); end
  def self.add_trailing_slash(path); end
  def self.build_host_url(host, port, protocol, options, path); end
  def self.extract_domain(host, tld_length); end
  def self.extract_domain_from(host, tld_length); end
  def self.extract_subdomain(host, tld_length); end
  def self.extract_subdomains(host, tld_length); end
  def self.extract_subdomains_from(host, tld_length); end
  def self.full_url_for(options); end
  def self.named_host?(host); end
  def self.normalize_host(_host, options); end
  def self.normalize_port(port, protocol); end
  def self.normalize_protocol(protocol); end
  def self.path_for(options); end
  def self.tld_length; end
  def self.tld_length=(obj); end
  def self.url_for(options); end
  def server_port; end
  def standard_port; end
  def standard_port?; end
  def subdomain(tld_length = nil); end
  def subdomains(tld_length = nil); end
  def tld_length; end
  def tld_length=(obj); end
  def url; end
end
class ActionDispatch::ContentSecurityPolicy
  def apply_mapping(source); end
  def apply_mappings(sources); end
  def base_uri(*sources); end
  def block_all_mixed_content(enabled = nil); end
  def build(context = nil, nonce = nil); end
  def build_directive(sources, context); end
  def build_directives(context, nonce); end
  def child_src(*sources); end
  def connect_src(*sources); end
  def default_src(*sources); end
  def directives; end
  def font_src(*sources); end
  def form_action(*sources); end
  def frame_ancestors(*sources); end
  def frame_src(*sources); end
  def img_src(*sources); end
  def initialize; end
  def initialize_copy(other); end
  def manifest_src(*sources); end
  def media_src(*sources); end
  def nonce_directive?(directive); end
  def object_src(*sources); end
  def plugin_types(*types); end
  def prefetch_src(*sources); end
  def report_uri(uri); end
  def require_sri_for(*types); end
  def resolve_source(source, context); end
  def sandbox(*values); end
  def script_src(*sources); end
  def style_src(*sources); end
  def upgrade_insecure_requests(enabled = nil); end
  def worker_src(*sources); end
end
class ActionDispatch::ContentSecurityPolicy::Middleware
  def call(env); end
  def header_name(request); end
  def html_response?(headers); end
  def initialize(app); end
  def policy_present?(headers); end
end
module ActionDispatch::ContentSecurityPolicy::Request
  def content_security_policy; end
  def content_security_policy=(policy); end
  def content_security_policy_nonce; end
  def content_security_policy_nonce_generator; end
  def content_security_policy_nonce_generator=(generator); end
  def content_security_policy_report_only; end
  def content_security_policy_report_only=(value); end
  def generate_content_security_policy_nonce; end
end
class ActionDispatch::Request
  def GET; end
  def POST; end
  def accept; end
  def accept_charset; end
  def accept_encoding; end
  def accept_language; end
  def auth_type; end
  def authenticated_encrypted_cookie_salt; end
  def authorization; end
  def body; end
  def body_stream; end
  def cache_control; end
  def check_method(name); end
  def client_ip; end
  def commit_cookie_jar!; end
  def commit_flash; end
  def content_length; end
  def controller_class; end
  def controller_class_for(name); end
  def controller_instance; end
  def controller_instance=(controller); end
  def cookie_jar; end
  def cookie_jar=(jar); end
  def cookies_digest; end
  def cookies_rotations; end
  def cookies_serializer; end
  def encrypted_cookie_cipher; end
  def encrypted_cookie_salt; end
  def encrypted_signed_cookie_salt; end
  def engine_script_name(_routes); end
  def engine_script_name=(name); end
  def form_data?; end
  def from; end
  def fullpath; end
  def gateway_interface; end
  def have_cookie_jar?; end
  def headers; end
  def http_auth_salt; end
  def ignore_accept_header; end
  def ignore_accept_header=(obj); end
  def initialize(env); end
  def ip; end
  def key?(key); end
  def key_generator; end
  def local?; end
  def logger; end
  def media_type; end
  def method; end
  def method_symbol; end
  def negotiate; end
  def origin; end
  def original_fullpath; end
  def original_script_name; end
  def original_url; end
  def path_translated; end
  def pragma; end
  def query_parameters; end
  def raw_post; end
  def remote_addr; end
  def remote_host; end
  def remote_ident; end
  def remote_ip; end
  def remote_ip=(remote_ip); end
  def remote_user; end
  def request_id; end
  def request_id=(id); end
  def request_method; end
  def request_method=(request_method); end
  def request_method_symbol; end
  def request_parameters; end
  def request_parameters=(params); end
  def reset_session; end
  def routes; end
  def routes=(routes); end
  def secret_key_base; end
  def self.empty; end
  def self.ignore_accept_header; end
  def self.ignore_accept_header=(obj); end
  def self.parameter_parsers; end
  def send_early_hints(links); end
  def server_addr; end
  def server_name; end
  def server_protocol; end
  def server_software; end
  def session=(session); end
  def session_options=(options); end
  def show_exceptions?; end
  def signed_cookie_digest; end
  def signed_cookie_salt; end
  def ssl?; end
  def use_authenticated_cookie_encryption; end
  def use_cookies_with_metadata; end
  def uuid; end
  def version; end
  def x_csrf_token; end
  def x_forwarded_for; end
  def x_forwarded_host; end
  def x_request_id; end
  def xhr?; end
  def xml_http_request?; end
  extend ActionDispatch::Http::Parameters::ClassMethods
  include ActionDispatch::ContentSecurityPolicy::Request
  include ActionDispatch::Http::Cache::Request
  include ActionDispatch::Http::FilterParameters
  include ActionDispatch::Http::MimeNegotiation
  include ActionDispatch::Http::Parameters
  include ActionDispatch::Http::URL
  include Rack::Request::Env
  include Rack::Request::Helpers
end
class ActionDispatch::Request::PASS_NOT_FOUND
  def self.action(_); end
  def self.binary_params_for?(action); end
  def self.call(_); end
end
class AbstractController::Error < StandardError
end
module ActiveSupport::Configurable
  def config; end
  extend ActiveSupport::Concern
end
class ActiveSupport::Configurable::Configuration < ActiveSupport::InheritableOptions
  def compile_methods!; end
  def self.compile_methods!(keys); end
end
module ActiveSupport::Configurable::ClassMethods
  def config; end
  def config_accessor(*names, instance_reader: nil, instance_writer: nil, instance_accessor: nil); end
  def configure; end
end
class AbstractController::ActionNotFound < StandardError
end
class AbstractController::Base
  def _find_action_name(action_name); end
  def _handle_action_missing(*args); end
  def _valid_action_name?(action_name); end
  def action_method?(name); end
  def action_methods; end
  def action_name; end
  def action_name=(arg0); end
  def available_action?(action_name); end
  def controller_path; end
  def formats; end
  def formats=(arg0); end
  def method_for_action(action_name); end
  def performed?; end
  def process(action, *args); end
  def process_action(method_name, *args); end
  def response_body; end
  def response_body=(arg0); end
  def self.abstract!; end
  def self.abstract; end
  def self.abstract?; end
  def self.action_methods; end
  def self.clear_action_methods!; end
  def self.controller_path; end
  def self.inherited(klass); end
  def self.internal_methods; end
  def self.method_added(name); end
  def self.supports_path?; end
  def send_action(*arg0); end
  extend ActiveSupport::Configurable::ClassMethods
  extend ActiveSupport::DescendantsTracker
  include ActiveSupport::Configurable
end
class ActionController::MiddlewareStack < ActionDispatch::MiddlewareStack
  def build(action, app = nil, &block); end
  def build_middleware(klass, args, block); end
end
class ActionController::MiddlewareStack::Middleware < ActionDispatch::MiddlewareStack::Middleware
  def initialize(klass, args, actions, strategy, block); end
  def valid?(action); end
end
class ActionController::Metal < AbstractController::Base
  def content_type(*args, &block); end
  def content_type=(arg); end
  def controller_name; end
  def dispatch(name, request, response); end
  def headers(*args, &block); end
  def initialize; end
  def location(*args, &block); end
  def location=(arg); end
  def media_type(*args, &block); end
  def middleware_stack; end
  def middleware_stack=(val); end
  def middleware_stack?; end
  def params; end
  def params=(val); end
  def performed?; end
  def request; end
  def request=(arg0); end
  def reset_session; end
  def response; end
  def response=(arg0); end
  def response_body=(body); end
  def response_code(*args, &block); end
  def self.action(name); end
  def self.binary_params_for?(action); end
  def self.controller_name; end
  def self.dispatch(name, req, res); end
  def self.inherited(base); end
  def self.make_response!(request); end
  def self.middleware; end
  def self.middleware_stack; end
  def self.middleware_stack=(val); end
  def self.middleware_stack?; end
  def self.use(*args, &block); end
  def session(*args, &block); end
  def set_request!(request); end
  def set_response!(response); end
  def status(*args, &block); end
  def status=(arg); end
  def to_a; end
  def url_for(string); end
end
module ActionView::ViewPaths
  def _prefixes; end
  def any_templates?(*args, &block); end
  def append_view_path(path); end
  def details_for_lookup; end
  def formats(*args, &block); end
  def formats=(arg); end
  def locale(*args, &block); end
  def locale=(arg); end
  def lookup_context; end
  def prepend_view_path(path); end
  def self.all_view_paths; end
  def self.get_view_paths(klass); end
  def self.set_view_paths(klass, paths); end
  def template_exists?(*args, &block); end
  def view_paths(*args, &block); end
  extend ActiveSupport::Concern
end
module ActionView::ViewPaths::ClassMethods
  def _prefixes; end
  def _view_paths; end
  def _view_paths=(paths); end
  def append_view_path(path); end
  def local_prefixes; end
  def prepend_view_path(path); end
  def view_paths; end
  def view_paths=(paths); end
end
class AbstractController::DoubleRenderError < AbstractController::Error
  def initialize(message = nil); end
end
module AbstractController::Rendering
  def _normalize_args(action = nil, options = nil); end
  def _normalize_options(options); end
  def _normalize_render(*args, &block); end
  def _process_format(format); end
  def _process_options(options); end
  def _process_variant(options); end
  def _protected_ivars; end
  def _set_html_content_type; end
  def _set_rendered_content_type(format); end
  def render(*args, &block); end
  def render_to_body(options = nil); end
  def render_to_string(*args, &block); end
  def rendered_format; end
  def view_assigns; end
  extend ActiveSupport::Concern
  include ActionView::ViewPaths
end
module AbstractController::Translation
  def l(*args); end
  def localize(*args); end
  def t(key, options = nil); end
  def translate(key, options = nil); end
end
module AbstractController::AssetPaths
  extend ActiveSupport::Concern
end
module AbstractController::Helpers
  extend ActiveSupport::Concern
end
class AbstractController::Helpers::MissingHelperError < LoadError
  def initialize(error, path); end
end
module AbstractController::Helpers::ClassMethods
  def add_template_helper(mod); end
  def clear_helpers; end
  def default_helper_module!; end
  def define_helpers_module(klass, helpers = nil); end
  def helper(*args, &block); end
  def helper_method(*meths); end
  def inherited(klass); end
  def modules_for_helpers(args); end
end
module ActionController::Helpers
  def helpers; end
  def self.helpers_path; end
  def self.helpers_path=(arg0); end
  extend ActiveSupport::Concern
  include AbstractController::Helpers
end
module ActionController::Helpers::ClassMethods
  def all_application_helpers; end
  def all_helpers_from_path(path); end
  def helper_attr(*attrs); end
  def helpers; end
  def modules_for_helpers(args); end
end
module ActionDispatch::Routing
  extend ActiveSupport::Autoload
end
module ActionDispatch::Routing::PolymorphicRoutes
  def edit_polymorphic_path(record_or_hash, options = nil); end
  def edit_polymorphic_url(record_or_hash, options = nil); end
  def new_polymorphic_path(record_or_hash, options = nil); end
  def new_polymorphic_url(record_or_hash, options = nil); end
  def polymorphic_mapping(record); end
  def polymorphic_path(record_or_hash_or_array, options = nil); end
  def polymorphic_path_for_action(action, record_or_hash, options); end
  def polymorphic_url(record_or_hash_or_array, options = nil); end
  def polymorphic_url_for_action(action, record_or_hash, options); end
end
class ActionDispatch::Routing::PolymorphicRoutes::HelperMethodBuilder
  def get_method_for_class(klass); end
  def get_method_for_string(str); end
  def handle_class(klass); end
  def handle_class_call(target, klass); end
  def handle_list(list); end
  def handle_model(record); end
  def handle_model_call(target, record); end
  def handle_string(record); end
  def handle_string_call(target, str); end
  def initialize(key_strategy, prefix, suffix); end
  def polymorphic_mapping(target, record); end
  def prefix; end
  def self.build(action, type); end
  def self.get(action, type); end
  def self.path; end
  def self.plural(prefix, suffix); end
  def self.polymorphic_method(recipient, record_or_hash_or_array, action, type, options); end
  def self.singular(prefix, suffix); end
  def self.url; end
  def suffix; end
end
module ActionDispatch::Routing::UrlFor
  def _routes_context; end
  def _with_routes(routes); end
  def full_url_for(options = nil); end
  def initialize(*arg0); end
  def optimize_routes_generation?; end
  def route_for(name, *args); end
  def url_for(options = nil); end
  def url_options; end
  extend ActiveSupport::Concern
  include ActionDispatch::Routing::PolymorphicRoutes
end
module AbstractController::UrlFor
  def _routes; end
  extend ActiveSupport::Concern
  include ActionDispatch::Routing::UrlFor
end
module AbstractController::UrlFor::ClassMethods
  def _routes; end
  def action_methods; end
end
module ActionController::UrlFor
  def url_options; end
  extend ActiveSupport::Concern
  include AbstractController::UrlFor
end
module Benchmark
  def self.ms; end
end
module ActiveSupport::Benchmarkable
  def benchmark(message = nil, options = nil); end
end
module AbstractController::Logger
  extend ActiveSupport::Concern
end
module ActionController::Redirecting
  def _compute_redirect_to_location(request, options); end
  def _extract_redirect_to_status(options, response_options); end
  def _url_host_allowed?(url); end
  def redirect_back(fallback_location:, allow_other_host: nil, **args); end
  def redirect_to(options = nil, response_options = nil); end
  def self._compute_redirect_to_location(request, options); end
  extend ActiveSupport::Concern
  include AbstractController::Logger
  include ActionController::UrlFor
end
class ActionView::I18nProxy < I18n::Config
  def initialize(original_config, lookup_context); end
  def locale; end
  def locale=(value); end
  def lookup_context; end
  def original_config; end
end
module ActionView::Rendering
  def _normalize_args(action = nil, options = nil); end
  def _normalize_options(options); end
  def _process_format(format); end
  def _render_template(options); end
  def initialize; end
  def process(*arg0); end
  def render_to_body(options = nil); end
  def rendered_format; end
  def view_context; end
  def view_context_class; end
  def view_renderer; end
  extend ActiveSupport::Concern
  include ActionView::ViewPaths
end
module ActionView::Rendering::ClassMethods
  def _helpers; end
  def _routes; end
  def build_view_context_class(klass, supports_path, routes, helpers); end
  def view_context_class; end
end
module ActionView::Layouts
  def _conditional_layout?; end
  def _default_layout(lookup_context, formats, require_layout = nil); end
  def _include_layout?(options); end
  def _layout(*arg0); end
  def _layout_conditions(*args, &block); end
  def _layout_for_option(name); end
  def _normalize_layout(value); end
  def _normalize_options(options); end
  def action_has_layout=(arg0); end
  def action_has_layout?; end
  def initialize(*arg0); end
  extend ActiveSupport::Concern
  include ActionView::Rendering
end
module ActionView::Layouts::ClassMethods
  def _implied_layout_name; end
  def _write_layout_method; end
  def inherited(klass); end
  def layout(layout, conditions = nil); end
end
module ActionView::Layouts::ClassMethods::LayoutConditions
  def _conditional_layout?; end
end
module ActionController::Rendering
  def _normalize_args(action = nil, options = nil, &blk); end
  def _normalize_options(options); end
  def _normalize_text(options); end
  def _process_options(options); end
  def _process_variant(options); end
  def _render_in_priorities(options); end
  def _set_html_content_type; end
  def _set_rendered_content_type(format); end
  def process_action(*arg0); end
  def render(*args); end
  def render_to_body(options = nil); end
  def render_to_string(*arg0); end
  extend ActiveSupport::Concern
end
module ActionController::Rendering::ClassMethods
  def inherited(klass); end
  def render(*args, &block); end
  def renderer; end
  def setup_renderer!; end
end
class ActionController::MissingRenderer < LoadError
  def initialize(format); end
end
module ActionController::Renderers
  def _render_to_body_with_renderer(options); end
  def _render_with_renderer_js(js, options); end
  def _render_with_renderer_json(json, options); end
  def _render_with_renderer_xml(xml, options); end
  def render_to_body(options); end
  def self._render_with_renderer_method_name(key); end
  def self.add(key, &block); end
  def self.remove(key); end
  extend ActiveSupport::Concern
end
module ActionController::Renderers::All
  extend ActiveSupport::Concern
  include ActionController::Renderers
end
module ActionController::Renderers::ClassMethods
  def use_renderer(*args); end
  def use_renderers(*args); end
end
module ActionController::Head
  def head(status, options = nil); end
  def include_content?(status); end
end
module ActionController::ConditionalGet
  def combine_etags(validator, options); end
  def expires_in(seconds, options = nil); end
  def expires_now; end
  def fresh_when(object = nil, etag: nil, weak_etag: nil, strong_etag: nil, last_modified: nil, public: nil, template: nil); end
  def http_cache_forever(public: nil); end
  def stale?(object = nil, **freshness_kwargs); end
  extend ActiveSupport::Concern
  include ActionController::Head
end
module ActionController::ConditionalGet::ClassMethods
  def etag(&etagger); end
end
module ActionController::EtagWithTemplateDigest
  def determine_template_etag(options); end
  def lookup_and_digest_template(template); end
  def pick_template_for_etag(options); end
  extend ActiveSupport::Concern
  include ActionController::ConditionalGet
end
module ActionController::EtagWithFlash
  extend ActiveSupport::Concern
  include ActionController::ConditionalGet
end
module ActionController::Caching
  def instrument_name; end
  def instrument_payload(key); end
  extend ActiveSupport::Autoload
  extend ActiveSupport::Concern
end
module AbstractController::Collector
  def atom(*args, &block); end
  def bmp(*args, &block); end
  def css(*args, &block); end
  def csv(*args, &block); end
  def gif(*args, &block); end
  def gzip(*args, &block); end
  def html(*args, &block); end
  def ics(*args, &block); end
  def jpeg(*args, &block); end
  def js(*args, &block); end
  def json(*args, &block); end
  def m4a(*args, &block); end
  def method_missing(symbol, &block); end
  def mp3(*args, &block); end
  def mp4(*args, &block); end
  def mpeg(*args, &block); end
  def multipart_form(*args, &block); end
  def ogg(*args, &block); end
  def otf(*args, &block); end
  def pdf(*args, &block); end
  def png(*args, &block); end
  def rss(*args, &block); end
  def self.generate_method_for_mime(mime); end
  def svg(*args, &block); end
  def text(*args, &block); end
  def tiff(*args, &block); end
  def ttf(*args, &block); end
  def url_encoded_form(*args, &block); end
  def vcf(*args, &block); end
  def vtt(*args, &block); end
  def webm(*args, &block); end
  def woff(*args, &block); end
  def woff2(*args, &block); end
  def xml(*args, &block); end
  def yaml(*args, &block); end
  def zip(*args, &block); end
end
module ActionController::MimeResponds
  def respond_to(*mimes); end
end
class ActionController::MimeResponds::Collector
  def all(*args, &block); end
  def any(*args, &block); end
  def custom(mime_type, &block); end
  def format; end
  def format=(arg0); end
  def initialize(mimes, variant = nil); end
  def negotiate_format(request); end
  def response; end
  include AbstractController::Collector
end
class ActionController::MimeResponds::Collector::VariantCollector
  def all(*args, &block); end
  def any(*args, &block); end
  def initialize(variant = nil); end
  def method_missing(name, *args, &block); end
  def variant; end
  def variant_key; end
end
module ActionController::BasicImplicitRender
  def default_render; end
  def send_action(method, *args); end
end
module ActionController::ImplicitRender
  def default_render; end
  def interactive_browser_request?; end
  def method_for_action(action_name); end
  include ActionController::BasicImplicitRender
end
module ActionController::ParameterEncoding
  extend ActiveSupport::Concern
end
module ActionController::ParameterEncoding::ClassMethods
  def binary_params_for?(action); end
  def inherited(klass); end
  def setup_param_encode; end
  def skip_parameter_encoding(action); end
end
module ActionController::Cookies
  def cookies; end
  extend ActiveSupport::Concern
end
module ActionController::Flash
  def redirect_to(options = nil, response_options_and_flash = nil); end
  extend ActiveSupport::Concern
end
module ActionController::Flash::ClassMethods
  def add_flash_types(*types); end
end
module ActionController::FormBuilder
  def default_form_builder; end
  extend ActiveSupport::Concern
end
module ActionController::FormBuilder::ClassMethods
  def default_form_builder(builder); end
end
module AbstractController::Callbacks
  def process_action(*args); end
  extend ActiveSupport::Concern
  include ActiveSupport::Callbacks
end
module AbstractController::Callbacks::ClassMethods
  def _insert_callbacks(callbacks, block = nil); end
  def _normalize_callback_option(options, from, to); end
  def _normalize_callback_options(options); end
  def after_action(*names, &blk); end
  def append_after_action(*names, &blk); end
  def append_around_action(*names, &blk); end
  def append_before_action(*names, &blk); end
  def around_action(*names, &blk); end
  def before_action(*names, &blk); end
  def prepend_after_action(*names, &blk); end
  def prepend_around_action(*names, &blk); end
  def prepend_before_action(*names, &blk); end
  def skip_after_action(*names); end
  def skip_around_action(*names); end
  def skip_before_action(*names); end
end
class ActionDispatch::Cookies
  def call(env); end
  def initialize(app); end
end
class ActionDispatch::Cookies::CookieOverflow < StandardError
end
module ActionDispatch::Cookies::ChainedCookieJars
  def encrypted; end
  def encrypted_cookie_cipher; end
  def permanent; end
  def signed; end
  def signed_cookie_digest; end
  def signed_or_encrypted; end
  def upgrade_legacy_hmac_aes_cbc_cookies?; end
end
class ActionDispatch::Cookies::CookieJar
  def [](name); end
  def []=(name, options); end
  def always_write_cookie; end
  def always_write_cookie=(obj); end
  def clear(options = nil); end
  def commit!; end
  def committed?; end
  def delete(name, options = nil); end
  def deleted?(name, options = nil); end
  def each(&block); end
  def escape(string); end
  def fetch(name, *args, &block); end
  def handle_options(options); end
  def has_key?(name); end
  def initialize(request); end
  def key?(name); end
  def make_set_cookie_header(header); end
  def request; end
  def self.always_write_cookie; end
  def self.always_write_cookie=(obj); end
  def self.build(req, cookies); end
  def to_hash(*arg0); end
  def to_header; end
  def update(other_hash); end
  def update_cookies_from_jar; end
  def write(headers); end
  def write_cookie?(cookie); end
  include Enumerable
end
class ActionDispatch::Cookies::AbstractCookieJar
  def [](name); end
  def []=(name, options); end
  def commit(name, options); end
  def cookie_metadata(name, options); end
  def expiry_options(options); end
  def initialize(parent_jar); end
  def parse(name, data, purpose: nil); end
  def request; end
  include ActionDispatch::Cookies::ChainedCookieJars
end
class ActionDispatch::Cookies::PermanentCookieJar < ActionDispatch::Cookies::AbstractCookieJar
  def commit(name, options); end
end
class ActionDispatch::Cookies::JsonSerializer
  def self.dump(value); end
  def self.load(value); end
end
module ActionDispatch::Cookies::SerializedCookieJars
  def deserialize(name); end
  def digest; end
  def needs_migration?(value); end
  def serialize(value); end
  def serializer; end
end
class ActionDispatch::Cookies::SignedKeyRotatingCookieJar < ActionDispatch::Cookies::AbstractCookieJar
  def commit(name, options); end
  def initialize(parent_jar); end
  def parse(name, signed_message, purpose: nil); end
  include ActionDispatch::Cookies::SerializedCookieJars
end
class ActionDispatch::Cookies::EncryptedKeyRotatingCookieJar < ActionDispatch::Cookies::AbstractCookieJar
  def commit(name, options); end
  def initialize(parent_jar); end
  def parse(name, encrypted_message, purpose: nil); end
  include ActionDispatch::Cookies::SerializedCookieJars
end
class ActionController::InvalidAuthenticityToken < ActionController::ActionControllerError
end
class ActionController::InvalidCrossOriginRequest < ActionController::ActionControllerError
end
module ActionController::RequestForgeryProtection
  def any_authenticity_token_valid?; end
  def compare_with_real_token(token, session); end
  def form_authenticity_param; end
  def form_authenticity_token(form_options: nil); end
  def handle_unverified_request; end
  def mark_for_same_origin_verification!; end
  def marked_for_same_origin_verification?; end
  def masked_authenticity_token(session, form_options: nil); end
  def non_xhr_javascript_response?; end
  def normalize_action_path(action_path); end
  def per_form_csrf_token(session, action_path, method); end
  def protect_against_forgery?; end
  def real_csrf_token(session); end
  def request_authenticity_tokens; end
  def unmask_token(masked_token); end
  def valid_authenticity_token?(session, encoded_masked_token); end
  def valid_per_form_csrf_token?(token, session); end
  def valid_request_origin?; end
  def verified_request?; end
  def verify_authenticity_token; end
  def verify_same_origin_request; end
  def xor_byte_strings(s1, s2); end
  extend ActiveSupport::Concern
  include AbstractController::Callbacks
  include AbstractController::Helpers
end
module ActionController::RequestForgeryProtection::ClassMethods
  def protect_from_forgery(options = nil); end
  def protection_method_class(name); end
  def skip_forgery_protection(options = nil); end
end
module ActionController::RequestForgeryProtection::ProtectionMethods
end
class ActionController::RequestForgeryProtection::ProtectionMethods::NullSession
  def handle_unverified_request; end
  def initialize(controller); end
end
class ActionController::RequestForgeryProtection::ProtectionMethods::NullSession::NullSessionHash < Rack::Session::Abstract::SessionHash
  def destroy; end
  def exists?; end
  def initialize(req); end
end
class ActionController::RequestForgeryProtection::ProtectionMethods::NullSession::NullCookieJar < ActionDispatch::Cookies::CookieJar
  def write(*arg0); end
end
class ActionController::RequestForgeryProtection::ProtectionMethods::ResetSession
  def handle_unverified_request; end
  def initialize(controller); end
end
class ActionController::RequestForgeryProtection::ProtectionMethods::Exception
  def handle_unverified_request; end
  def initialize(controller); end
end
module ActionController::ContentSecurityPolicy
  def content_security_policy?; end
  def content_security_policy_nonce; end
  def current_content_security_policy; end
  extend ActiveSupport::Concern
  include AbstractController::Callbacks
  include AbstractController::Helpers
end
module ActionController::ContentSecurityPolicy::ClassMethods
  def content_security_policy(enabled = nil, **options, &block); end
  def content_security_policy_report_only(report_only = nil, **options); end
end
module ActionController::ForceSSL
  def force_ssl_redirect(host_or_options = nil); end
  extend ActiveSupport::Concern
  include AbstractController::Callbacks
end
module ActionController::ForceSSL::ClassMethods
  def force_ssl(options = nil); end
end
module ActionController::Streaming
  def _process_options(options); end
  def _render_template(options); end
  extend ActiveSupport::Concern
end
class ActionDispatch::Http::ContentDisposition
  def ascii_filename; end
  def disposition; end
  def filename; end
  def initialize(disposition:, filename:); end
  def percent_escape(string, pattern); end
  def self.format(disposition:, filename:); end
  def to_s; end
  def utf8_filename; end
end
module ActionController::DataStreaming
  def send_data(data, options = nil); end
  def send_file(path, options = nil); end
  def send_file_headers!(options); end
  extend ActiveSupport::Concern
  include ActionController::Rendering
end
module ActionController::HttpAuthentication
end
module ActionController::HttpAuthentication::Basic
  def auth_param(request); end
  def auth_scheme(request); end
  def authenticate(request, &login_procedure); end
  def authentication_request(controller, realm, message); end
  def decode_credentials(request); end
  def encode_credentials(user_name, password); end
  def has_basic_credentials?(request); end
  def user_name_and_password(request); end
  extend ActionController::HttpAuthentication::Basic
end
module ActionController::HttpAuthentication::Basic::ControllerMethods
  def authenticate_or_request_with_http_basic(realm = nil, message = nil, &login_procedure); end
  def authenticate_with_http_basic(&login_procedure); end
  def http_basic_authenticate_or_request_with(name:, password:, realm: nil, message: nil); end
  def request_http_basic_authentication(realm = nil, message = nil); end
  extend ActiveSupport::Concern
end
module ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods
  def http_basic_authenticate_with(name:, password:, realm: nil, **options); end
end
module ActionController::HttpAuthentication::Digest
  def authenticate(request, realm, &password_procedure); end
  def authentication_header(controller, realm); end
  def authentication_request(controller, realm, message = nil); end
  def decode_credentials(header); end
  def decode_credentials_header(request); end
  def encode_credentials(http_method, credentials, password, password_is_ha1); end
  def expected_response(http_method, uri, credentials, password, password_is_ha1 = nil); end
  def ha1(credentials, password); end
  def nonce(secret_key, time = nil); end
  def opaque(secret_key); end
  def secret_token(request); end
  def validate_digest_response(request, realm, &password_procedure); end
  def validate_nonce(secret_key, request, value, seconds_to_timeout = nil); end
  extend ActionController::HttpAuthentication::Digest
end
module ActionController::HttpAuthentication::Digest::ControllerMethods
  def authenticate_or_request_with_http_digest(realm = nil, message = nil, &password_procedure); end
  def authenticate_with_http_digest(realm = nil, &password_procedure); end
  def request_http_digest_authentication(realm = nil, message = nil); end
end
module ActionController::HttpAuthentication::Token
  def authenticate(controller, &login_procedure); end
  def authentication_request(controller, realm, message = nil); end
  def encode_credentials(token, options = nil); end
  def params_array_from(raw_params); end
  def raw_params(auth); end
  def rewrite_param_values(array_params); end
  def token_and_options(request); end
  def token_params_from(auth); end
  extend ActionController::HttpAuthentication::Token
end
module ActionController::HttpAuthentication::Token::ControllerMethods
  def authenticate_or_request_with_http_token(realm = nil, message = nil, &login_procedure); end
  def authenticate_with_http_token(&login_procedure); end
  def request_http_token_authentication(realm = nil, message = nil); end
end
module ActionController::DefaultHeaders
  extend ActiveSupport::Concern
end
module ActionController::DefaultHeaders::ClassMethods
  def make_response!(request); end
end
module ActiveSupport::Rescuable
  def handler_for_rescue(exception); end
  def rescue_with_handler(exception); end
  extend ActiveSupport::Concern
end
module ActiveSupport::Rescuable::ClassMethods
  def constantize_rescue_handler_class(class_or_name); end
  def find_rescue_handler(exception); end
  def handler_for_rescue(exception, object: nil); end
  def rescue_from(*klasses, with: nil, &block); end
  def rescue_with_handler(exception, object: nil, visited_exceptions: nil); end
end
module ActionController::Rescue
  def process_action(*args); end
  def show_detailed_exceptions?; end
  extend ActiveSupport::Concern
  include ActiveSupport::Rescuable
end
module ActionController::Instrumentation
  def append_info_to_payload(payload); end
  def cleanup_view_runtime; end
  def halted_callback_hook(filter); end
  def process_action(*args); end
  def redirect_to(*args); end
  def render(*args); end
  def send_data(data, options = nil); end
  def send_file(path, options = nil); end
  def view_runtime; end
  def view_runtime=(arg0); end
  extend ActiveSupport::Concern
  include AbstractController::Logger
end
module ActionController::Instrumentation::ClassMethods
  def log_process_action(payload); end
end
class ActionView::PathSet
  def +(array); end
  def <<(*args); end
  def [](*args, &block); end
  def _find_all(path, prefixes, args); end
  def compact; end
  def concat(*args); end
  def each(*args, &block); end
  def exists?(path, prefixes, *args); end
  def find(*args); end
  def find_all(path, prefixes = nil, *args); end
  def find_all_with_query(query); end
  def find_file(*args, &block); end
  def include?(*args, &block); end
  def initialize(paths = nil); end
  def initialize_copy(other); end
  def insert(*args); end
  def paths; end
  def pop(*args, &block); end
  def push(*args); end
  def size(*args, &block); end
  def to_ary; end
  def typecast(paths); end
  def unshift(*args); end
  include Enumerable
end
module AbstractController::Caching
  def cache(key, options = nil, &block); end
  def view_cache_dependencies; end
  extend ActiveSupport::Autoload
  extend ActiveSupport::Concern
  include AbstractController::Caching::ConfigMethods
  include AbstractController::Caching::Fragments
end
module AbstractController::Caching::Fragments
  def combined_fragment_cache_key(key); end
  def expire_fragment(key, options = nil); end
  def fragment_exist?(key, options = nil); end
  def instrument_fragment_cache(name, key); end
  def read_fragment(key, options = nil); end
  def write_fragment(key, content, options = nil); end
  extend ActiveSupport::Concern
end
module AbstractController::Caching::Fragments::ClassMethods
  def fragment_cache_key(value = nil, &key); end
end
module AbstractController::Caching::ConfigMethods
  def cache_configured?; end
  def cache_store; end
  def cache_store=(store); end
end
module AbstractController::Caching::ClassMethods
  def view_cache_dependency(&dependency); end
end
class ActionController::Renderer
  def controller; end
  def defaults; end
  def initialize(controller, env, defaults); end
  def new(env = nil); end
  def normalize_keys(env); end
  def rack_key_for(key); end
  def rack_value_for(key, value); end
  def render(*args); end
  def self.for(controller, env = nil, defaults = nil); end
  def with_defaults(defaults); end
end
class ActionController::Base < ActionController::Metal
  def __callbacks; end
  def __callbacks?; end
  def _helper_methods; end
  def _helper_methods=(val); end
  def _helper_methods?; end
  def _helpers; end
  def _helpers=(val); end
  def _helpers?; end
  def _layout(lookup_context, formats); end
  def _process_action_callbacks; end
  def _protected_ivars; end
  def _renderers; end
  def _renderers=(val); end
  def _renderers?; end
  def _run_process_action_callbacks(&block); end
  def _view_cache_dependencies; end
  def _view_cache_dependencies=(val); end
  def _view_cache_dependencies?; end
  def _wrapper_options; end
  def _wrapper_options=(val); end
  def _wrapper_options?; end
  def alert; end
  def allow_forgery_protection; end
  def allow_forgery_protection=(value); end
  def asset_host; end
  def asset_host=(value); end
  def assets_dir; end
  def assets_dir=(value); end
  def default_asset_host_protocol; end
  def default_asset_host_protocol=(value); end
  def default_protect_from_forgery; end
  def default_protect_from_forgery=(value); end
  def default_static_extension; end
  def default_static_extension=(value); end
  def default_url_options; end
  def default_url_options=(val); end
  def default_url_options?; end
  def enable_fragment_cache_logging; end
  def enable_fragment_cache_logging=(value); end
  def etag_with_template_digest; end
  def etag_with_template_digest=(val); end
  def etag_with_template_digest?; end
  def etaggers; end
  def etaggers=(val); end
  def etaggers?; end
  def flash(*args, &block); end
  def forgery_protection_origin_check; end
  def forgery_protection_origin_check=(value); end
  def forgery_protection_strategy; end
  def forgery_protection_strategy=(value); end
  def fragment_cache_keys; end
  def fragment_cache_keys=(val); end
  def fragment_cache_keys?; end
  def helpers_path; end
  def helpers_path=(val); end
  def helpers_path?; end
  def include_all_helpers; end
  def include_all_helpers=(val); end
  def include_all_helpers?; end
  def javascripts_dir; end
  def javascripts_dir=(value); end
  def log_warning_on_csrf_failure; end
  def log_warning_on_csrf_failure=(value); end
  def logger; end
  def logger=(value); end
  def notice; end
  def per_form_csrf_tokens; end
  def per_form_csrf_tokens=(value); end
  def perform_caching; end
  def perform_caching=(value); end
  def relative_url_root; end
  def relative_url_root=(value); end
  def request_forgery_protection_token; end
  def request_forgery_protection_token=(value); end
  def rescue_handlers; end
  def rescue_handlers=(val); end
  def rescue_handlers?; end
  def self.__callbacks; end
  def self.__callbacks=(val); end
  def self.__callbacks?; end
  def self._default_form_builder; end
  def self._default_form_builder=(val); end
  def self._default_form_builder?; end
  def self._flash_types; end
  def self._flash_types=(val); end
  def self._flash_types?; end
  def self._helper_methods; end
  def self._helper_methods=(val); end
  def self._helper_methods?; end
  def self._helpers; end
  def self._helpers=(val); end
  def self._helpers?; end
  def self._layout; end
  def self._layout=(val); end
  def self._layout?; end
  def self._layout_conditions; end
  def self._layout_conditions=(val); end
  def self._layout_conditions?; end
  def self._process_action_callbacks; end
  def self._process_action_callbacks=(value); end
  def self._renderers; end
  def self._renderers=(val); end
  def self._renderers?; end
  def self._view_cache_dependencies; end
  def self._view_cache_dependencies=(val); end
  def self._view_cache_dependencies?; end
  def self._wrapper_options; end
  def self._wrapper_options=(val); end
  def self._wrapper_options?; end
  def self.allow_forgery_protection; end
  def self.allow_forgery_protection=(value); end
  def self.asset_host; end
  def self.asset_host=(value); end
  def self.assets_dir; end
  def self.assets_dir=(value); end
  def self.default_asset_host_protocol; end
  def self.default_asset_host_protocol=(value); end
  def self.default_protect_from_forgery; end
  def self.default_protect_from_forgery=(value); end
  def self.default_static_extension; end
  def self.default_static_extension=(value); end
  def self.default_url_options; end
  def self.default_url_options=(val); end
  def self.default_url_options?; end
  def self.enable_fragment_cache_logging; end
  def self.enable_fragment_cache_logging=(value); end
  def self.etag_with_template_digest; end
  def self.etag_with_template_digest=(val); end
  def self.etag_with_template_digest?; end
  def self.etaggers; end
  def self.etaggers=(val); end
  def self.etaggers?; end
  def self.forgery_protection_origin_check; end
  def self.forgery_protection_origin_check=(value); end
  def self.forgery_protection_strategy; end
  def self.forgery_protection_strategy=(value); end
  def self.fragment_cache_keys; end
  def self.fragment_cache_keys=(val); end
  def self.fragment_cache_keys?; end
  def self.helpers_path; end
  def self.helpers_path=(val); end
  def self.helpers_path?; end
  def self.include_all_helpers; end
  def self.include_all_helpers=(val); end
  def self.include_all_helpers?; end
  def self.javascripts_dir; end
  def self.javascripts_dir=(value); end
  def self.log_warning_on_csrf_failure; end
  def self.log_warning_on_csrf_failure=(value); end
  def self.logger; end
  def self.logger=(value); end
  def self.middleware_stack; end
  def self.per_form_csrf_tokens; end
  def self.per_form_csrf_tokens=(value); end
  def self.perform_caching; end
  def self.perform_caching=(value); end
  def self.relative_url_root; end
  def self.relative_url_root=(value); end
  def self.request_forgery_protection_token; end
  def self.request_forgery_protection_token=(value); end
  def self.rescue_handlers; end
  def self.rescue_handlers=(val); end
  def self.rescue_handlers?; end
  def self.stylesheets_dir; end
  def self.stylesheets_dir=(value); end
  def self.without_modules(*modules); end
  def stylesheets_dir; end
  def stylesheets_dir=(value); end
  extend AbstractController::Caching::ClassMethods
  extend AbstractController::Caching::ConfigMethods
  extend AbstractController::Caching::Fragments::ClassMethods
  extend AbstractController::Callbacks::ClassMethods
  extend AbstractController::Helpers::ClassMethods
  extend AbstractController::UrlFor::ClassMethods
  extend ActionController::ConditionalGet::ClassMethods
  extend ActionController::ContentSecurityPolicy::ClassMethods
  extend ActionController::DefaultHeaders::ClassMethods
  extend ActionController::Flash::ClassMethods
  extend ActionController::ForceSSL::ClassMethods
  extend ActionController::FormBuilder::ClassMethods
  extend ActionController::Helpers::ClassMethods
  extend ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods
  extend ActionController::Instrumentation::ClassMethods
  extend ActionController::ParameterEncoding::ClassMethods
  extend ActionController::ParamsWrapper::ClassMethods
  extend ActionController::Renderers::ClassMethods
  extend ActionController::Rendering::ClassMethods
  extend ActionController::RequestForgeryProtection::ClassMethods
  extend ActionView::Layouts::ClassMethods
  extend ActionView::Rendering::ClassMethods
  extend ActionView::ViewPaths::ClassMethods
  extend ActiveSupport::Callbacks::ClassMethods
  extend ActiveSupport::DescendantsTracker
  extend ActiveSupport::Rescuable::ClassMethods
  include AbstractController::AssetPaths
  include AbstractController::Caching
  include AbstractController::Caching::Fragments
  include AbstractController::Callbacks
  include AbstractController::Callbacks
  include AbstractController::Callbacks
  include AbstractController::Callbacks
  include AbstractController::Helpers
  include AbstractController::Helpers
  include AbstractController::Helpers
  include AbstractController::Logger
  include AbstractController::Logger
  include AbstractController::Rendering
  include AbstractController::Translation
  include AbstractController::UrlFor
  include ActionController::Caching
  include ActionController::ConditionalGet
  include ActionController::ConditionalGet
  include ActionController::ConditionalGet
  include ActionController::ContentSecurityPolicy
  include ActionController::Cookies
  include ActionController::DataStreaming
  include ActionController::DefaultHeaders
  include ActionController::EtagWithFlash
  include ActionController::EtagWithTemplateDigest
  include ActionController::Flash
  include ActionController::ForceSSL
  include ActionController::FormBuilder
  include ActionController::Helpers
  include ActionController::HttpAuthentication::Basic::ControllerMethods
  include ActionController::HttpAuthentication::Digest::ControllerMethods
  include ActionController::HttpAuthentication::Token::ControllerMethods
  include ActionController::ImplicitRender
  include ActionController::Instrumentation
  include ActionController::MimeResponds
  include ActionController::ParameterEncoding
  include ActionController::ParamsWrapper
  include ActionController::Redirecting
  include ActionController::Renderers
  include ActionController::Renderers::All
  include ActionController::Rendering
  include ActionController::Rendering
  include ActionController::RequestForgeryProtection
  include ActionController::Rescue
  include ActionController::Streaming
  include ActionController::StrongParameters
  include ActionController::UrlFor
  include ActionController::UrlFor
  include ActionDispatch::Routing::UrlFor
  include ActionView::Layouts
  include ActionView::Rendering
  include ActionView::ViewPaths
  include ActionView::ViewPaths
  include ActiveSupport::Benchmarkable
  include ActiveSupport::Callbacks
  include ActiveSupport::Rescuable
end
module ActionController::Base::HelperMethods
  def alert(*args, &blk); end
  def combined_fragment_cache_key(*args, &blk); end
  def content_security_policy?(*args, &blk); end
  def content_security_policy_nonce(*args, &blk); end
  def cookies(*args, &blk); end
  def form_authenticity_token(*args, &blk); end
  def notice(*args, &blk); end
  def protect_against_forgery?(*args, &blk); end
  def view_cache_dependencies(*args, &blk); end
end
module ActionDispatch::Journey
end
class ActionDispatch::Journey::Router
  def ast; end
  def custom_routes; end
  def eager_load!; end
  def filter_routes(path); end
  def find_routes(req); end
  def initialize(routes); end
  def match_head_routes(routes, req); end
  def match_routes(routes, req); end
  def partitioned_routes; end
  def recognize(rails_req); end
  def routes; end
  def routes=(arg0); end
  def serve(req); end
  def simulator; end
  def visualizer; end
end
class ActionDispatch::Journey::Router::Utils
  def self.escape_fragment(fragment); end
  def self.escape_path(path); end
  def self.escape_segment(segment); end
  def self.normalize_path(path); end
  def self.unescape_uri(uri); end
end
class ActionDispatch::Journey::Router::Utils::UriEncoder
  def escape(component, pattern); end
  def escape_fragment(fragment); end
  def escape_path(path); end
  def escape_segment(segment); end
  def percent_encode(unsafe); end
  def unescape_uri(uri); end
end
class ActionDispatch::Journey::Routes
  def add_route(name, mapping); end
  def anchored_routes; end
  def ast; end
  def clear; end
  def clear_cache!; end
  def custom_routes; end
  def each(&block); end
  def empty?; end
  def initialize; end
  def last; end
  def length; end
  def partition_route(route); end
  def routes; end
  def simulator; end
  def size; end
  include Enumerable
end
class ActionDispatch::Journey::Formatter
  def build_cache; end
  def cache; end
  def clear; end
  def extract_parameterized_parts(route, options, recall, parameterize = nil); end
  def generate(name, options, path_parameters, parameterize = nil); end
  def initialize(routes); end
  def match_route(name, options); end
  def missing_keys(route, parts); end
  def named_routes; end
  def non_recursive(cache, options); end
  def possibles(cache, options, depth = nil); end
  def routes; end
end
module ActionDispatch::Journey::Formatter::RegexCaseComparator
  def self.===(regex); end
end
class ActionDispatch::Journey::Scanner
  def dedup_scan(regex); end
  def eos?; end
  def initialize; end
  def next_token; end
  def pos; end
  def pre_match; end
  def scan; end
  def scan_setup(str); end
end
class ActionDispatch::Journey::Format
  def evaluate(hash); end
  def initialize(parts); end
  def self.required_path(symbol); end
  def self.required_segment(symbol); end
end
class ActionDispatch::Journey::Format::Parameter < Struct
  def escape(value); end
  def escaper; end
  def escaper=(_); end
  def name; end
  def name=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
module ActionDispatch::Journey::Visitors
end
class ActionDispatch::Journey::Visitors::Visitor
  def accept(node); end
  def binary(node); end
  def nary(node); end
  def terminal(node); end
  def unary(node); end
  def visit(node); end
  def visit_CAT(n); end
  def visit_DOT(n); end
  def visit_GROUP(n); end
  def visit_LITERAL(n); end
  def visit_OR(n); end
  def visit_SLASH(n); end
  def visit_STAR(n); end
  def visit_SYMBOL(n); end
end
class ActionDispatch::Journey::Visitors::FunctionalVisitor
  def accept(node, seed); end
  def binary(node, seed); end
  def nary(node, seed); end
  def terminal(node, seed); end
  def unary(node, seed); end
  def visit(node, seed); end
  def visit_CAT(n, seed); end
  def visit_DOT(n, seed); end
  def visit_GROUP(n, seed); end
  def visit_LITERAL(n, seed); end
  def visit_OR(n, seed); end
  def visit_SLASH(n, seed); end
  def visit_STAR(n, seed); end
  def visit_SYMBOL(n, seed); end
end
class ActionDispatch::Journey::Visitors::FormatBuilder < ActionDispatch::Journey::Visitors::Visitor
  def accept(node); end
  def binary(node); end
  def terminal(node); end
  def visit_GROUP(n); end
  def visit_STAR(n); end
  def visit_SYMBOL(n); end
end
class ActionDispatch::Journey::Visitors::Each < ActionDispatch::Journey::Visitors::FunctionalVisitor
  def visit(node, block); end
end
class ActionDispatch::Journey::Visitors::String < ActionDispatch::Journey::Visitors::FunctionalVisitor
  def binary(node, seed); end
  def nary(node, seed); end
  def terminal(node, seed); end
  def visit_GROUP(node, seed); end
end
class ActionDispatch::Journey::Visitors::Dot < ActionDispatch::Journey::Visitors::FunctionalVisitor
  def accept(node, seed = nil); end
  def binary(node, seed); end
  def initialize; end
  def nary(node, seed); end
  def terminal(node, seed); end
  def unary(node, seed); end
  def visit_CAT(node, seed); end
  def visit_GROUP(node, seed); end
  def visit_OR(node, seed); end
  def visit_STAR(node, seed); end
end
module ActionDispatch::Journey::Nodes
end
class ActionDispatch::Journey::Nodes::Node
  def cat?; end
  def each(&block); end
  def group?; end
  def initialize(left); end
  def left; end
  def left=(arg0); end
  def literal?; end
  def memo; end
  def memo=(arg0); end
  def name; end
  def star?; end
  def symbol?; end
  def terminal?; end
  def to_dot; end
  def to_s; end
  def to_sym; end
  def type; end
  include Enumerable
end
class ActionDispatch::Journey::Nodes::Terminal < ActionDispatch::Journey::Nodes::Node
  def symbol; end
  def terminal?; end
end
class ActionDispatch::Journey::Nodes::Literal < ActionDispatch::Journey::Nodes::Terminal
  def literal?; end
  def type; end
end
class ActionDispatch::Journey::Nodes::Dummy < ActionDispatch::Journey::Nodes::Literal
  def initialize(x = nil); end
  def literal?; end
end
class ActionDispatch::Journey::Nodes::Slash < ActionDispatch::Journey::Nodes::Terminal
  def type; end
end
class ActionDispatch::Journey::Nodes::Dot < ActionDispatch::Journey::Nodes::Terminal
  def type; end
end
class ActionDispatch::Journey::Nodes::Symbol < ActionDispatch::Journey::Nodes::Terminal
  def default_regexp?; end
  def initialize(left); end
  def name; end
  def regexp; end
  def regexp=(arg0); end
  def symbol; end
  def symbol?; end
  def type; end
end
class ActionDispatch::Journey::Nodes::Unary < ActionDispatch::Journey::Nodes::Node
  def children; end
end
class ActionDispatch::Journey::Nodes::Group < ActionDispatch::Journey::Nodes::Unary
  def group?; end
  def type; end
end
class ActionDispatch::Journey::Nodes::Star < ActionDispatch::Journey::Nodes::Unary
  def name; end
  def star?; end
  def type; end
end
class ActionDispatch::Journey::Nodes::Binary < ActionDispatch::Journey::Nodes::Node
  def children; end
  def initialize(left, right); end
  def right; end
  def right=(arg0); end
end
class ActionDispatch::Journey::Nodes::Cat < ActionDispatch::Journey::Nodes::Binary
  def cat?; end
  def type; end
end
class ActionDispatch::Journey::Nodes::Or < ActionDispatch::Journey::Nodes::Node
  def children; end
  def initialize(children); end
  def type; end
end
class ActionDispatch::Journey::Parser < Racc::Parser
  def _reduce_1(val, _values); end
  def _reduce_10(val, _values); end
  def _reduce_15(val, _values); end
  def _reduce_16(val, _values); end
  def _reduce_17(val, _values); end
  def _reduce_18(val, _values); end
  def _reduce_2(val, _values); end
  def _reduce_7(val, _values); end
  def _reduce_8(val, _values); end
  def _reduce_9(val, _values); end
  def _reduce_none(val, _values); end
  def initialize; end
  def next_token; end
  def parse(string); end
  def self.parse(string); end
  include ActionDispatch::Journey::Nodes
end
class ActionDispatch::Journey::Route
  def app; end
  def ast; end
  def conditions; end
  def constraints; end
  def defaults; end
  def dispatcher?; end
  def eager_load!; end
  def format(path_options); end
  def glob?; end
  def initialize(name:, path:, app: nil, constraints: nil, required_defaults: nil, defaults: nil, request_method_match: nil, precedence: nil, scope_options: nil, internal: nil); end
  def internal; end
  def ip; end
  def match_verb(request); end
  def matches?(request); end
  def name; end
  def parts; end
  def path; end
  def precedence; end
  def required_default?(key); end
  def required_defaults; end
  def required_keys; end
  def required_parts; end
  def requirements; end
  def requires_matching_verb?; end
  def scope_options; end
  def score(supplied_keys); end
  def segment_keys; end
  def segments; end
  def self.verb_matcher(verb); end
  def verb; end
  def verbs; end
end
module ActionDispatch::Journey::Route::VerbMatchers
end
class ActionDispatch::Journey::Route::VerbMatchers::DELETE
  def self.call(req); end
  def self.verb; end
end
class ActionDispatch::Journey::Route::VerbMatchers::GET
  def self.call(req); end
  def self.verb; end
end
class ActionDispatch::Journey::Route::VerbMatchers::HEAD
  def self.call(req); end
  def self.verb; end
end
class ActionDispatch::Journey::Route::VerbMatchers::OPTIONS
  def self.call(req); end
  def self.verb; end
end
class ActionDispatch::Journey::Route::VerbMatchers::LINK
  def self.call(req); end
  def self.verb; end
end
class ActionDispatch::Journey::Route::VerbMatchers::PATCH
  def self.call(req); end
  def self.verb; end
end
class ActionDispatch::Journey::Route::VerbMatchers::POST
  def self.call(req); end
  def self.verb; end
end
class ActionDispatch::Journey::Route::VerbMatchers::PUT
  def self.call(req); end
  def self.verb; end
end
class ActionDispatch::Journey::Route::VerbMatchers::TRACE
  def self.call(req); end
  def self.verb; end
end
class ActionDispatch::Journey::Route::VerbMatchers::UNLINK
  def self.call(req); end
  def self.verb; end
end
class ActionDispatch::Journey::Route::VerbMatchers::Unknown
  def call(request); end
  def initialize(verb); end
  def verb; end
end
class ActionDispatch::Journey::Route::VerbMatchers::All
  def self.call(_); end
  def self.verb; end
end
module ActionDispatch::Journey::Path
end
class ActionDispatch::Journey::Path::Pattern
  def =~(other); end
  def anchored; end
  def ast; end
  def build_formatter; end
  def eager_load!; end
  def initialize(ast, requirements, separators, anchored); end
  def match(other); end
  def names; end
  def offsets; end
  def optional_names; end
  def regexp_visitor; end
  def required_names; end
  def requirements; end
  def self.build(path, requirements, separators, anchored); end
  def self.from_string(string); end
  def source; end
  def spec; end
  def to_regexp; end
end
class ActionDispatch::Journey::Path::Pattern::AnchoredRegexp < ActionDispatch::Journey::Visitors::Visitor
  def accept(node); end
  def initialize(separator, matchers); end
  def visit_CAT(node); end
  def visit_DOT(node); end
  def visit_GROUP(node); end
  def visit_LITERAL(node); end
  def visit_OR(node); end
  def visit_SLASH(node); end
  def visit_STAR(node); end
  def visit_SYMBOL(node); end
end
class ActionDispatch::Journey::Path::Pattern::UnanchoredRegexp < ActionDispatch::Journey::Path::Pattern::AnchoredRegexp
  def accept(node); end
end
class ActionDispatch::Journey::Path::Pattern::MatchData
  def [](x); end
  def captures; end
  def initialize(names, offsets, match); end
  def length; end
  def named_captures; end
  def names; end
  def post_match; end
  def to_s; end
end
module ActionDispatch::Journey::NFA
end
module ActionDispatch::Journey::NFA::Dot
  def to_dot; end
end
module ActionDispatch::Journey::GTG
end
class ActionDispatch::Journey::GTG::TransitionTable
  def []=(from, to, sym); end
  def accepting?(state); end
  def accepting_states; end
  def add_accepting(state); end
  def add_memo(idx, memo); end
  def as_json(options = nil); end
  def eclosure(t); end
  def initialize; end
  def memo(idx); end
  def memos; end
  def move(t, a); end
  def states; end
  def states_hash_for(sym); end
  def to_svg; end
  def transitions; end
  def visualizer(paths, title = nil); end
  include ActionDispatch::Journey::NFA::Dot
end
class ActionDispatch::Journey::GTG::Builder
  def ast; end
  def build_followpos; end
  def endpoints; end
  def firstpos(node); end
  def followpos(node); end
  def followpos_table; end
  def initialize(root); end
  def lastpos(node); end
  def nullable?(node); end
  def root; end
  def symbol(edge); end
  def transition_table; end
end
class ActionDispatch::Journey::GTG::MatchData
  def initialize(memos); end
  def memos; end
end
class ActionDispatch::Journey::GTG::Simulator
  def initialize(transition_table); end
  def memos(string); end
  def tt; end
end
class ActionDispatch::Journey::NFA::TransitionTable
  def []=(i, f, s); end
  def accepting; end
  def accepting=(arg0); end
  def accepting?(state); end
  def accepting_states; end
  def add_memo(idx, memo); end
  def alphabet; end
  def eclosure(t); end
  def following_states(t, a); end
  def initialize; end
  def inverted; end
  def memo(idx); end
  def memos; end
  def merge(left, right); end
  def move(t, a); end
  def states; end
  def transitions; end
  include ActionDispatch::Journey::NFA::Dot
end
class ActionDispatch::Journey::NFA::Visitor < ActionDispatch::Journey::Visitors::Visitor
  def initialize(tt); end
  def terminal(node); end
  def visit_CAT(node); end
  def visit_GROUP(node); end
  def visit_OR(node); end
end
class ActionDispatch::Journey::NFA::Builder
  def initialize(ast); end
  def transition_table; end
end
class ActionDispatch::Journey::NFA::MatchData
  def initialize(memos); end
  def memos; end
end
class ActionDispatch::Journey::NFA::Simulator
  def =~(string); end
  def initialize(transition_table); end
  def match(string); end
  def simulate(string); end
  def tt; end
end
class ActionDispatch::Routing::Endpoint
  def app; end
  def dispatcher?; end
  def engine?; end
  def matches?(req); end
  def rack_app; end
  def redirect?; end
end
class ActionDispatch::Routing::RouteSet
  def add_polymorphic_mapping(klass, options, &block); end
  def add_route(mapping, name); end
  def add_url_helper(name, options, &block); end
  def api_only?; end
  def append(&block); end
  def call(env); end
  def clear!; end
  def default_scope; end
  def default_scope=(arg0); end
  def default_url_options; end
  def default_url_options=(arg0); end
  def define_mounted_helper(name, script_namer = nil); end
  def disable_clear_and_finalize; end
  def disable_clear_and_finalize=(arg0); end
  def draw(&block); end
  def eager_load!; end
  def empty?; end
  def env_key; end
  def eval_block(block); end
  def extra_keys(options, recall = nil); end
  def finalize!; end
  def find_relative_url_root(options); end
  def find_script_name(options); end
  def formatter; end
  def formatter=(arg0); end
  def generate(route_key, options, recall = nil); end
  def generate_extras(options, recall = nil); end
  def initialize(config = nil); end
  def inspect; end
  def make_request(env); end
  def mounted_helpers; end
  def named_routes; end
  def named_routes=(arg0); end
  def optimize_routes_generation?; end
  def path_for(options, route_name = nil); end
  def polymorphic_mappings; end
  def prepend(&block); end
  def recognize_path(path, environment = nil); end
  def recognize_path_with_request(req, path, extras, raise_on_missing: nil); end
  def relative_url_root; end
  def request_class; end
  def resources_path_names; end
  def resources_path_names=(arg0); end
  def router; end
  def router=(arg0); end
  def routes; end
  def self.default_resources_path_names; end
  def self.new_with_config(config); end
  def set; end
  def set=(arg0); end
  def url_for(options, route_name = nil, url_strategy = nil); end
  def url_helpers(supports_path = nil); end
end
class ActionDispatch::Routing::RouteSet::Dispatcher < ActionDispatch::Routing::Endpoint
  def controller(req); end
  def dispatch(controller, action, req, res); end
  def dispatcher?; end
  def initialize(raise_on_name_error); end
  def serve(req); end
end
class ActionDispatch::Routing::RouteSet::StaticDispatcher < ActionDispatch::Routing::RouteSet::Dispatcher
  def controller(_); end
  def initialize(controller_class); end
end
class ActionDispatch::Routing::RouteSet::NamedRouteCollection
  def [](name); end
  def []=(name, route); end
  def add(name, route); end
  def add_url_helper(name, defaults, &block); end
  def clear!; end
  def clear; end
  def define_url_helper(mod, route, name, opts, route_key, url_strategy); end
  def each; end
  def get(name); end
  def helper_names; end
  def initialize; end
  def key?(name); end
  def length; end
  def names; end
  def path_helpers_module; end
  def route_defined?(name); end
  def routes; end
  def url_helpers_module; end
  include Enumerable
end
class ActionDispatch::Routing::RouteSet::NamedRouteCollection::UrlHelper
  def call(t, args, inner_options); end
  def handle_positional_args(controller_options, inner_options, args, result, path_params); end
  def initialize(route, options, route_name, url_strategy); end
  def route_name; end
  def self.create(route, options, route_name, url_strategy); end
  def self.optimize_helper?(route); end
  def url_strategy; end
end
class ActionDispatch::Routing::RouteSet::NamedRouteCollection::UrlHelper::OptimizedUrlHelper < ActionDispatch::Routing::RouteSet::NamedRouteCollection::UrlHelper
  def arg_size; end
  def call(t, args, inner_options); end
  def initialize(route, options, route_name, url_strategy); end
  def optimize_routes_generation?(t); end
  def optimized_helper(args); end
  def parameterize_args(args); end
  def raise_generation_error(args); end
end
class ActionDispatch::Routing::RouteSet::Config < Struct
  def api_only; end
  def api_only=(_); end
  def relative_url_root; end
  def relative_url_root=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
module ActionDispatch::Routing::RouteSet::MountedHelpers
  extend ActiveSupport::Concern
  include ActionDispatch::Routing::UrlFor
end
class ActionDispatch::Routing::RouteSet::CustomUrlHelper
  def block; end
  def call(t, args, only_path = nil); end
  def defaults; end
  def eval_block(t, args, options); end
  def initialize(name, defaults, &block); end
  def merge_defaults(options); end
  def name; end
end
class ActionDispatch::Routing::RouteSet::Generator
  def controller; end
  def current_controller; end
  def different_controller?; end
  def generate; end
  def initialize(named_route, options, recall, set); end
  def named_route; end
  def named_route_exists?; end
  def normalize_controller!; end
  def normalize_controller_action_id!; end
  def normalize_options!; end
  def options; end
  def recall; end
  def segment_keys; end
  def set; end
  def use_recall_for(key); end
  def use_relative_controller!; end
end
class ActionDispatch::Routing::Redirect < ActionDispatch::Routing::Endpoint
  def block; end
  def call(env); end
  def escape(params); end
  def escape_fragment(params); end
  def escape_path(params); end
  def initialize(status, block); end
  def inspect; end
  def path(params, request); end
  def redirect?; end
  def relative_path?(path); end
  def serve(req); end
  def status; end
end
class ActionDispatch::Routing::PathRedirect < ActionDispatch::Routing::Redirect
  def inspect; end
  def interpolation_required?(string, params); end
  def path(params, request); end
end
class ActionDispatch::Routing::OptionRedirect < ActionDispatch::Routing::Redirect
  def inspect; end
  def options; end
  def path(params, request); end
end
module ActionDispatch::Routing::Redirection
  def redirect(*args, &block); end
end
class ActionDispatch::Routing::Mapper
  def initialize(set); end
  def self.normalize_name(name); end
  def self.normalize_path(path); end
  include ActionDispatch::Routing::Mapper::Base
  include ActionDispatch::Routing::Mapper::Concerns
  include ActionDispatch::Routing::Mapper::CustomUrls
  include ActionDispatch::Routing::Mapper::HttpHelpers
  include ActionDispatch::Routing::Mapper::Resources
  include ActionDispatch::Routing::Mapper::Scoping
  include ActionDispatch::Routing::Redirection
end
class ActionDispatch::Routing::Mapper::Constraints < ActionDispatch::Routing::Endpoint
  def app; end
  def constraint_args(constraint, request); end
  def constraints; end
  def dispatcher?; end
  def initialize(app, constraints, strategy); end
  def matches?(req); end
  def serve(req); end
end
class ActionDispatch::Routing::Mapper::Mapping
  def add_controller_module(controller, modyoule); end
  def add_wildcard_options(options, formatted, path_ast); end
  def app(blocks); end
  def application; end
  def ast; end
  def blocks(callable_constraint); end
  def build_conditions(current_conditions, request_class); end
  def build_path(ast, requirements, anchor); end
  def check_controller_and_action(path_params, controller, action); end
  def check_part(name, part, path_params, hash); end
  def conditions; end
  def constraints(options, path_params); end
  def default_action; end
  def default_controller; end
  def defaults; end
  def dispatcher(raise_on_name_error); end
  def initialize(set:, ast:, controller:, default_action:, to:, formatted:, via:, options_constraints:, anchor:, scope_params:, options:); end
  def intern(object); end
  def make_route(name, precedence); end
  def normalize_defaults(options); end
  def normalize_format(formatted); end
  def normalize_options!(options, path_params, modyoule); end
  def path; end
  def request_method; end
  def required_defaults; end
  def requirements; end
  def scope_options; end
  def self.build(scope, set, ast, controller, default_action, to, via, formatted, options_constraints, anchor, options); end
  def self.check_via(via); end
  def self.normalize_path(path, format); end
  def self.optional_format?(path, format); end
  def split_constraints(path_params, constraints); end
  def split_to(to); end
  def to; end
  def translate_controller(controller); end
  def verify_regexp_requirements(requirements); end
end
module ActionDispatch::Routing::Mapper::Base
  def app_name(app, rails_app); end
  def default_url_options(options); end
  def default_url_options=(options); end
  def define_generate_prefix(app, name); end
  def has_named_route?(name); end
  def match(path, options = nil); end
  def mount(app, options = nil); end
  def rails_app?(app); end
  def with_default_scope(scope, &block); end
end
module ActionDispatch::Routing::Mapper::HttpHelpers
  def delete(*args, &block); end
  def get(*args, &block); end
  def map_method(method, args, &block); end
  def patch(*args, &block); end
  def post(*args, &block); end
  def put(*args, &block); end
end
module ActionDispatch::Routing::Mapper::Scoping
  def constraints(constraints = nil); end
  def controller(controller); end
  def defaults(defaults = nil); end
  def merge_action_scope(parent, child); end
  def merge_as_scope(parent, child); end
  def merge_blocks_scope(parent, child); end
  def merge_constraints_scope(parent, child); end
  def merge_controller_scope(parent, child); end
  def merge_defaults_scope(parent, child); end
  def merge_format_scope(parent, child); end
  def merge_module_scope(parent, child); end
  def merge_options_scope(parent, child); end
  def merge_path_names_scope(parent, child); end
  def merge_path_scope(parent, child); end
  def merge_shallow_path_scope(parent, child); end
  def merge_shallow_prefix_scope(parent, child); end
  def merge_shallow_scope(parent, child); end
  def merge_to_scope(parent, child); end
  def merge_via_scope(parent, child); end
  def namespace(path, options = nil); end
  def scope(*args); end
end
module ActionDispatch::Routing::Mapper::Resources
  def action_options?(options); end
  def action_path(name); end
  def add_route(action, controller, options, _path, to, via, formatted, anchor, options_constraints); end
  def api_only?; end
  def apply_action_options(options); end
  def apply_common_behavior_for(method, resources, options, &block); end
  def canonical_action?(action); end
  def collection; end
  def decomposed_match(path, controller, options, _path, to, via, formatted, anchor, options_constraints); end
  def get_to_from_path(path, to, action); end
  def map_match(paths, options); end
  def match(path, *rest, &block); end
  def match_root_route(options); end
  def member; end
  def name_for_action(as, action); end
  def namespace(path, options = nil); end
  def nested; end
  def nested_options; end
  def nested_scope?; end
  def new; end
  def param_constraint; end
  def param_constraint?; end
  def parent_resource; end
  def path_for_action(action, path); end
  def path_scope(path); end
  def prefix_name_for_action(as, action); end
  def resource(*resources, &block); end
  def resource_method_scope?; end
  def resource_scope(resource); end
  def resource_scope?; end
  def resources(*resources, &block); end
  def resources_path_names(options); end
  def root(path, options = nil); end
  def scope_action_options; end
  def set_member_mappings_for_resource; end
  def shallow; end
  def shallow?; end
  def shallow_nesting_depth; end
  def shallow_scope; end
  def using_match_shorthand?(path); end
  def with_scope_level(kind); end
end
class ActionDispatch::Routing::Mapper::Resources::Resource
  def actions; end
  def available_actions; end
  def collection_name; end
  def collection_scope; end
  def controller; end
  def default_actions; end
  def initialize(entities, api_only, shallow, options = nil); end
  def member_name; end
  def member_scope; end
  def name; end
  def nested_param; end
  def nested_scope; end
  def new_scope(new_path); end
  def param; end
  def path; end
  def plural; end
  def resource_scope; end
  def shallow?; end
  def shallow_scope; end
  def singleton?; end
  def singular; end
end
class ActionDispatch::Routing::Mapper::Resources::SingletonResource < ActionDispatch::Routing::Mapper::Resources::Resource
  def collection_name; end
  def default_actions; end
  def initialize(entities, api_only, shallow, options); end
  def member_name; end
  def member_scope; end
  def nested_scope; end
  def plural; end
  def singleton?; end
  def singular; end
end
module ActionDispatch::Routing::Mapper::Concerns
  def concern(name, callable = nil, &block); end
  def concerns(*args); end
end
module ActionDispatch::Routing::Mapper::CustomUrls
  def direct(name, options = nil, &block); end
  def resolve(*args, &block); end
end
class ActionDispatch::Routing::Mapper::Scope
  def [](key); end
  def action_name(name_prefix, prefix, collection_name, member_name); end
  def each; end
  def frame; end
  def initialize(hash, parent = nil, scope_level = nil); end
  def nested?; end
  def new(hash); end
  def new_level(level); end
  def null?; end
  def options; end
  def parent; end
  def resource_method_scope?; end
  def resource_scope?; end
  def resources?; end
  def root?; end
  def scope_level; end
  include Enumerable
end
class ActiveModel::Validator
  def initialize(options = nil); end
  def kind; end
  def options; end
  def self.kind; end
  def validate(record); end
end
class ActiveModel::EachValidator < ActiveModel::Validator
  def attributes; end
  def check_validity!; end
  def initialize(options); end
  def validate(record); end
  def validate_each(record, attribute, value); end
end
class ActiveModel::BlockValidator < ActiveModel::EachValidator
  def initialize(options, &block); end
  def validate_each(record, attribute, value); end
end
class Rails::SourceAnnotationExtractor
  def display(results, options = nil); end
  def extract_annotations_from(file, pattern); end
  def find(dirs); end
  def find_in(dir); end
  def initialize(tag); end
  def self.enumerate(tag = nil, options = nil); end
  def tag; end
end
class Anonymous_Struct_5 < Struct
  def line; end
  def line=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def tag; end
  def tag=(_); end
  def text; end
  def text=(_); end
end
class Rails::SourceAnnotationExtractor::Annotation < Anonymous_Struct_5
  def self.directories; end
  def self.extensions; end
  def self.notes_task_deprecation_warning; end
  def self.register_directories(*dirs); end
  def self.register_extensions(*exts, &block); end
  def self.register_tags(*additional_tags); end
  def self.tags; end
  def to_s(options = nil); end
end
class ActiveSupport::ExecutionWrapper
  def __callbacks; end
  def __callbacks?; end
  def _complete_callbacks; end
  def _run_callbacks; end
  def _run_complete_callbacks(&block); end
  def _run_run_callbacks(&block); end
  def complete!; end
  def hook_state; end
  def run!; end
  def self.__callbacks; end
  def self.__callbacks=(val); end
  def self.__callbacks?; end
  def self._complete_callbacks; end
  def self._complete_callbacks=(value); end
  def self._run_callbacks; end
  def self._run_callbacks=(value); end
  def self.active; end
  def self.active=(arg0); end
  def self.active?; end
  def self.inherited(other); end
  def self.register_hook(hook, outer: nil); end
  def self.run!; end
  def self.to_complete(*args, &block); end
  def self.to_run(*args, &block); end
  def self.wrap; end
  extend ActiveSupport::Callbacks::ClassMethods
  extend ActiveSupport::DescendantsTracker
  include ActiveSupport::Callbacks
end
class ActiveSupport::ExecutionWrapper::RunHook < Struct
  def before(target); end
  def hook; end
  def hook=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class ActiveSupport::ExecutionWrapper::CompleteHook < Struct
  def after(target); end
  def before(target); end
  def hook; end
  def hook=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class ActiveSupport::Executor < ActiveSupport::ExecutionWrapper
end
class ActiveSupport::Reloader < ActiveSupport::ExecutionWrapper
  def _class_unload_callbacks; end
  def _prepare_callbacks; end
  def _run_class_unload_callbacks(&block); end
  def _run_prepare_callbacks(&block); end
  def check; end
  def check=(val); end
  def check?; end
  def class_unload!(&block); end
  def complete!; end
  def executor; end
  def executor=(val); end
  def executor?; end
  def initialize; end
  def release_unload_lock!; end
  def require_unload_lock!; end
  def run!; end
  def self.__callbacks; end
  def self._class_unload_callbacks; end
  def self._class_unload_callbacks=(value); end
  def self._prepare_callbacks; end
  def self._prepare_callbacks=(value); end
  def self.after_class_unload(*args, &block); end
  def self.before_class_unload(*args, &block); end
  def self.check!; end
  def self.check; end
  def self.check=(val); end
  def self.check?; end
  def self.executor; end
  def self.executor=(val); end
  def self.executor?; end
  def self.prepare!; end
  def self.reload!; end
  def self.reloaded!; end
  def self.run!; end
  def self.to_prepare(*args, &block); end
  def self.wrap; end
end
class ActiveSupport::FileUpdateChecker
  def compile_ext(array); end
  def compile_glob(hash); end
  def escape(key); end
  def execute; end
  def execute_if_updated; end
  def initialize(files, dirs = nil, &block); end
  def max_mtime(paths); end
  def updated?; end
  def updated_at(paths); end
  def watched; end
end
class Rails::Application::Configuration < Rails::Engine::Configuration
  def add_autoload_paths_to_load_path; end
  def add_autoload_paths_to_load_path=(arg0); end
  def allow_concurrency; end
  def allow_concurrency=(arg0); end
  def annotations; end
  def api_only; end
  def api_only=(value); end
  def asset_host; end
  def asset_host=(arg0); end
  def autoflush_log; end
  def autoflush_log=(arg0); end
  def autoloader; end
  def autoloader=(autoloader); end
  def beginning_of_week; end
  def beginning_of_week=(arg0); end
  def cache_classes; end
  def cache_classes=(arg0); end
  def cache_store; end
  def cache_store=(arg0); end
  def colorize_logging; end
  def colorize_logging=(val); end
  def consider_all_requests_local; end
  def consider_all_requests_local=(arg0); end
  def console; end
  def console=(arg0); end
  def content_security_policy(&block); end
  def content_security_policy_nonce_generator; end
  def content_security_policy_nonce_generator=(arg0); end
  def content_security_policy_report_only; end
  def content_security_policy_report_only=(arg0); end
  def credentials; end
  def credentials=(arg0); end
  def credentials_available_for_current_env?; end
  def database_configuration; end
  def debug_exception_response_format; end
  def debug_exception_response_format=(arg0); end
  def default_credentials_content_path; end
  def default_credentials_key_path; end
  def default_log_file; end
  def disable_sandbox; end
  def disable_sandbox=(arg0); end
  def eager_load; end
  def eager_load=(arg0); end
  def enable_dependency_loading; end
  def enable_dependency_loading=(arg0); end
  def encoding; end
  def encoding=(value); end
  def exceptions_app; end
  def exceptions_app=(arg0); end
  def file_watcher; end
  def file_watcher=(arg0); end
  def filter_parameters; end
  def filter_parameters=(arg0); end
  def filter_redirect; end
  def filter_redirect=(arg0); end
  def force_ssl; end
  def force_ssl=(arg0); end
  def helpers_paths; end
  def helpers_paths=(arg0); end
  def hosts; end
  def hosts=(arg0); end
  def initialize(*arg0); end
  def load_database_yaml; end
  def load_defaults(target_version); end
  def loaded_config_version; end
  def log_formatter; end
  def log_formatter=(arg0); end
  def log_level; end
  def log_level=(arg0); end
  def log_tags; end
  def log_tags=(arg0); end
  def logger; end
  def logger=(arg0); end
  def paths; end
  def public_file_server; end
  def public_file_server=(arg0); end
  def railties_order; end
  def railties_order=(arg0); end
  def read_encrypted_secrets; end
  def read_encrypted_secrets=(arg0); end
  def relative_url_root; end
  def relative_url_root=(arg0); end
  def reload_classes_only_on_change; end
  def reload_classes_only_on_change=(arg0); end
  def require_master_key; end
  def require_master_key=(arg0); end
  def secret_key_base; end
  def secret_key_base=(arg0); end
  def session_options; end
  def session_options=(arg0); end
  def session_store(new_session_store = nil, **options); end
  def session_store?; end
  def ssl_options; end
  def ssl_options=(arg0); end
  def time_zone; end
  def time_zone=(arg0); end
  def x; end
  def x=(arg0); end
end
class Rails::Application::Configuration::Custom
  def initialize; end
  def method_missing(method, *args); end
  def respond_to_missing?(symbol, *arg1); end
end
module Rails::Application::Bootstrap
  extend Rails::Initializable::ClassMethods
  include Rails::Initializable
end
module Rails::Application::Finisher
  extend Rails::Initializable::ClassMethods
  include Rails::Initializable
end
class Rails::Application::Finisher::MutexHook
  def complete(_state); end
  def initialize(mutex = nil); end
  def run; end
end
module Rails::Application::Finisher::InterlockHook
  def self.complete(_state); end
  def self.run; end
end
class Rails::Application::RoutesReloader
  def clear!; end
  def eager_load; end
  def eager_load=(arg0); end
  def execute(*args, &block); end
  def execute_if_updated(*args, &block); end
  def finalize!; end
  def initialize; end
  def load_paths; end
  def paths; end
  def reload!; end
  def revert; end
  def route_sets; end
  def updated?(*args, &block); end
  def updater; end
end
class ActionView::Template
  def compile!(view); end
  def compile(mod); end
  def encode!; end
  def format; end
  def formats(*args, &block); end
  def formats=(*args, &block); end
  def handle_render_error(view, e); end
  def handler; end
  def identifier; end
  def identifier_method_name; end
  def initialize(source, identifier, handler, format: nil, variant: nil, locals: nil, virtual_path: nil, updated_at: nil); end
  def inspect; end
  def instrument(action, &block); end
  def instrument_payload; end
  def instrument_render_template(&block); end
  def locals; end
  def locals=(*args, &block); end
  def locals_code; end
  def marshal_dump; end
  def marshal_load(array); end
  def method_name; end
  def original_encoding(*args, &block); end
  def refresh(*args, &block); end
  def render(view, locals, buffer = nil, &block); end
  def self.finalize_compiled_template_methods; end
  def self.finalize_compiled_template_methods=(_); end
  def short_identifier; end
  def source; end
  def supports_streaming?; end
  def type; end
  def updated_at(*args, &block); end
  def variable; end
  def variant; end
  def variants(*args, &block); end
  def variants=(*args, &block); end
  def virtual_path; end
  def virtual_path=(*args, &block); end
  extend ActionView::Template::Handlers
  extend ActiveSupport::Autoload
end
module ActionView::Template::Handlers
  def handler_for_extension(extension); end
  def register_default_template_handler(extension, klass); end
  def register_template_handler(*extensions, handler); end
  def registered_template_handler(extension); end
  def self.extended(base); end
  def self.extensions; end
  def template_handler_extensions; end
  def unregister_template_handler(*extensions); end
end
class ActionView::Template::Handlers::LegacyHandlerWrapper < SimpleDelegator
  def call(view, source); end
end
class ActionView::Template::Handlers::Raw
  def call(template, source); end
end
class ActionView::Template::Handlers::ERB
  def call(template, source); end
  def erb_implementation; end
  def erb_implementation=(val); end
  def erb_implementation?; end
  def erb_trim_mode; end
  def erb_trim_mode=(val); end
  def erb_trim_mode?; end
  def escape_ignore_list; end
  def escape_ignore_list=(val); end
  def escape_ignore_list?; end
  def escape_whitelist(*args, &block); end
  def escape_whitelist=(*args, &block); end
  def handles_encoding?; end
  def self.call(template, source); end
  def self.erb_implementation; end
  def self.erb_implementation=(val); end
  def self.erb_implementation?; end
  def self.erb_trim_mode; end
  def self.erb_trim_mode=(val); end
  def self.erb_trim_mode?; end
  def self.escape_ignore_list; end
  def self.escape_ignore_list=(val); end
  def self.escape_ignore_list?; end
  def self.escape_whitelist(*args, &block); end
  def self.escape_whitelist=(*args, &block); end
  def supports_streaming?; end
  def valid_encoding(string, encoding); end
end
class ActionView::Template::Handlers::ERB::Erubi < Erubi::Engine
  def add_code(code); end
  def add_expression(indicator, code); end
  def add_postamble(_); end
  def add_text(text); end
  def evaluate(action_view_erb_handler_context); end
  def flush_newline_if_pending(src); end
  def initialize(input, properties = nil); end
end
class ActionView::Template::Handlers::Html < ActionView::Template::Handlers::Raw
  def call(template, source); end
end
class ActionView::Template::Handlers::Builder
  def call(template, source); end
  def default_format; end
  def default_format=(val); end
  def default_format?; end
  def require_engine; end
  def self.default_format; end
  def self.default_format=(val); end
  def self.default_format?; end
end
class ActionView::Template::LegacyTemplate < Anonymous_Delegator_6
  def initialize(template, source); end
  def source; end
end
class ActionView::Resolver
  def _find_all(name, prefix, partial, details, key, locals); end
  def cached(key, path_info, details, locals); end
  def caching; end
  def caching=(obj); end
  def caching?(*args, &block); end
  def clear_cache; end
  def find_all(name, prefix = nil, partial = nil, details = nil, key = nil, locals = nil); end
  def find_all_anywhere(*args, &block); end
  def find_all_with_query(query); end
  def find_templates(name, prefix, partial, details, locals = nil); end
  def initialize; end
  def self.caching; end
  def self.caching=(obj); end
  def self.caching?; end
end
class ActionView::Resolver::Path
  def initialize(name, prefix, partial, virtual); end
  def name; end
  def partial; end
  def partial?; end
  def prefix; end
  def self.build(name, prefix, partial); end
  def to_s; end
  def to_str; end
  def virtual; end
end
class ActionView::Resolver::Cache
  def cache(key, name, prefix, partial, locals); end
  def cache_query(query); end
  def canonical_no_templates(templates); end
  def clear; end
  def initialize; end
  def inspect; end
  def size; end
end
class ActionView::Resolver::Cache::SmallCache < Concurrent::Map
  def initialize(options = nil); end
end
class ActionView::PathResolver < ActionView::Resolver
  def _find_all(name, prefix, partial, details, key, locals); end
  def build_query(path, details); end
  def build_unbound_template(template, virtual_path); end
  def clear_cache; end
  def escape_entry(entry); end
  def extract_handler_and_format_and_variant(path); end
  def find_template_paths(query); end
  def find_template_paths_from_details(path, details); end
  def initialize(pattern = nil); end
  def inside_path?(path, filename); end
  def query(path, details, formats, locals, cache:); end
  def reject_files_external_to_app(files); end
end
class ActionView::FileSystemResolver < ActionView::PathResolver
  def ==(resolver); end
  def eql?(resolver); end
  def initialize(path, pattern = nil); end
  def path; end
  def to_path; end
  def to_s; end
end
class ActionView::OptimizedFileSystemResolver < ActionView::FileSystemResolver
  def build_regex(path, details); end
  def find_template_paths_from_details(path, details); end
  def initialize(path); end
end
class ActionView::FallbackFileSystemResolver < ActionView::FileSystemResolver
  def build_unbound_template(template, _); end
  def reject_files_external_to_app(files); end
  def self.instances; end
  def self.new(*arg0); end
end
class ActiveSupport::EventedFileUpdateChecker
  def boot!; end
  def changed(modified, added, removed); end
  def directories_to_watch; end
  def execute; end
  def execute_if_updated; end
  def initialize(files, dirs = nil, &block); end
  def normalize_dirs!; end
  def shutdown!; end
  def updated?; end
  def watching?(file); end
end
class ActiveSupport::EventedFileUpdateChecker::PathHelper
  def ascendant_of?(base, other); end
  def filter_out_descendants(dirs); end
  def longest_common_subpath(paths); end
  def normalize_extension(ext); end
  def xpath(path); end
end
module Module::Concerning
  def concern(topic, &module_definition); end
  def concerning(topic, &block); end
end
class ActiveSupport::ArrayInquirer < Array
  def any?(*candidates); end
  def method_missing(name, *args); end
  def respond_to_missing?(name, include_private = nil); end
end
module ActiveSupport::NumberHelper
  def number_to_currency(number, options = nil); end
  def number_to_delimited(number, options = nil); end
  def number_to_human(number, options = nil); end
  def number_to_human_size(number, options = nil); end
  def number_to_percentage(number, options = nil); end
  def number_to_phone(number, options = nil); end
  def number_to_rounded(number, options = nil); end
  extend ActiveSupport::Autoload
  extend ActiveSupport::NumberHelper
end
module ActiveSupport::NumericWithFormat
  def to_s(format = nil, options = nil); end
end
class File < IO
  def self.atomic_write(file_name, temp_dir = nil); end
  def self.probe_stat_in(dir); end
end
module ActiveSupport::RangeWithFormat
  def to_default_s(format = nil); end
  def to_formatted_s(format = nil); end
  def to_s(format = nil); end
end
module ActiveSupport::CompareWithRange
  def ===(value); end
  def cover?(value); end
  def include?(value); end
end
module ActiveSupport::IncludeTimeWithZone
  def include?(value); end
end
module ActiveSupport::EachTimeWithZone
  def each(&block); end
  def ensure_iteration_allowed; end
  def step(n = nil, &block); end
end
module Digest
end
module Digest::UUID
  def self.uuid_from_hash(hash_class, uuid_namespace, name); end
  def self.uuid_v3(uuid_namespace, name); end
  def self.uuid_v4; end
  def self.uuid_v5(uuid_namespace, name); end
end
module ActiveSupport::MarshalWithAutoloading
  def load(source, proc = nil); end
end
module SecureRandom
  def self.base36(n = nil); end
  def self.base58(n = nil); end
end
module ActiveSupport::TaggedLogging
  def clear_tags!(*args, &block); end
  def flush; end
  def pop_tags(*args, &block); end
  def push_tags(*args, &block); end
  def self.new(logger); end
  def tagged(*tags); end
end
module ActiveSupport::TaggedLogging::Formatter
  def call(severity, timestamp, progname, msg); end
  def clear_tags!; end
  def current_tags; end
  def pop_tags(size = nil); end
  def push_tags(*tags); end
  def tagged(*tags); end
  def tags_text; end
end
module ActiveSupport::Cache
  def self.expand_cache_key(key, namespace = nil); end
  def self.lookup_store(*store_option); end
  def self.retrieve_cache_key(key); end
  def self.retrieve_store_class(store); end
end
module ActiveSupport::Cache::Strategy
end
class ActiveSupport::Cache::Store
  def cleanup(options = nil); end
  def clear(options = nil); end
  def decrement(name, amount = nil, options = nil); end
  def delete(name, options = nil); end
  def delete_entry(key, options); end
  def delete_matched(matcher, options = nil); end
  def exist?(name, options = nil); end
  def expanded_key(key); end
  def expanded_version(key); end
  def fetch(name, options = nil); end
  def fetch_multi(*names); end
  def get_entry_value(entry, name, options); end
  def handle_expired_entry(entry, key, options); end
  def increment(name, amount = nil, options = nil); end
  def initialize(options = nil); end
  def instrument(operation, key, options = nil); end
  def key_matcher(pattern, options); end
  def log; end
  def logger; end
  def logger=(obj); end
  def merged_options(call_options); end
  def mute; end
  def namespace_key(key, options = nil); end
  def normalize_key(key, options = nil); end
  def normalize_version(key, options = nil); end
  def options; end
  def read(name, options = nil); end
  def read_entry(key, options); end
  def read_multi(*names); end
  def read_multi_entries(names, options); end
  def save_block_result_to_cache(name, options); end
  def self.ensure_connection_pool_added!; end
  def self.logger; end
  def self.logger=(obj); end
  def self.retrieve_pool_options(options); end
  def silence!; end
  def silence; end
  def silence?; end
  def write(name, value, options = nil); end
  def write_entry(key, entry, options); end
  def write_multi(hash, options = nil); end
  def write_multi_entries(hash, options); end
end
class ActiveSupport::Cache::Entry
  def compress!(compress_threshold); end
  def compressed?; end
  def dup_value!; end
  def expired?; end
  def expires_at; end
  def expires_at=(value); end
  def initialize(value, compress: nil, compress_threshold: nil, version: nil, expires_in: nil, **arg5); end
  def mismatched?(version); end
  def size; end
  def uncompress(value); end
  def value; end
  def version; end
end
module ActiveSupport::Cache::Strategy::LocalCache
  def bypass_local_cache; end
  def cleanup(options = nil); end
  def clear(options = nil); end
  def decrement(name, amount = nil, options = nil); end
  def delete_entry(key, options); end
  def increment(name, amount = nil, options = nil); end
  def local_cache; end
  def local_cache_key; end
  def middleware; end
  def read_entry(key, options); end
  def read_multi_entries(keys, options); end
  def use_temporary_local_cache(temporary_cache); end
  def with_local_cache; end
  def write_cache_value(name, value, options); end
  def write_entry(key, entry, options); end
end
class ActiveSupport::Cache::Strategy::LocalCache::LocalCacheRegistry
  def cache_for(local_cache_key); end
  def initialize; end
  def self.cache_for(l); end
  def self.set_cache_for(l, v); end
  def set_cache_for(local_cache_key, value); end
  extend ActiveSupport::PerThreadRegistry
end
class ActiveSupport::Cache::Strategy::LocalCache::LocalStore < ActiveSupport::Cache::Store
  def clear(options = nil); end
  def delete_entry(key, options); end
  def fetch_entry(key, options = nil); end
  def initialize; end
  def read_entry(key, options); end
  def read_multi_entries(keys, options); end
  def synchronize; end
  def write_entry(key, value, options); end
end
class ActiveSupport::Cache::NullStore < ActiveSupport::Cache::Store
  def cleanup(options = nil); end
  def clear(options = nil); end
  def decrement(name, amount = nil, options = nil); end
  def delete_entry(key, options); end
  def delete_matched(matcher, options = nil); end
  def increment(name, amount = nil, options = nil); end
  def read_entry(key, options); end
  def self.supports_cache_versioning?; end
  def write_entry(key, entry, options); end
end
class ActiveSupport::Cache::Strategy::LocalCache::Middleware
  def call(env); end
  def initialize(name, local_cache_key); end
  def local_cache_key; end
  def name; end
  def new(app); end
end
class ActionDispatch::Request::Utils
  def perform_deep_munge; end
  def perform_deep_munge=(obj); end
  def self.check_param_encoding(params); end
  def self.each_param_value(params, &block); end
  def self.normalize_encode_params(params); end
  def self.perform_deep_munge; end
  def self.perform_deep_munge=(obj); end
end
class ActionDispatch::Request::Utils::ParamEncoder
  def self.handle_array(params); end
  def self.normalize_encode_params(params); end
end
class ActionDispatch::Request::Utils::NoNilParamEncoder < ActionDispatch::Request::Utils::ParamEncoder
  def self.handle_array(params); end
end
class ActionDispatch::ExceptionWrapper
  def application_trace; end
  def backtrace; end
  def backtrace_cleaner; end
  def causes_for(exception); end
  def clean_backtrace(*args); end
  def exception; end
  def expand_backtrace; end
  def extract_file_and_line_number(trace); end
  def file; end
  def framework_trace; end
  def full_trace; end
  def initialize(backtrace_cleaner, exception); end
  def line_number; end
  def rescue_responses; end
  def rescue_responses=(obj); end
  def rescue_template; end
  def rescue_templates; end
  def rescue_templates=(obj); end
  def self.rescue_responses; end
  def self.rescue_responses=(obj); end
  def self.rescue_templates; end
  def self.rescue_templates=(obj); end
  def self.status_code_for_exception(class_name); end
  def self.wrapper_exceptions; end
  def self.wrapper_exceptions=(obj); end
  def source_extracts; end
  def source_fragment(path, line); end
  def source_to_show_id; end
  def status_code; end
  def trace_to_show; end
  def traces; end
  def unwrapped_exception; end
  def wrapped_causes; end
  def wrapped_causes_for(exception, backtrace_cleaner); end
  def wrapper_exceptions; end
  def wrapper_exceptions=(obj); end
end
module ActiveModel::SecurePassword
  def self.min_cost; end
  def self.min_cost=(arg0); end
  extend ActiveSupport::Concern
end
module ActiveModel::SecurePassword::ClassMethods
  def has_secure_password(attribute = nil, validations: nil); end
end
class ActiveModel::SecurePassword::InstanceMethodsOnActivation < Module
  def initialize(attribute); end
end
class ActionDispatch::Callbacks
  def __callbacks; end
  def __callbacks?; end
  def _call_callbacks; end
  def _run_call_callbacks(&block); end
  def call(env); end
  def initialize(app); end
  def self.__callbacks; end
  def self.__callbacks=(val); end
  def self.__callbacks?; end
  def self._call_callbacks; end
  def self._call_callbacks=(value); end
  def self.after(*args, &block); end
  def self.before(*args, &block); end
  extend ActiveSupport::Callbacks::ClassMethods
  extend ActiveSupport::DescendantsTracker
  include ActiveSupport::Callbacks
end
class ActiveSupport::BacktraceCleaner
  def add_filter(&block); end
  def add_gem_filter; end
  def add_gem_silencer; end
  def add_silencer(&block); end
  def add_stdlib_silencer; end
  def clean(backtrace, kind = nil); end
  def filter(backtrace, kind = nil); end
  def filter_backtrace(backtrace); end
  def initialize; end
  def noise(backtrace); end
  def remove_filters!; end
  def remove_silencers!; end
  def silence(backtrace); end
end
class ActiveRecord::LogSubscriber < ActiveSupport::LogSubscriber
  def self.backtrace_cleaner; end
  def self.backtrace_cleaner=(val); end
  def self.backtrace_cleaner?; end
  def self.reset_runtime; end
  def self.runtime; end
  def self.runtime=(value); end
end
module ActiveRecord::Railties
end
module ActiveRecord::Railties::ControllerRuntime
  def append_info_to_payload(payload); end
  def cleanup_view_runtime; end
  def db_runtime; end
  def db_runtime=(arg0); end
  def process_action(action, *args); end
  extend ActiveSupport::Concern
end
module ActiveRecord::Railties::ControllerRuntime::ClassMethods
  def log_process_action(payload); end
end
module ActiveRecord::Railties::CollectionCacheAssociationLoading
  def collection_with_template(*arg0); end
  def collection_without_template(*arg0); end
  def relation_from_options(cached: nil, partial: nil, collection: nil, **_); end
  def setup(context, options, as, block); end
end
class ActiveRecord::QueryCache
  def self.complete(pools); end
  def self.install_executor_hooks(executor = nil); end
  def self.run; end
end
module ActiveRecord::QueryCache::ClassMethods
  def cache(&block); end
  def uncached(&block); end
end
module ActionView::RoutingUrlFor
  def _generate_paths_by_default; end
  def _routes_context; end
  def ensure_only_path_option(options); end
  def optimize_routes_generation?; end
  def url_for(options = nil); end
  def url_options; end
end
module ActionView::CollectionCaching
  def cache_collection_render(instrumentation_payload, view, template); end
  def callable_cache_key?; end
  def collection_by_cache_keys(view, template); end
  def expanded_cache_key(key, view, template, digest_path); end
  def fetch_or_cache_partial(cached_partials, template, order_by:); end
  extend ActiveSupport::Concern
end
class ActionView::AbstractRenderer
  def any_templates?(*args, &block); end
  def build_rendered_collection(templates, spacer); end
  def build_rendered_template(content, template); end
  def extract_details(options); end
  def formats(*args, &block); end
  def initialize(lookup_context); end
  def instrument(name, **options); end
  def prepend_formats(formats); end
  def render; end
  def template_exists?(*args, &block); end
end
class ActionView::AbstractRenderer::RenderedCollection
  def body; end
  def format; end
  def initialize(rendered_templates, spacer); end
  def rendered_templates; end
  def self.empty(format); end
end
class ActionView::AbstractRenderer::RenderedCollection::EmptyCollection
  def body; end
  def format; end
  def initialize(format); end
end
class ActionView::AbstractRenderer::RenderedTemplate
  def body; end
  def format; end
  def initialize(body, template); end
  def template; end
end
class ActiveSupport::Cache::MemoryStore < ActiveSupport::Cache::Store
  def cached_size(key, entry); end
  def cleanup(options = nil); end
  def clear(options = nil); end
  def decrement(name, amount = nil, options = nil); end
  def delete_entry(key, options); end
  def delete_matched(matcher, options = nil); end
  def increment(name, amount = nil, options = nil); end
  def initialize(options = nil); end
  def inspect; end
  def modify_value(name, amount, options); end
  def prune(target_size, max_time = nil); end
  def pruning?; end
  def read_entry(key, options); end
  def self.supports_cache_versioning?; end
  def synchronize(&block); end
  def write_entry(key, entry, options); end
end
class ActionView::PartialIteration
  def first?; end
  def index; end
  def initialize(size); end
  def iterate!; end
  def last?; end
  def size; end
end
class ActionView::PartialRenderer < ActionView::AbstractRenderer
  def as_variable(options); end
  def collection_cache; end
  def collection_cache=(obj); end
  def collection_from_object; end
  def collection_from_options; end
  def collection_with_template(*arg0); end
  def collection_without_template(*arg0); end
  def find_template(path, locals); end
  def initialize(*arg0); end
  def merge_prefix_into_object_path(prefix, object_path); end
  def partial_path(object, view); end
  def prefixed_partial_names; end
  def raise_invalid_identifier(path); end
  def raise_invalid_option_as(as); end
  def render(context, options, block); end
  def render_collection(view, template); end
  def render_partial(view, template); end
  def retrieve_template_keys(variable); end
  def retrieve_variable(path, as); end
  def self.collection_cache; end
  def self.collection_cache=(obj); end
  def setup(context, options, as, block); end
  include ActionView::CollectionCaching
end
class Rails::Application::DefaultMiddlewareStack
  def app; end
  def build_stack; end
  def config; end
  def initialize(app, config, paths); end
  def load_rack_cache; end
  def paths; end
  def show_exceptions_app; end
end
class ActionDispatch::HostAuthorization
  def authorized?(request); end
  def call(env); end
  def initialize(app, hosts, response_app = nil); end
  def mark_as_authorized(request); end
end
class ActionDispatch::HostAuthorization::Permissions
  def allows?(host); end
  def empty?; end
  def initialize(hosts); end
  def sanitize_hosts(hosts); end
  def sanitize_regexp(host); end
  def sanitize_string(host); end
end
class ActionDispatch::FileHandler
  def call(env); end
  def content_type(path); end
  def ext; end
  def gzip_encoding_accepted?(request); end
  def gzip_file_path(path); end
  def initialize(root, index: nil, headers: nil); end
  def match?(path); end
  def serve(request); end
end
class ActionDispatch::Static
  def call(env); end
  def initialize(app, path, index: nil, headers: nil); end
end
class ActionDispatch::Executor
  def call(env); end
  def initialize(app, executor); end
end
class ActionDispatch::RequestId
  def call(env); end
  def initialize(app); end
  def internal_request_id; end
  def make_request_id(request_id); end
end
class ActionDispatch::RemoteIp
  def call(env); end
  def check_ip; end
  def initialize(app, ip_spoofing_check = nil, custom_proxies = nil); end
  def proxies; end
end
class ActionDispatch::RemoteIp::IpSpoofAttackError < StandardError
end
class ActionDispatch::RemoteIp::GetIp
  def calculate_ip; end
  def filter_proxies(ips); end
  def initialize(req, check_ip, proxies); end
  def ips_from(header); end
  def to_s; end
end
class Rails::Rack::Logger < ActiveSupport::LogSubscriber
end
class ActionDispatch::ShowExceptions
  def call(env); end
  def initialize(app, exceptions_app); end
  def pass_response(status); end
  def render_exception(request, exception); end
end
class ActionDispatch::PublicExceptions
  def call(env); end
  def initialize(public_path); end
  def public_path; end
  def public_path=(arg0); end
  def render(status, content_type, body); end
  def render_format(status, content_type, body); end
  def render_html(status); end
end
class ActionDispatch::Routing::RouteWrapper < SimpleDelegator
  def action; end
  def constraints; end
  def controller; end
  def endpoint; end
  def engine?; end
  def internal?; end
  def name; end
  def path; end
  def rack_app; end
  def reqs; end
end
class ActionDispatch::Routing::RoutesInspector
  def collect_engine_routes(route); end
  def collect_routes(routes); end
  def filter_routes(filter); end
  def format(formatter, filter = nil); end
  def initialize(routes); end
  def normalize_filter(filter); end
end
module ActionDispatch::Routing::ConsoleFormatter
end
class ActionDispatch::Routing::ConsoleFormatter::Base
  def header(routes); end
  def initialize; end
  def no_routes(routes, filter); end
  def result; end
  def section(routes); end
  def section_title(title); end
end
class ActionDispatch::Routing::ConsoleFormatter::Sheet < ActionDispatch::Routing::ConsoleFormatter::Base
  def draw_header(routes); end
  def draw_section(routes); end
  def header(routes); end
  def section(routes); end
  def section_title(title); end
  def widths(routes); end
end
class ActionDispatch::Routing::ConsoleFormatter::Expanded < ActionDispatch::Routing::ConsoleFormatter::Base
  def draw_expanded_section(routes); end
  def route_header(index:); end
  def section(routes); end
  def section_title(title); end
end
class ActionDispatch::Routing::HtmlTableFormatter
  def header(routes); end
  def initialize(view); end
  def no_routes(*arg0); end
  def result; end
  def section(routes); end
  def section_title(title); end
end
class ActionView::LogSubscriber < ActiveSupport::LogSubscriber
end
module ActionView::Helpers
  def self.eager_load!; end
  extend ActiveSupport::Autoload
  extend ActiveSupport::Concern
  include ActionView::Helpers::ActiveModelHelper
  include ActionView::Helpers::AssetTagHelper
  include ActionView::Helpers::AssetUrlHelper
  include ActionView::Helpers::AtomFeedHelper
  include ActionView::Helpers::CacheHelper
  include ActionView::Helpers::CaptureHelper
  include ActionView::Helpers::ControllerHelper
  include ActionView::Helpers::CspHelper
  include ActionView::Helpers::CsrfHelper
  include ActionView::Helpers::DateHelper
  include ActionView::Helpers::DebugHelper
  include ActionView::Helpers::FormHelper
  include ActionView::Helpers::FormOptionsHelper
  include ActionView::Helpers::FormTagHelper
  include ActionView::Helpers::JavaScriptHelper
  include ActionView::Helpers::NumberHelper
  include ActionView::Helpers::OutputSafetyHelper
  include ActionView::Helpers::RenderingHelper
  include ActionView::Helpers::SanitizeHelper
  include ActionView::Helpers::TagHelper
  include ActionView::Helpers::TextHelper
  include ActionView::Helpers::TranslationHelper
  include ActionView::Helpers::UrlHelper
  include ActiveSupport::Benchmarkable
end
module ActionView::Helpers::ActiveModelHelper
end
module ActionView::Helpers::ActiveModelInstanceTag
  def content_tag(type, options, *arg2); end
  def error_message; end
  def error_wrapping(html_tag); end
  def object; end
  def object_has_errors?; end
  def select_markup_helper?(type); end
  def tag(type, options, *arg2); end
  def tag_generate_errors?(options); end
end
module ActionView::Helpers::AssetUrlHelper
  def asset_path(source, options = nil); end
  def asset_url(source, options = nil); end
  def audio_path(source, options = nil); end
  def audio_url(source, options = nil); end
  def compute_asset_extname(source, options = nil); end
  def compute_asset_host(source = nil, options = nil); end
  def compute_asset_path(source, options = nil); end
  def font_path(source, options = nil); end
  def font_url(source, options = nil); end
  def image_path(source, options = nil); end
  def image_url(source, options = nil); end
  def javascript_path(source, options = nil); end
  def javascript_url(source, options = nil); end
  def path_to_asset(source, options = nil); end
  def path_to_audio(source, options = nil); end
  def path_to_font(source, options = nil); end
  def path_to_image(source, options = nil); end
  def path_to_javascript(source, options = nil); end
  def path_to_stylesheet(source, options = nil); end
  def path_to_video(source, options = nil); end
  def public_compute_asset_path(source, options = nil); end
  def stylesheet_path(source, options = nil); end
  def stylesheet_url(source, options = nil); end
  def url_to_asset(source, options = nil); end
  def url_to_audio(source, options = nil); end
  def url_to_font(source, options = nil); end
  def url_to_image(source, options = nil); end
  def url_to_javascript(source, options = nil); end
  def url_to_stylesheet(source, options = nil); end
  def url_to_video(source, options = nil); end
  def video_path(source, options = nil); end
  def video_url(source, options = nil); end
end
module ActionView::Helpers::CaptureHelper
  def capture(*args); end
  def content_for(name, content = nil, options = nil, &block); end
  def content_for?(name); end
  def provide(name, content = nil, &block); end
  def with_output_buffer(buf = nil); end
end
module ActionView::Helpers::OutputSafetyHelper
  def raw(stringish); end
  def safe_join(array, sep = nil); end
  def to_sentence(array, options = nil); end
end
module ActionView::Helpers::TagHelper
  def cdata_section(content); end
  def content_tag(name, content_or_options_with_block = nil, options = nil, escape = nil, &block); end
  def escape_once(html); end
  def tag(name = nil, options = nil, open = nil, escape = nil); end
  def tag_builder; end
  extend ActiveSupport::Concern
  include ActionView::Helpers::CaptureHelper
  include ActionView::Helpers::OutputSafetyHelper
end
class ActionView::Helpers::TagHelper::TagBuilder
  def boolean_tag_option(key); end
  def content_tag_string(name, content, options, escape = nil); end
  def initialize(view_context); end
  def method_missing(called, *args, &block); end
  def prefix_tag_option(prefix, key, value, escape); end
  def respond_to_missing?(*args); end
  def tag_option(key, value, escape); end
  def tag_options(options, escape = nil); end
  def tag_string(name, content = nil, escape_attributes: nil, **options, &block); end
  include ActionView::Helpers::CaptureHelper
  include ActionView::Helpers::OutputSafetyHelper
end
module ActionView::Helpers::AssetTagHelper
  def audio_tag(*sources); end
  def auto_discovery_link_tag(type = nil, url_options = nil, tag_options = nil); end
  def check_for_image_tag_errors(options); end
  def extract_dimensions(size); end
  def favicon_link_tag(source = nil, options = nil); end
  def image_tag(source, options = nil); end
  def javascript_include_tag(*sources); end
  def multiple_sources_tag_builder(type, sources); end
  def preload_link_tag(source, options = nil); end
  def resolve_image_source(source, skip_pipeline); end
  def resolve_link_as(extname, mime_type); end
  def stylesheet_link_tag(*sources); end
  def video_tag(*sources); end
  extend ActiveSupport::Concern
  include ActionView::Helpers::AssetUrlHelper
  include ActionView::Helpers::TagHelper
end
module ActionView::Helpers::AtomFeedHelper
  def atom_feed(options = nil, &block); end
end
class ActionView::Helpers::AtomFeedHelper::AtomBuilder
  def initialize(xml); end
  def method_missing(method, *arguments, &block); end
  def xhtml_block?(method, arguments); end
end
class ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder < ActionView::Helpers::AtomFeedHelper::AtomBuilder
  def entry(record, options = nil); end
  def initialize(xml, view, feed_options = nil); end
  def updated(date_or_time = nil); end
end
module ActionView::Helpers::CacheHelper
  def cache(name = nil, options = nil, &block); end
  def cache_fragment_name(name = nil, skip_digest: nil, virtual_path: nil, digest_path: nil); end
  def cache_if(condition, name = nil, options = nil, &block); end
  def cache_unless(condition, name = nil, options = nil, &block); end
  def digest_path_from_template(template); end
  def fragment_for(name = nil, options = nil, &block); end
  def fragment_name_with_digest(name, virtual_path, digest_path); end
  def read_fragment_for(name, options); end
  def write_fragment_for(name, options); end
end
module ActionView::Helpers::ControllerHelper
  def action_name(*args, &block); end
  def assign_controller(controller); end
  def controller; end
  def controller=(arg0); end
  def controller_name(*args, &block); end
  def controller_path(*args, &block); end
  def cookies(*args, &block); end
  def flash(*args, &block); end
  def headers(*args, &block); end
  def logger; end
  def params(*args, &block); end
  def request; end
  def request=(arg0); end
  def request_forgery_protection_token(*args, &block); end
  def respond_to?(method_name, include_private = nil); end
  def response(*args, &block); end
  def session(*args, &block); end
end
module ActionView::Helpers::CspHelper
  def csp_meta_tag(**options); end
end
module ActionView::Helpers::CsrfHelper
  def csrf_meta_tag; end
  def csrf_meta_tags; end
end
module ActionView::Helpers::DateHelper
  def date_select(object_name, method, options = nil, html_options = nil); end
  def datetime_select(object_name, method, options = nil, html_options = nil); end
  def distance_of_time_in_words(from_time, to_time = nil, options = nil); end
  def distance_of_time_in_words_to_now(from_time, options = nil); end
  def normalize_distance_of_time_argument_to_time(value); end
  def select_date(date = nil, options = nil, html_options = nil); end
  def select_datetime(datetime = nil, options = nil, html_options = nil); end
  def select_day(date, options = nil, html_options = nil); end
  def select_hour(datetime, options = nil, html_options = nil); end
  def select_minute(datetime, options = nil, html_options = nil); end
  def select_month(date, options = nil, html_options = nil); end
  def select_second(datetime, options = nil, html_options = nil); end
  def select_time(datetime = nil, options = nil, html_options = nil); end
  def select_year(date, options = nil, html_options = nil); end
  def time_ago_in_words(from_time, options = nil); end
  def time_select(object_name, method, options = nil, html_options = nil); end
  def time_tag(date_or_time, *args, &block); end
end
class ActionView::Helpers::DateTimeSelector
  def build_hidden(type, value); end
  def build_options(selected, options = nil); end
  def build_options_and_select(type, selected, options = nil); end
  def build_select(type, select_options_as_html); end
  def build_selects_from_types(order); end
  def build_year_options(selected, options = nil); end
  def css_class_attribute(type, html_options_class, options); end
  def date_order; end
  def day; end
  def hour; end
  def initialize(datetime, options = nil, html_options = nil); end
  def input_id_from_type(type); end
  def input_name_from_type(type); end
  def min; end
  def month; end
  def month_name(number); end
  def month_names; end
  def prompt_option_tag(type, options); end
  def sec; end
  def select_date; end
  def select_datetime; end
  def select_day; end
  def select_hour; end
  def select_minute; end
  def select_month; end
  def select_second; end
  def select_time; end
  def select_year; end
  def separator(type); end
  def set_day_if_discarded; end
  def translated_date_order; end
  def translated_month_names; end
  def year; end
  def year_name(number); end
  include ActionView::Helpers::TagHelper
end
class ActionView::Helpers::FormBuilder
  def button(value = nil, options = nil, &block); end
  def check_box(method, options = nil, checked_value = nil, unchecked_value = nil); end
  def collection_check_boxes(method, collection, value_method, text_method, options = nil, html_options = nil, &block); end
  def collection_radio_buttons(method, collection, value_method, text_method, options = nil, html_options = nil, &block); end
  def collection_select(method, collection, value_method, text_method, options = nil, html_options = nil); end
  def color_field(method, options = nil); end
  def convert_to_legacy_options(options); end
  def date_field(method, options = nil); end
  def date_select(method, options = nil, html_options = nil); end
  def datetime_field(method, options = nil); end
  def datetime_local_field(method, options = nil); end
  def datetime_select(method, options = nil, html_options = nil); end
  def email_field(method, options = nil); end
  def emitted_hidden_id?; end
  def field_helpers; end
  def field_helpers=(val); end
  def field_helpers?; end
  def fields(scope = nil, model: nil, **options, &block); end
  def fields_for(record_name, record_object = nil, fields_options = nil, &block); end
  def fields_for_nested_model(name, object, fields_options, block); end
  def fields_for_with_nested_attributes(association_name, association, options, block); end
  def file_field(method, options = nil); end
  def grouped_collection_select(method, collection, group_method, group_label_method, option_key_method, option_value_method, options = nil, html_options = nil); end
  def hidden_field(method, options = nil); end
  def index; end
  def initialize(object_name, object, template, options); end
  def label(method, text = nil, options = nil, &block); end
  def month_field(method, options = nil); end
  def multipart; end
  def multipart=(multipart); end
  def multipart?; end
  def nested_attributes_association?(association_name); end
  def nested_child_index(name); end
  def number_field(method, options = nil); end
  def object; end
  def object=(arg0); end
  def object_name; end
  def object_name=(arg0); end
  def objectify_options(options); end
  def options; end
  def options=(arg0); end
  def password_field(method, options = nil); end
  def phone_field(method, options = nil); end
  def radio_button(method, tag_value, options = nil); end
  def range_field(method, options = nil); end
  def search_field(method, options = nil); end
  def select(method, choices = nil, options = nil, html_options = nil, &block); end
  def self._to_partial_path; end
  def self.field_helpers; end
  def self.field_helpers=(val); end
  def self.field_helpers?; end
  def submit(value = nil, options = nil); end
  def submit_default_value; end
  def telephone_field(method, options = nil); end
  def text_area(method, options = nil); end
  def text_field(method, options = nil); end
  def time_field(method, options = nil); end
  def time_select(method, options = nil, html_options = nil); end
  def time_zone_select(method, priority_zones = nil, options = nil, html_options = nil); end
  def to_model; end
  def to_partial_path; end
  def url_field(method, options = nil); end
  def week_field(method, options = nil); end
  include ActionView::ModelNaming
end
module ActionView::Helpers::DebugHelper
  def debug(object); end
  include ActionView::Helpers::TagHelper
end
module ActionView::Helpers::JavaScriptHelper
  def escape_javascript(javascript); end
  def j(javascript); end
  def javascript_cdata_section(content); end
  def javascript_tag(content_or_options_with_block = nil, html_options = nil, &block); end
end
module ActionView::Helpers::UrlHelper
  def _back_url; end
  def _filtered_referrer; end
  def add_method_to_attributes!(html_options, method); end
  def button_to(name = nil, options = nil, html_options = nil, &block); end
  def convert_options_to_data_attributes(options, html_options); end
  def current_page?(options, check_parameters: nil); end
  def link_to(name = nil, options = nil, html_options = nil, &block); end
  def link_to_if(condition, name, options = nil, html_options = nil, &block); end
  def link_to_remote_options?(options); end
  def link_to_unless(condition, name, options = nil, html_options = nil, &block); end
  def link_to_unless_current(name, options = nil, html_options = nil, &block); end
  def mail_to(email_address, name = nil, html_options = nil, &block); end
  def method_not_get_method?(method); end
  def method_tag(method); end
  def to_form_params(attribute, namespace = nil); end
  def token_tag(token = nil, form_options: nil); end
  def url_for(options = nil); end
  extend ActiveSupport::Concern
  include ActionView::Helpers::TagHelper
end
module ActionView::Helpers::UrlHelper::ClassMethods
  def _url_for_modules; end
end
module ActionView::Helpers::SanitizeHelper
  def sanitize(html, options = nil); end
  def sanitize_css(style); end
  def strip_links(html); end
  def strip_tags(html); end
  extend ActiveSupport::Concern
end
module ActionView::Helpers::SanitizeHelper::ClassMethods
  def full_sanitizer; end
  def full_sanitizer=(arg0); end
  def link_sanitizer; end
  def link_sanitizer=(arg0); end
  def sanitized_allowed_attributes; end
  def sanitized_allowed_tags; end
  def sanitizer_vendor; end
  def white_list_sanitizer; end
  def white_list_sanitizer=(arg0); end
end
module ActionView::Helpers::TextHelper
  def concat(string); end
  def current_cycle(name = nil); end
  def cut_excerpt_part(part_position, part, separator, options); end
  def cycle(first_value, *values); end
  def excerpt(text, phrase, options = nil); end
  def get_cycle(name); end
  def highlight(text, phrases, options = nil); end
  def pluralize(count, singular, plural_arg = nil, plural: nil, locale: nil); end
  def reset_cycle(name = nil); end
  def safe_concat(string); end
  def set_cycle(name, cycle_object); end
  def simple_format(text, html_options = nil, options = nil); end
  def split_paragraphs(text); end
  def truncate(text, options = nil, &block); end
  def word_wrap(text, line_width: nil, break_sequence: nil); end
  extend ActiveSupport::Concern
  include ActionView::Helpers::OutputSafetyHelper
  include ActionView::Helpers::SanitizeHelper
  include ActionView::Helpers::TagHelper
end
class ActionView::Helpers::TextHelper::Cycle
  def current_value; end
  def initialize(first_value, *values); end
  def next_index; end
  def previous_index; end
  def reset; end
  def step_index(n); end
  def to_s; end
  def values; end
end
module ActionView::Helpers::FormTagHelper
  def button_tag(content_or_options = nil, options = nil, &block); end
  def check_box_tag(name, value = nil, checked = nil, options = nil); end
  def color_field_tag(name, value = nil, options = nil); end
  def convert_direct_upload_option_to_url(options); end
  def date_field_tag(name, value = nil, options = nil); end
  def datetime_field_tag(name, value = nil, options = nil); end
  def datetime_local_field_tag(name, value = nil, options = nil); end
  def default_enforce_utf8; end
  def default_enforce_utf8=(obj); end
  def email_field_tag(name, value = nil, options = nil); end
  def embed_authenticity_token_in_remote_forms; end
  def embed_authenticity_token_in_remote_forms=(obj); end
  def extra_tags_for_form(html_options); end
  def field_set_tag(legend = nil, options = nil, &block); end
  def file_field_tag(name, options = nil); end
  def form_tag(url_for_options = nil, options = nil, &block); end
  def form_tag_html(html_options); end
  def form_tag_with_body(html_options, content); end
  def hidden_field_tag(name, value = nil, options = nil); end
  def html_options_for_form(url_for_options, options); end
  def image_submit_tag(source, options = nil); end
  def label_tag(name = nil, content_or_options = nil, options = nil, &block); end
  def month_field_tag(name, value = nil, options = nil); end
  def number_field_tag(name, value = nil, options = nil); end
  def password_field_tag(name = nil, value = nil, options = nil); end
  def phone_field_tag(name, value = nil, options = nil); end
  def radio_button_tag(name, value, checked = nil, options = nil); end
  def range_field_tag(name, value = nil, options = nil); end
  def sanitize_to_id(name); end
  def search_field_tag(name, value = nil, options = nil); end
  def select_tag(name, option_tags = nil, options = nil); end
  def self.default_enforce_utf8; end
  def self.default_enforce_utf8=(obj); end
  def self.embed_authenticity_token_in_remote_forms; end
  def self.embed_authenticity_token_in_remote_forms=(obj); end
  def set_default_disable_with(value, tag_options); end
  def submit_tag(value = nil, options = nil); end
  def telephone_field_tag(name, value = nil, options = nil); end
  def text_area_tag(name, content = nil, options = nil); end
  def text_field_tag(name, value = nil, options = nil); end
  def time_field_tag(name, value = nil, options = nil); end
  def url_field_tag(name, value = nil, options = nil); end
  def utf8_enforcer_tag; end
  def week_field_tag(name, value = nil, options = nil); end
  extend ActiveSupport::Concern
  include ActionView::Helpers::TextHelper
  include ActionView::Helpers::UrlHelper
end
module ActionView::ModelNaming
  def convert_to_model(object); end
  def model_name_from_record_or_class(record_or_class); end
end
module ActionView::RecordIdentifier
  def dom_class(record_or_class, prefix = nil); end
  def dom_id(record, prefix = nil); end
  def record_key_for_dom_id(record); end
  extend ActionView::ModelNaming
  extend ActionView::RecordIdentifier
  include ActionView::ModelNaming
end
module ActionView::Helpers::FormHelper
  def apply_form_for_options!(record, object, options); end
  def check_box(object_name, method, options = nil, checked_value = nil, unchecked_value = nil); end
  def color_field(object_name, method, options = nil); end
  def date_field(object_name, method, options = nil); end
  def datetime_field(object_name, method, options = nil); end
  def datetime_local_field(object_name, method, options = nil); end
  def default_form_builder; end
  def default_form_builder=(arg0); end
  def default_form_builder_class; end
  def email_field(object_name, method, options = nil); end
  def fields(scope = nil, model: nil, **options, &block); end
  def fields_for(record_name, record_object = nil, options = nil, &block); end
  def file_field(object_name, method, options = nil); end
  def form_for(record, options = nil, &block); end
  def form_with(model: nil, scope: nil, url: nil, format: nil, **options, &block); end
  def form_with_generates_ids; end
  def form_with_generates_ids=(obj); end
  def form_with_generates_remote_forms; end
  def form_with_generates_remote_forms=(obj); end
  def hidden_field(object_name, method, options = nil); end
  def html_options_for_form_with(url_for_options = nil, model = nil, html: nil, local: nil, skip_enforcing_utf8: nil, **options); end
  def instantiate_builder(record_name, record_object, options); end
  def label(object_name, method, content_or_options = nil, options = nil, &block); end
  def month_field(object_name, method, options = nil); end
  def number_field(object_name, method, options = nil); end
  def password_field(object_name, method, options = nil); end
  def phone_field(object_name, method, options = nil); end
  def radio_button(object_name, method, tag_value, options = nil); end
  def range_field(object_name, method, options = nil); end
  def search_field(object_name, method, options = nil); end
  def self.form_with_generates_ids; end
  def self.form_with_generates_ids=(obj); end
  def self.form_with_generates_remote_forms; end
  def self.form_with_generates_remote_forms=(obj); end
  def telephone_field(object_name, method, options = nil); end
  def text_area(object_name, method, options = nil); end
  def text_field(object_name, method, options = nil); end
  def time_field(object_name, method, options = nil); end
  def url_field(object_name, method, options = nil); end
  def week_field(object_name, method, options = nil); end
  extend ActiveSupport::Concern
  include ActionView::Helpers::FormTagHelper
  include ActionView::Helpers::UrlHelper
  include ActionView::ModelNaming
  include ActionView::RecordIdentifier
end
module ActionView::Helpers::FormOptionsHelper
  def collection_check_boxes(object, method, collection, value_method, text_method, options = nil, html_options = nil, &block); end
  def collection_radio_buttons(object, method, collection, value_method, text_method, options = nil, html_options = nil, &block); end
  def collection_select(object, method, collection, value_method, text_method, options = nil, html_options = nil); end
  def extract_selected_and_disabled(selected); end
  def extract_values_from_collection(collection, value_method, selected); end
  def grouped_collection_select(object, method, collection, group_method, group_label_method, option_key_method, option_value_method, options = nil, html_options = nil); end
  def grouped_options_for_select(grouped_options, selected_key = nil, options = nil); end
  def option_groups_from_collection_for_select(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key = nil); end
  def option_html_attributes(element); end
  def option_text_and_value(option); end
  def option_value_selected?(value, selected); end
  def options_for_select(container, selected = nil); end
  def options_from_collection_for_select(collection, value_method, text_method, selected = nil); end
  def prompt_text(prompt); end
  def public_or_deprecated_send(item, value); end
  def select(object, method, choices = nil, options = nil, html_options = nil, &block); end
  def time_zone_options_for_select(selected = nil, priority_zones = nil, model = nil); end
  def time_zone_select(object, method, priority_zones = nil, options = nil, html_options = nil); end
  def value_for_collection(item, value); end
  extend ActionView::Helpers::SanitizeHelper::ClassMethods
  include ActionView::Helpers::SanitizeHelper
  include ActionView::Helpers::TagHelper
  include ActionView::Helpers::TextHelper
end
module ActionView::Helpers::NumberHelper
  def delegate_number_helper_method(method, number, options); end
  def escape_units(units); end
  def escape_unsafe_options(options); end
  def number_to_currency(number, options = nil); end
  def number_to_human(number, options = nil); end
  def number_to_human_size(number, options = nil); end
  def number_to_percentage(number, options = nil); end
  def number_to_phone(number, options = nil); end
  def number_with_delimiter(number, options = nil); end
  def number_with_precision(number, options = nil); end
  def parse_float(number, raise_error); end
  def valid_float?(number); end
  def wrap_with_output_safety_handling(number, raise_on_invalid, &block); end
end
class ActionView::Helpers::NumberHelper::InvalidNumberError < StandardError
  def initialize(number); end
  def number; end
  def number=(arg0); end
end
module ActionView::Helpers::RenderingHelper
  def _layout_for(*args, &block); end
  def render(options = nil, locals = nil, &block); end
end
module ActionView::Helpers::TranslationHelper
  def html_safe_translation_key?(key); end
  def l(*args); end
  def localize(*args); end
  def scope_key_by_partial(key); end
  def t(key, options = nil); end
  def translate(key, options = nil); end
  extend ActiveSupport::Concern
  include ActionView::Helpers::TagHelper
end
module ActionView::Context
  def _layout_for(name = nil); end
  def _prepare_context; end
  def output_buffer; end
  def output_buffer=(arg0); end
  def view_flow; end
  def view_flow=(arg0); end
end
class ActionView::LookupContext
  def digest_cache; end
  def fallbacks; end
  def fallbacks=(obj); end
  def formats=(values); end
  def initialize(view_paths, details = nil, prefixes = nil); end
  def initialize_details(target, details); end
  def locale; end
  def locale=(value); end
  def prefixes; end
  def prefixes=(arg0); end
  def registered_details; end
  def registered_details=(obj); end
  def rendered_format(*args, &block); end
  def rendered_format=(*args, &block); end
  def self.fallbacks; end
  def self.fallbacks=(obj); end
  def self.register_detail(name, &block); end
  def self.registered_details; end
  def self.registered_details=(obj); end
  def with_prepended_formats(formats); end
  include ActionView::LookupContext::Accessors
  include ActionView::LookupContext::DetailsCache
  include ActionView::LookupContext::ViewPaths
end
module ActionView::LookupContext::Accessors
  def default_formats; end
  def default_handlers; end
  def default_locale; end
  def default_variants; end
  def formats; end
  def formats=(value); end
  def handlers; end
  def handlers=(value); end
  def locale; end
  def locale=(value); end
  def variants; end
  def variants=(value); end
end
class ActionView::LookupContext::DetailsKey
  def eql?(arg0); end
  def self.clear; end
  def self.details_cache_key(details); end
  def self.digest_cache(details); end
  def self.digest_caches; end
  def self.view_context_class(klass); end
end
module ActionView::LookupContext::DetailsCache
  def _set_detail(key, value); end
  def cache; end
  def cache=(arg0); end
  def details_key; end
  def disable_cache; end
end
module ActionView::LookupContext::ViewPaths
  def any?(name, prefixes = nil, partial = nil); end
  def any_templates?(name, prefixes = nil, partial = nil); end
  def args_for_any(name, prefixes, partial); end
  def args_for_lookup(name, prefixes, partial, keys, details_options); end
  def build_view_paths(paths); end
  def detail_args_for(options); end
  def detail_args_for_any; end
  def exists?(name, prefixes = nil, partial = nil, keys = nil, **options); end
  def find(name, prefixes = nil, partial = nil, keys = nil, options = nil); end
  def find_all(name, prefixes = nil, partial = nil, keys = nil, options = nil); end
  def find_file(*args, &block); end
  def find_template(name, prefixes = nil, partial = nil, keys = nil, options = nil); end
  def html_fallback_for_js; end
  def normalize_name(name, prefixes); end
  def template_exists?(name, prefixes = nil, partial = nil, keys = nil, **options); end
  def view_paths; end
  def with_fallbacks; end
end
class ActionView::Template::Types
  def self.[](type); end
  def self.delegate_to(klass); end
  def self.symbols; end
  def self.type_klass; end
  def self.type_klass=(obj); end
  def type_klass; end
  def type_klass=(obj); end
end
class ActionView::Template::Types::Type
  def ==(type); end
  def initialize(symbol); end
  def ref; end
  def self.[](type); end
  def symbol; end
  def to_s; end
  def to_str; end
  def to_sym; end
end
class ActionView::CacheExpiry
  def all_view_paths; end
  def clear_cache; end
  def clear_cache_if_necessary; end
  def dirs_to_watch; end
  def initialize(watcher:); end
end
class ActionView::CacheExpiry::Executor
  def before(target); end
  def initialize(watcher:); end
end
class ActionView::Base
  def _routes; end
  def _routes=(val); end
  def _routes?; end
  def _run(method, template, locals, buffer, &block); end
  def assign(new_assigns); end
  def assigns; end
  def assigns=(arg0); end
  def automatically_disable_submit_tag; end
  def automatically_disable_submit_tag=(obj); end
  def compiled_method_container; end
  def config; end
  def config=(arg0); end
  def debug_missing_translation; end
  def debug_missing_translation=(obj); end
  def default_formats; end
  def default_formats=(obj); end
  def field_error_proc; end
  def field_error_proc=(obj); end
  def formats(*args, &block); end
  def formats=(arg); end
  def in_rendering_context(options); end
  def initialize(lookup_context = nil, assigns = nil, controller = nil, formats = nil); end
  def locale(*args, &block); end
  def locale=(arg); end
  def logger; end
  def logger=(val); end
  def logger?; end
  def lookup_context; end
  def prefix_partial_path_with_controller_namespace; end
  def prefix_partial_path_with_controller_namespace=(obj); end
  def raise_on_missing_translations; end
  def raise_on_missing_translations=(obj); end
  def self._routes; end
  def self._routes=(val); end
  def self._routes?; end
  def self.automatically_disable_submit_tag; end
  def self.automatically_disable_submit_tag=(obj); end
  def self.build_lookup_context(context); end
  def self.cache_template_loading; end
  def self.cache_template_loading=(value); end
  def self.changed?(other); end
  def self.debug_missing_translation; end
  def self.debug_missing_translation=(obj); end
  def self.default_form_builder; end
  def self.default_form_builder=(obj); end
  def self.default_formats; end
  def self.default_formats=(obj); end
  def self.empty; end
  def self.erb_trim_mode=(arg); end
  def self.field_error_proc; end
  def self.field_error_proc=(obj); end
  def self.logger; end
  def self.logger=(val); end
  def self.logger?; end
  def self.prefix_partial_path_with_controller_namespace; end
  def self.prefix_partial_path_with_controller_namespace=(obj); end
  def self.raise_on_missing_translations; end
  def self.raise_on_missing_translations=(obj); end
  def self.streaming_completion_on_exception; end
  def self.streaming_completion_on_exception=(obj); end
  def self.with_context(context, assigns = nil, controller = nil); end
  def self.with_empty_template_cache; end
  def self.with_view_paths(view_paths, assigns = nil, controller = nil); end
  def self.xss_safe?; end
  def streaming_completion_on_exception; end
  def streaming_completion_on_exception=(obj); end
  def view_paths(*args, &block); end
  def view_paths=(arg); end
  def view_renderer; end
  extend ActionView::Helpers::SanitizeHelper::ClassMethods
  extend ActionView::Helpers::SanitizeHelper::ClassMethods
  extend ActionView::Helpers::UrlHelper::ClassMethods
  include ActionView::Helpers
  include ActionView::Helpers::AssetTagHelper
  include ActionView::Helpers::FormHelper
  include ActionView::Helpers::FormTagHelper
  include ActionView::Helpers::FormTagHelper
  include ActionView::Helpers::SanitizeHelper
  include ActionView::Helpers::SanitizeHelper
  include ActionView::Helpers::TagHelper
  include ActionView::Helpers::TagHelper
  include ActionView::Helpers::TagHelper
  include ActionView::Helpers::TagHelper
  include ActionView::Helpers::TagHelper
  include ActionView::Helpers::TextHelper
  include ActionView::Helpers::TextHelper
  include ActionView::Helpers::TranslationHelper
  include ActionView::Helpers::UrlHelper
  include ActionView::Helpers::UrlHelper
  include ActionView::Helpers::UrlHelper
  include Devise::Controllers::UrlHelpers
end
class ActionDispatch::DebugExceptions
  def api_request?(content_type); end
  def call(env); end
  def create_template(request, wrapper); end
  def initialize(app, routes_app = nil, response_format = nil, interceptors = nil); end
  def invoke_interceptors(request, exception); end
  def log_array(logger, array); end
  def log_error(request, wrapper); end
  def logger(request); end
  def render(status, body, format); end
  def render_exception(request, exception); end
  def render_for_api_request(content_type, wrapper); end
  def render_for_browser_request(request, wrapper); end
  def routes_inspector(exception); end
  def self.interceptors; end
  def self.register_interceptor(object = nil, &block); end
  def stderr_logger; end
end
class ActionDispatch::ActionableExceptions
  def actionable_request?(request); end
  def call(env); end
  def endpoint; end
  def endpoint=(obj); end
  def initialize(app); end
  def redirect_to(location); end
  def self.endpoint; end
  def self.endpoint=(obj); end
end
class ActionDispatch::Reloader < ActionDispatch::Executor
end
class ActionDispatch::Request::Session
  def [](key); end
  def []=(key, value); end
  def clear; end
  def delete(key); end
  def destroy; end
  def dig(*keys); end
  def each(&block); end
  def empty?; end
  def exists?; end
  def fetch(key, default = nil, &block); end
  def has_key?(key); end
  def id; end
  def include?(key); end
  def initialize(by, req); end
  def inspect; end
  def key?(key); end
  def keys; end
  def load!; end
  def load_for_read!; end
  def load_for_write!; end
  def loaded?; end
  def merge!(other); end
  def options; end
  def self.create(store, req, default_options); end
  def self.find(req); end
  def self.set(req, session); end
  def stringify_keys(other); end
  def to_h; end
  def to_hash; end
  def update(hash); end
  def values; end
end
class ActionDispatch::Request::Session::Options
  def [](key); end
  def []=(k, v); end
  def id(req); end
  def initialize(by, default_options); end
  def self.find(req); end
  def self.set(req, options); end
  def to_hash; end
  def values_at(*args); end
end
class ActionDispatch::Session::SessionRestoreError < StandardError
  def initialize; end
end
module ActionDispatch::Session::Compatibility
  def generate_sid; end
  def initialize(app, options = nil); end
  def initialize_sid; end
  def make_request(env); end
end
module ActionDispatch::Session::StaleSessionCheck
  def extract_session_id(env); end
  def load_session(env); end
  def stale_session_check!; end
end
module ActionDispatch::Session::SessionObject
  def loaded_session?(session); end
  def prepare_session(req); end
end
class ActionDispatch::Session::AbstractStore < Rack::Session::Abstract::Persisted
  def set_cookie(request, session_id, cookie); end
  include ActionDispatch::Session::Compatibility
  include ActionDispatch::Session::SessionObject
  include ActionDispatch::Session::StaleSessionCheck
end
class ActionDispatch::Session::CookieStore < ActionDispatch::Session::AbstractStore
  def cookie_jar(request); end
  def delete_session(req, session_id, options); end
  def extract_session_id(req); end
  def get_cookie(req); end
  def initialize(app, options = nil); end
  def load_session(req); end
  def persistent_session_id!(data, sid = nil); end
  def set_cookie(request, session_id, cookie); end
  def unpacked_cookie_data(req); end
  def write_session(req, sid, session_data, options); end
end
class ActionDispatch::Flash
  def self.new(app); end
end
module ActionDispatch::Flash::RequestMethods
  def commit_flash; end
  def flash; end
  def flash=(flash); end
  def flash_hash; end
  def reset_session; end
end
class ActionDispatch::Flash::FlashNow
  def [](k); end
  def []=(k, v); end
  def alert=(message); end
  def flash; end
  def flash=(arg0); end
  def initialize(flash); end
  def notice=(message); end
end
class ActionDispatch::Flash::FlashHash
  def [](k); end
  def []=(k, v); end
  def alert; end
  def alert=(message); end
  def clear; end
  def delete(key); end
  def discard(k = nil); end
  def each(&block); end
  def empty?; end
  def initialize(flashes = nil, discard = nil); end
  def initialize_copy(other); end
  def keep(k = nil); end
  def key?(name); end
  def keys; end
  def merge!(h); end
  def notice; end
  def notice=(message); end
  def now; end
  def now_is_loaded?; end
  def replace(h); end
  def self.from_session_value(value); end
  def stringify_array(array); end
  def sweep; end
  def to_hash; end
  def to_session_value; end
  def update(h); end
  include Enumerable
end
class ActiveSupport::Digest
  def self.hash_digest_class; end
  def self.hash_digest_class=(klass); end
  def self.hexdigest(arg); end
end
module ActiveJob::Serializers
  def _additional_serializers; end
  def _additional_serializers=(obj); end
  def self._additional_serializers; end
  def self._additional_serializers=(obj); end
  def self.add_serializers(*new_serializers); end
  def self.deserialize(argument); end
  def self.serialize(argument); end
  def self.serializers; end
  extend ActiveSupport::Autoload
end
class ActiveJob::Serializers::ObjectSerializer
  def deserialize(_argument); end
  def klass; end
  def self.allocate; end
  def self.deserialize(*args, &block); end
  def self.instance; end
  def self.new(*arg0); end
  def self.serialize(*args, &block); end
  def self.serialize?(*args, &block); end
  def serialize(hash); end
  def serialize?(argument); end
  extend Singleton::SingletonClassMethods
  include Singleton
end
class ActiveJob::Serializers::SymbolSerializer < ActiveJob::Serializers::ObjectSerializer
  def deserialize(argument); end
  def klass; end
  def self.instance; end
  def serialize(argument); end
end
class ActiveJob::Serializers::DurationSerializer < ActiveJob::Serializers::ObjectSerializer
  def deserialize(hash); end
  def klass; end
  def self.instance; end
  def serialize(duration); end
end
class ActiveJob::Serializers::DateTimeSerializer < ActiveJob::Serializers::ObjectSerializer
  def deserialize(hash); end
  def klass; end
  def self.instance; end
  def serialize(time); end
end
class ActiveJob::Serializers::DateSerializer < ActiveJob::Serializers::ObjectSerializer
  def deserialize(hash); end
  def klass; end
  def self.instance; end
  def serialize(date); end
end
class ActiveJob::Serializers::TimeWithZoneSerializer < ActiveJob::Serializers::ObjectSerializer
  def deserialize(hash); end
  def klass; end
  def self.instance; end
  def serialize(time); end
end
class ActiveJob::Serializers::TimeSerializer < ActiveJob::Serializers::ObjectSerializer
  def deserialize(hash); end
  def klass; end
  def self.instance; end
  def serialize(time); end
end
module ActiveRecord::Migration::Compatibility
  def self.find(version); end
end
class ActiveRecord::Migration::Compatibility::V6_0 < ActiveRecord::Migration::Current
end
class ActiveRecord::Migration::Compatibility::V5_2 < ActiveRecord::Migration::Compatibility::V6_0
  def add_timestamps(table_name, **options); end
  def change_table(table_name, **options); end
  def command_recorder; end
  def compatible_table_definition(t); end
  def create_join_table(table_1, table_2, **options); end
  def create_table(table_name, **options); end
end
module ActiveRecord::Migration::Compatibility::V5_2::TableDefinition
  def timestamps(**options); end
end
module ActiveRecord::Migration::Compatibility::V5_2::CommandRecorder
  def invert_change_column_comment(args); end
  def invert_change_table_comment(args); end
  def invert_transaction(args, &block); end
end
class ActiveRecord::Migration::Compatibility::V5_1 < ActiveRecord::Migration::Compatibility::V5_2
  def change_column(table_name, column_name, type, options = nil); end
  def create_table(table_name, options = nil); end
end
class ActiveRecord::Migration::Compatibility::V5_0 < ActiveRecord::Migration::Compatibility::V5_1
  def add_belongs_to(table_name, ref_name, **options); end
  def add_column(table_name, column_name, type, options = nil); end
  def add_reference(table_name, ref_name, **options); end
  def compatible_table_definition(t); end
  def create_join_table(table_1, table_2, column_options: nil, **options); end
  def create_table(table_name, options = nil); end
end
module ActiveRecord::Migration::Compatibility::V5_0::TableDefinition
  def belongs_to(*args, **options); end
  def primary_key(name, type = nil, **options); end
  def references(*args, **options); end
end
class ActiveRecord::Migration::Compatibility::V4_2 < ActiveRecord::Migration::Compatibility::V5_0
  def add_belongs_to(table_name, ref_name, **options); end
  def add_reference(table_name, ref_name, **options); end
  def add_timestamps(table_name, **options); end
  def compatible_table_definition(t); end
  def index_exists?(table_name, column_name, options = nil); end
  def index_name_for_remove(table_name, options = nil); end
  def remove_index(table_name, options = nil); end
end
module ActiveRecord::Migration::Compatibility::V4_2::TableDefinition
  def belongs_to(*arg0, **options); end
  def references(*arg0, **options); end
  def timestamps(**options); end
end
