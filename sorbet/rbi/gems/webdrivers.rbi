# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/webdrivers/all/webdrivers.rbi
#
# webdrivers-c8440df645fd
module Webdrivers
  def self.cache_time; end
  def self.cache_time=(arg0); end
  def self.configure; end
  def self.install_dir; end
  def self.install_dir=(arg0); end
  def self.logger; end
  def self.net_http_ssl_fix; end
  def self.proxy_addr; end
  def self.proxy_addr=(arg0); end
  def self.proxy_pass; end
  def self.proxy_pass=(arg0); end
  def self.proxy_port; end
  def self.proxy_port=(arg0); end
  def self.proxy_user; end
  def self.proxy_user=(arg0); end
end
class Webdrivers::Logger
  def create_logger(output); end
  def debug(*args, &block); end
  def debug?(*args, &block); end
  def deprecate(old, new); end
  def error(*args, &block); end
  def error?(*args, &block); end
  def fatal(*args, &block); end
  def fatal?(*args, &block); end
  def info(*args, &block); end
  def info?(*args, &block); end
  def initialize; end
  def io; end
  def level(*args, &block); end
  def level=(severity); end
  def output=(io); end
  def warn(*args, &block); end
  def warn?(*args, &block); end
  extend Forwardable
  include Logger::Severity
end
class Webdrivers::Network
  def self.get(url, limit = nil); end
  def self.get_response(url, limit = nil); end
  def self.get_url(url, limit = nil); end
  def self.http; end
  def self.using_proxy; end
end
class Webdrivers::System
  def self.bitsize; end
  def self.cache_version(file_name, version); end
  def self.cached_version(file_name); end
  def self.call(cmd); end
  def self.decompress_file(tempfile, file_name, target); end
  def self.delete(file); end
  def self.download(url, target); end
  def self.download_file(url, target); end
  def self.escape_path(path); end
  def self.exists?(file); end
  def self.install_dir; end
  def self.platform; end
  def self.untarbz2_file(filename); end
  def self.untargz_file(source, target); end
  def self.unzip_file(filename); end
  def self.valid_cache?(file_name); end
end
class Webdrivers::ConnectionError < StandardError
end
class Webdrivers::VersionError < StandardError
end
class Webdrivers::NetworkError < StandardError
end
class Webdrivers::Common
  def self.binary_version; end
  def self.correct_binary?; end
  def self.download_url; end
  def self.driver_path; end
  def self.exists?; end
  def self.normalize_version(version); end
  def self.remove; end
  def self.required_version; end
  def self.required_version=(arg0); end
  def self.sufficient_binary?; end
  def self.update; end
  def self.with_cache(file_name); end
end
class Webdrivers::ChromeFinder
  def self.linux_location; end
  def self.linux_version(location); end
  def self.mac_location; end
  def self.mac_version(location); end
  def self.version; end
  def self.win_location; end
  def self.win_version(location); end
end
class Webdrivers::Chromedriver < Webdrivers::Common
  def self.base_url; end
  def self.chrome_version; end
  def self.current_version; end
  def self.download_url; end
  def self.file_name; end
  def self.latest_point_release(version); end
  def self.latest_version; end
  def self.release_version; end
  def self.sufficient_binary?; end
end
class Webdrivers::Geckodriver < Webdrivers::Common
  def self.base_url; end
  def self.current_version; end
  def self.direct_url(version); end
  def self.download_url; end
  def self.file_name; end
  def self.latest_version; end
  def self.platform_ext; end
end
class Webdrivers::IEdriver < Webdrivers::Common
  def self.base_url; end
  def self.current_version; end
  def self.downloads; end
  def self.file_name; end
  def self.latest_version; end
end
class Webdrivers::Railtie < Rails::Railtie
end
