# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `graphql-fragment_cache` gem.
# Please instead update this file by running `bin/tapioca gem graphql-fragment_cache`.


# source://graphql-fragment_cache//lib/graphql/fragment_cache/graphql_ruby_version.rb#5
module GraphQL
  class << self
    # source://graphql/2.0.31/lib/graphql.rb#35
    def default_parser; end

    # source://graphql/2.0.31/lib/graphql.rb#39
    def default_parser=(_arg0); end

    # source://graphql/2.0.31/lib/graphql.rb#45
    def parse(graphql_string, trace: T.unsafe(nil)); end

    # source://graphql/2.0.31/lib/graphql.rb#52
    def parse_file(filename); end

    # source://graphql/2.0.31/lib/graphql.rb#62
    def parse_with_racc(string, filename: T.unsafe(nil), trace: T.unsafe(nil)); end

    # source://graphql/2.0.31/lib/graphql.rb#58
    def scan(graphql_string); end

    # source://graphql/2.0.31/lib/graphql.rb#66
    def scan_with_ruby(graphql_string); end
  end
end

# Plugin definition
#
# source://graphql-fragment_cache//lib/graphql/fragment_cache/graphql_ruby_version.rb#6
module GraphQL::FragmentCache
  class << self
    # Returns the value of attribute cache_store.
    #
    # source://graphql-fragment_cache//lib/graphql/fragment_cache.rb#26
    def cache_store; end

    # source://graphql-fragment_cache//lib/graphql/fragment_cache.rb#53
    def cache_store=(store); end

    # @yield [_self]
    # @yieldparam _self [GraphQL::FragmentCache] the object that the method was called on
    #
    # source://graphql-fragment_cache//lib/graphql/fragment_cache.rb#49
    def configure; end

    # Returns the value of attribute default_options.
    #
    # source://graphql-fragment_cache//lib/graphql/fragment_cache.rb#29
    def default_options; end

    # Sets the attribute default_options
    #
    # @param value the value to set the attribute default_options to.
    #
    # source://graphql-fragment_cache//lib/graphql/fragment_cache.rb#29
    def default_options=(_arg0); end

    # Returns the value of attribute enabled.
    #
    # source://graphql-fragment_cache//lib/graphql/fragment_cache.rb#27
    def enabled; end

    # Sets the attribute enabled
    #
    # @param value the value to set the attribute enabled to.
    #
    # source://graphql-fragment_cache//lib/graphql/fragment_cache.rb#27
    def enabled=(_arg0); end

    # Returns the value of attribute namespace.
    #
    # source://graphql-fragment_cache//lib/graphql/fragment_cache.rb#28
    def namespace; end

    # Sets the attribute namespace
    #
    # @param value the value to set the attribute namespace to.
    #
    # source://graphql-fragment_cache//lib/graphql/fragment_cache.rb#28
    def namespace=(_arg0); end

    # Returns the value of attribute skip_cache_when_query_has_errors.
    #
    # source://graphql-fragment_cache//lib/graphql/fragment_cache.rb#31
    def skip_cache_when_query_has_errors; end

    # Sets the attribute skip_cache_when_query_has_errors
    #
    # @param value the value to set the attribute skip_cache_when_query_has_errors to.
    #
    # source://graphql-fragment_cache//lib/graphql/fragment_cache.rb#31
    def skip_cache_when_query_has_errors=(_arg0); end

    # Returns the value of attribute skip_cache_when_query_has_errors.
    #
    # source://graphql-fragment_cache//lib/graphql/fragment_cache.rb#31
    def skip_cache_when_query_has_errors?; end

    # source://graphql-fragment_cache//lib/graphql/fragment_cache.rb#33
    def use(schema_defn, options = T.unsafe(nil)); end

    private

    # source://graphql-fragment_cache//lib/graphql/fragment_cache.rb#69
    def check_graphql_version(predicate); end

    # source://graphql-fragment_cache//lib/graphql/fragment_cache.rb#73
    def verify_interpreter_and_analysis!(schema_defn); end
  end
end

# Extends key builder to use .expand_cache_key in Rails
#
# source://graphql-fragment_cache//lib/graphql/fragment_cache/cache_key_builder.rb#122
class GraphQL::FragmentCache::CacheKeyBuilder
  # @return [CacheKeyBuilder] a new instance of CacheKeyBuilder
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/cache_key_builder.rb#133
  def initialize(query:, path:, object: T.unsafe(nil), **options); end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/cache_key_builder.rb#141
  def build; end

  # Returns the value of attribute object.
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/cache_key_builder.rb#131
  def object; end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/rails/cache_key_builder.rb#7
  def object_key(obj); end

  # Returns the value of attribute path.
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/cache_key_builder.rb#131
  def path; end

  # Returns the value of attribute query.
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/cache_key_builder.rb#131
  def query; end

  # Returns the value of attribute schema.
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/cache_key_builder.rb#131
  def schema; end

  private

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/cache_key_builder.rb#157
  def implicit_cache_key; end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/cache_key_builder.rb#212
  def object_cache_key; end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/cache_key_builder.rb#187
  def path_cache_key; end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/cache_key_builder.rb#165
  def query_cache_key; end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/cache_key_builder.rb#161
  def schema_cache_key; end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/cache_key_builder.rb#169
  def selections_cache_key; end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/cache_key_builder.rb#181
  def simple_path_cache_key; end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/cache_key_builder.rb#206
  def traverse_argument(argument); end

  class << self
    # source://graphql-fragment_cache//lib/graphql/fragment_cache/cache_key_builder.rb#126
    def call(**options); end
  end
end

# Saves resolved fragment values to cache store
#
# source://graphql-fragment_cache//lib/graphql/fragment_cache/cacher.rb#31
module GraphQL::FragmentCache::Cacher
  class << self
    # source://graphql-fragment_cache//lib/graphql/fragment_cache/cacher.rb#33
    def call(query); end

    private

    # source://graphql-fragment_cache//lib/graphql/fragment_cache/cacher.rb#45
    def batched_persist(query); end

    # source://graphql-fragment_cache//lib/graphql/fragment_cache/cacher.rb#57
    def persist(query); end

    # source://graphql-fragment_cache//lib/graphql/fragment_cache/cacher.rb#65
    def select_valid_fragments(query); end
  end
end

# source://graphql-fragment_cache//lib/graphql/fragment_cache/connections/patch.rb#5
module GraphQL::FragmentCache::Connections; end

# Patches GraphQL::Pagination::Connections to support raw values
#
# source://graphql-fragment_cache//lib/graphql/fragment_cache/connections/patch.rb#7
module GraphQL::FragmentCache::Connections::Patch
  private

  # @return [Boolean]
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/connections/patch.rb#20
  def raw_value?(value); end
end

# source://graphql-fragment_cache//lib/graphql/fragment_cache/ext/context_fragments.rb#5
module GraphQL::FragmentCache::Ext; end

# Wraps resolver with cache method
#
# source://graphql-fragment_cache//lib/graphql/fragment_cache/field_extension.rb#8
class GraphQL::FragmentCache::FieldExtension < ::GraphQL::Schema::FieldExtension
  # @return [FieldExtension] a new instance of FieldExtension
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/field_extension.rb#32
  def initialize(options:, **_rest); end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/field_extension.rb#48
  def resolve(object:, arguments:, **_options); end
end

# source://graphql-fragment_cache//lib/graphql/fragment_cache/field_extension.rb#46
GraphQL::FragmentCache::FieldExtension::NOT_RESOLVED = T.let(T.unsafe(nil), Object)

# source://graphql-fragment_cache//lib/graphql/fragment_cache/field_extension.rb#9
module GraphQL::FragmentCache::FieldExtension::Patch
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/field_extension.rb#10
  def initialize(*args, **kwargs, &block); end

  private

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/field_extension.rb#23
  def build_extension(options); end
end

# Represents a single fragment to cache
#
# source://graphql-fragment_cache//lib/graphql/fragment_cache/fragment.rb#10
class GraphQL::FragmentCache::Fragment
  # @return [Fragment] a new instance of Fragment
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/fragment.rb#41
  def initialize(context, **options); end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/fragment.rb#55
  def cache_key; end

  # Returns the value of attribute context.
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/fragment.rb#39
  def context; end

  # Returns the value of attribute options.
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/fragment.rb#39
  def options; end

  # Returns the value of attribute path.
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/fragment.rb#39
  def path; end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/fragment.rb#48
  def read; end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/fragment.rb#63
  def value; end

  # @return [Boolean]
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/fragment.rb#59
  def with_final_value?; end

  private

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/fragment.rb#87
  def final_value; end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/fragment.rb#83
  def interpreter_context; end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/fragment.rb#69
  def read_from_context; end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/fragment.rb#77
  def value_from_cache; end

  class << self
    # source://graphql-fragment_cache//lib/graphql/fragment_cache/fragment.rb#14
    def read_multi(fragments); end
  end
end

# source://graphql-fragment_cache//lib/graphql/fragment_cache/fragment.rb#11
GraphQL::FragmentCache::Fragment::NIL_IN_CACHE = T.let(T.unsafe(nil), Object)

# source://graphql-fragment_cache//lib/graphql/fragment_cache/graphql_ruby_version.rb#7
module GraphQL::FragmentCache::GraphRubyVersion
  private

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/graphql_ruby_version.rb#14
  def after_2_0_13?; end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/graphql_ruby_version.rb#22
  def after_2_2_5?; end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/graphql_ruby_version.rb#10
  def before_2_0?; end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/graphql_ruby_version.rb#18
  def before_2_1_4?; end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/graphql_ruby_version.rb#26
  def check_graphql_version(predicate); end

  class << self
    # @return [Boolean]
    #
    # source://graphql-fragment_cache//lib/graphql/fragment_cache/graphql_ruby_version.rb#14
    def after_2_0_13?; end

    # @return [Boolean]
    #
    # source://graphql-fragment_cache//lib/graphql/fragment_cache/graphql_ruby_version.rb#22
    def after_2_2_5?; end

    # @return [Boolean]
    #
    # source://graphql-fragment_cache//lib/graphql/fragment_cache/graphql_ruby_version.rb#10
    def before_2_0?; end

    # @return [Boolean]
    #
    # source://graphql-fragment_cache//lib/graphql/fragment_cache/graphql_ruby_version.rb#18
    def before_2_1_4?; end

    # source://graphql-fragment_cache//lib/graphql/fragment_cache/graphql_ruby_version.rb#26
    def check_graphql_version(predicate); end
  end
end

# Memory adapter for storing cached fragments
#
# source://graphql-fragment_cache//lib/graphql/fragment_cache/memory_store.rb#8
class GraphQL::FragmentCache::MemoryStore
  # @raise [ArgumentError]
  # @return [MemoryStore] a new instance of MemoryStore
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/memory_store.rb#19
  def initialize(expires_in: T.unsafe(nil), **other); end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/memory_store.rb#56
  def clear; end

  # Returns the value of attribute default_expires_in.
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/memory_store.rb#17
  def default_expires_in; end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/memory_store.rb#51
  def delete(key); end

  # @return [Boolean]
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/memory_store.rb#30
  def exist?(key); end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/memory_store.rb#26
  def keys; end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/memory_store.rb#34
  def read(key); end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/memory_store.rb#45
  def write(key, value, options = T.unsafe(nil)); end

  private

  # Returns the value of attribute storage.
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/memory_store.rb#62
  def storage; end
end

# source://graphql-fragment_cache//lib/graphql/fragment_cache/memory_store.rb#11
class GraphQL::FragmentCache::MemoryStore::Entry < ::Struct
  # @return [Boolean]
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/memory_store.rb#12
  def expired?; end
end

# Adds #cache_fragment method and kwarg option
#
# source://graphql-fragment_cache//lib/graphql/fragment_cache/object.rb#9
module GraphQL::FragmentCache::Object
  include ::GraphQL::FragmentCache::ObjectHelpers

  class << self
    # @private
    #
    # source://graphql-fragment_cache//lib/graphql/fragment_cache/object.rb#10
    def included(base); end
  end
end

# Adds #cache_fragment method
#
# source://graphql-fragment_cache//lib/graphql/fragment_cache/object_helpers.rb#11
module GraphQL::FragmentCache::ObjectHelpers
  extend ::Forwardable

  # @raise [ArgumentError]
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/object_helpers.rb#26
  def cache_fragment(object_to_cache = T.unsafe(nil), **options, &block); end

  class << self
    # @private
    #
    # source://graphql-fragment_cache//lib/graphql/fragment_cache/object_helpers.rb#14
    def included(base); end
  end
end

# source://graphql-fragment_cache//lib/graphql/fragment_cache/object_helpers.rb#24
GraphQL::FragmentCache::ObjectHelpers::NO_OBJECT = T.let(T.unsafe(nil), Object)

# source://graphql-fragment_cache//lib/graphql/fragment_cache/railtie.rb#9
class GraphQL::FragmentCache::Railtie < ::Rails::Railtie; end

# Provides Rails-specific configuration,
# accessible through `Rails.application.config.graphql_fragment_cache`
#
# source://graphql-fragment_cache//lib/graphql/fragment_cache/railtie.rb#10
module GraphQL::FragmentCache::Railtie::Config
  class << self
    # source://graphql-fragment_cache//lib/graphql/fragment_cache/railtie.rb#12
    def store=(store); end
  end
end

# source://graphql-fragment_cache//lib/graphql/fragment_cache/schema/lazy_cache_resolver.rb#5
module GraphQL::FragmentCache::Schema; end

# Adds hook for saving cached values after query is resolved
#
# source://graphql-fragment_cache//lib/graphql/fragment_cache/schema/instrumentation.rb#9
module GraphQL::FragmentCache::Schema::Instrumentation
  private

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/schema/instrumentation.rb#15
  def after_query(query); end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/schema/instrumentation.rb#12
  def before_query(query); end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/schema/instrumentation.rb#21
  def skip_caching?(query); end

  class << self
    # source://graphql-fragment_cache//lib/graphql/fragment_cache/schema/instrumentation.rb#15
    def after_query(query); end

    # source://graphql-fragment_cache//lib/graphql/fragment_cache/schema/instrumentation.rb#12
    def before_query(query); end

    # @return [Boolean]
    #
    # source://graphql-fragment_cache//lib/graphql/fragment_cache/schema/instrumentation.rb#21
    def skip_caching?(query); end
  end
end

# Instrumentations were deprecated in 2.2.5, this is a module to migrate to new interface
#
# source://graphql-fragment_cache//lib/graphql/fragment_cache/schema/instrumentation.rb#27
module GraphQL::FragmentCache::Schema::Instrumentation::Tracer
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/schema/instrumentation.rb#35
  def execute_multiplex(multiplex:); end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/schema/instrumentation.rb#28
  def execute_query(query:); end
end

# source://graphql-fragment_cache//lib/graphql/fragment_cache/schema/lazy_cache_resolver.rb#7
class GraphQL::FragmentCache::Schema::LazyCacheResolver
  # @return [LazyCacheResolver] a new instance of LazyCacheResolver
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/schema/lazy_cache_resolver.rb#8
  def initialize(fragment, query_ctx, object_to_cache, &block); end

  # source://graphql-fragment_cache//lib/graphql/fragment_cache/schema/lazy_cache_resolver.rb#21
  def resolve; end
end

# Patches GraphQL::Schema to support fragment cache
#
# source://graphql-fragment_cache//lib/graphql/fragment_cache/schema/patch.rb#9
module GraphQL::FragmentCache::Schema::Patch
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/schema/patch.rb#10
  def schema_cache_key; end
end

# source://graphql-fragment_cache//lib/graphql/fragment_cache/schema/tracer.rb#7
class GraphQL::FragmentCache::Schema::Tracer
  class << self
    # source://graphql-fragment_cache//lib/graphql/fragment_cache/schema/tracer.rb#11
    def trace(key, data); end

    private

    # @return [Boolean]
    #
    # source://graphql-fragment_cache//lib/graphql/fragment_cache/schema/tracer.rb#21
    def connection_field?(key, data); end

    # @raise [StandardError]
    #
    # source://graphql-fragment_cache//lib/graphql/fragment_cache/schema/tracer.rb#25
    def verify_connections!(context); end
  end
end

# source://graphql-fragment_cache//lib/graphql/fragment_cache/version.rb#5
GraphQL::FragmentCache::VERSION = T.let(T.unsafe(nil), String)

# source://graphql-fragment_cache//lib/graphql/fragment_cache/cacher.rb#7
class GraphQL::FragmentCache::WriteError < ::StandardError
  # @return [WriteError] a new instance of WriteError
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/cacher.rb#10
  def initialize(original_error, key, value); end

  # Returns the value of attribute key.
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/cacher.rb#8
  def key; end

  # Returns the value of attribute original_error.
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/cacher.rb#8
  def original_error; end

  # Returns the value of attribute value.
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/cacher.rb#8
  def value; end
end

# source://graphql-fragment_cache//lib/graphql/fragment_cache/cacher.rb#19
class GraphQL::FragmentCache::WriteMultiError < ::StandardError
  # @return [WriteMultiError] a new instance of WriteMultiError
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/cacher.rb#22
  def initialize(original_error, values); end

  # Returns the value of attribute original_error.
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/cacher.rb#20
  def original_error; end

  # Returns the value of attribute values.
  #
  # source://graphql-fragment_cache//lib/graphql/fragment_cache/cacher.rb#20
  def values; end
end
