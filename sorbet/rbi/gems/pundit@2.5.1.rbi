# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pundit` gem.
# Please instead update this file by running `bin/tapioca gem pundit`.


# Hello? Yes, this is Pundit.
#
# @api public
#
# source://pundit//lib/pundit/version.rb#3
module Pundit
  include ::Pundit::Authorization

  class << self
    # @api public
    # @see Pundit::Context#authorize
    # @since v1.0.0
    #
    # source://pundit//lib/pundit.rb#42
    def authorize(user, record, query, policy_class: T.unsafe(nil), cache: T.unsafe(nil)); end

    # @api public
    # @private
    #
    # source://pundit//lib/pundit.rb#30
    def included(base); end

    # @api public
    # @see Pundit::Context#policy
    # @since v0.1.0
    #
    # source://pundit//lib/pundit.rb#67
    def policy(user, *args, **kwargs, &block); end

    # @api public
    # @see Pundit::Context#policy!
    # @since v0.1.0
    #
    # source://pundit//lib/pundit.rb#73
    def policy!(user, *args, **kwargs, &block); end

    # @api public
    # @see Pundit::Context#policy_scope
    # @since v0.1.0
    #
    # source://pundit//lib/pundit.rb#55
    def policy_scope(user, *args, **kwargs, &block); end

    # @api public
    # @see Pundit::Context#policy_scope!
    # @since v0.1.0
    #
    # source://pundit//lib/pundit.rb#61
    def policy_scope!(user, *args, **kwargs, &block); end
  end
end

# Pundit DSL to include in your controllers to provide authorization helpers.
#
# @api public
# @example
#   class ApplicationController < ActionController::Base
#   include Pundit::Authorization
#   end
# @see #pundit
# @since v2.2.0
#
# source://pundit//lib/pundit/authorization.rb#13
module Pundit::Authorization
  extend ::ActiveSupport::Concern

  protected

  # Retrieves the policy for the given record, initializing it with the record
  # and current user and finally throwing an error if the user is not
  # authorized to perform the given action.
  #
  # @api public
  # @param record [Object, Array] the object we're checking permissions of
  # @param query [Symbol, String] the predicate method to check on the policy (e.g. `:show?`).
  #   If omitted then this defaults to the Rails controller action name.
  # @param policy_class [Class] the policy class we want to force use of
  # @raise [NotAuthorizedError] if the given query method returned false
  # @return [record] Always returns the passed object record
  # @see Pundit::Context#authorize
  # @see #verify_authorized
  # @since v0.1.0
  #
  # source://pundit//lib/pundit/authorization.rb#89
  def authorize(record, query = T.unsafe(nil), policy_class: T.unsafe(nil)); end

  # Retrieves a set of permitted attributes from the policy.
  #
  # Done by instantiating the policy class for the given record and calling
  # `permitted_attributes` on it, or `permitted_attributes_for_{action}` if
  # `action` is defined. It then infers what key the record should have in the
  # params hash and retrieves the permitted attributes from the params hash
  # under that key.
  #
  # @api public
  # @param record [Object] the object we're retrieving permitted attributes for
  # @param action [Symbol, String] the name of the action being performed on the record (e.g. `:update`).
  #   If omitted then this defaults to the Rails controller action name.
  # @return [Hash{String => Object}] the permitted attributes
  # @see https://github.com/varvet/pundit#strong-parameters
  # @since v1.0.0
  #
  # source://pundit//lib/pundit/authorization.rb#248
  def permitted_attributes(record, action = T.unsafe(nil)); end

  # Cache of policies. You should not rely on this method.
  #
  # @api private
  # @since v1.0.0
  #
  # source://pundit//lib/pundit/authorization.rb#136
  def policies; end

  # Retrieves the policy for the given record.
  #
  # @api public
  # @param record [Object] the object we're retrieving the policy for
  # @return [Object] instance of policy class with query methods
  # @see https://github.com/varvet/pundit#policies
  # @since v0.1.0
  #
  # source://pundit//lib/pundit/authorization.rb#150
  def policy(record); end

  # Retrieves the policy scope for the given record.
  #
  # @api public
  # @param scope [Object] the object we're retrieving the policy scope for
  # @param policy_scope_class [#resolve] the policy scope class we want to force use of
  # @return [#resolve, nil] instance of scope class which can resolve to a scope
  # @see https://github.com/varvet/pundit#scopes
  # @since v0.1.0
  #
  # source://pundit//lib/pundit/authorization.rb#163
  def policy_scope(scope, policy_scope_class: T.unsafe(nil)); end

  # Cache of policy scope. You should not rely on this method.
  #
  # @api private
  # @since v1.0.0
  #
  # source://pundit//lib/pundit/authorization.rb#208
  def policy_scopes; end

  # An instance of {Pundit::Context} initialized with the current user.
  #
  # @api public
  # @note this method is memoized and will return the same instance during the request.
  # @return [Pundit::Context]
  # @see #pundit_user
  # @see #policies
  # @since v2.3.2
  #
  # source://pundit//lib/pundit/authorization.rb#35
  def pundit; end

  # Retrieves the params for the given record.
  #
  # @api public
  # @param record [Object] the object we're retrieving params for
  # @return [ActionController::Parameters] the params
  # @since v2.0.0
  #
  # source://pundit//lib/pundit/authorization.rb#263
  def pundit_params_for(record); end

  # @api public
  # @return [Boolean] wether or not authorization has been performed
  # @see #authorize
  # @see #skip_authorization
  # @since v1.0.0
  #
  # source://pundit//lib/pundit/authorization.rb#111
  def pundit_policy_authorized?; end

  # @api public
  # @return [Boolean] wether or not policy scoping has been performed
  # @see #policy_scope
  # @see #skip_policy_scope
  # @since v1.0.0
  #
  # source://pundit//lib/pundit/authorization.rb#182
  def pundit_policy_scoped?; end

  # Clears the cached Pundit authorization data.
  #
  # This method should be called when the pundit_user is changed,
  # such as during user switching, to ensure that stale authorization
  # data is not used. Pundit caches authorization policies and scopes
  # for the pundit_user, so calling this method will reset those
  # caches and ensure that the next authorization checks are performed
  # with the correct context for the new pundit_user.
  #
  # @api public
  # @return [void]
  # @since v2.5.0
  #
  # source://pundit//lib/pundit/authorization.rb#66
  def pundit_reset!; end

  # Hook method which allows customizing which user is passed to policies and
  # scopes initialized by {#authorize}, {#policy} and {#policy_scope}.
  #
  # @api public
  # @note Make sure to call `pundit_reset!` if this changes during a request.
  # @return [Object] the user object to be used with pundit
  # @see https://github.com/varvet/pundit#customize-pundit-user
  # @see #pundit
  # @see #pundit_reset!
  # @since v0.2.2
  #
  # source://pundit//lib/pundit/authorization.rb#51
  def pundit_user; end

  # Allow this action not to perform authorization.
  #
  # @api public
  # @return [void]
  # @see https://github.com/varvet/pundit#ensuring-policies-and-scopes-are-used
  # @see #verify_authorized
  # @since v1.0.0
  #
  # source://pundit//lib/pundit/authorization.rb#103
  def skip_authorization; end

  # Allow this action not to perform policy scoping.
  #
  # @api public
  # @return [void]
  # @see https://github.com/varvet/pundit#ensuring-policies-and-scopes-are-used
  # @see #verify_policy_scoped
  # @since v1.0.0
  #
  # source://pundit//lib/pundit/authorization.rb#174
  def skip_policy_scope; end

  # Raises an error if authorization has not been performed.
  #
  # Usually used as an `after_action` filter to prevent programmer error in
  # forgetting to call {#authorize} or {#skip_authorization}.
  #
  # @api public
  # @raise [AuthorizationNotPerformedError] if authorization has not been performed
  # @return [void]
  # @see https://github.com/varvet/pundit#ensuring-policies-and-scopes-are-used
  # @see #authorize
  # @see #skip_authorization
  # @since v0.1.0
  #
  # source://pundit//lib/pundit/authorization.rb#126
  def verify_authorized; end

  # Raises an error if policy scoping has not been performed.
  #
  # Usually used as an `after_action` filter to prevent programmer error in
  # forgetting to call {#policy_scope} or {#skip_policy_scope} in index
  # actions.
  #
  # @api public
  # @raise [AuthorizationNotPerformedError] if policy scoping has not been performed
  # @return [void]
  # @see https://github.com/varvet/pundit#ensuring-policies-and-scopes-are-used
  # @see #policy_scope
  # @see #skip_policy_scope
  # @since v0.2.1
  #
  # source://pundit//lib/pundit/authorization.rb#198
  def verify_policy_scoped; end

  private

  # This was added to allow calling `policy_scope!` without flipping the
  # `pundit_policy_scoped?` flag.
  #
  # It's used internally by `policy_scope`, as well as from the views
  # when they call `policy_scope`. It works because views get their helper
  # from {Pundit::Helper}.
  #
  # @api private
  # @note This also memoizes the instance with `scope` as the key.
  # @see Pundit::Helper#policy_scope
  # @since v1.0.0
  #
  # source://pundit//lib/pundit/authorization.rb#225
  def pundit_policy_scope(scope); end
end

# Error that will be raised if a controller action has not called the
# `authorize` or `skip_authorization` methods.
#
# @since v0.2.3
#
# source://pundit//lib/pundit/error.rb#61
class Pundit::AuthorizationNotPerformedError < ::Pundit::Error; end

# Namespace for cache store implementations.
#
# Cache stores are used to cache policy lookups, so you get the same policy
# instance for the same record.
#
# @since v2.3.2
#
# source://pundit//lib/pundit/cache_store.rb#9
module Pundit::CacheStore; end

# A cache store that uses only the record as a cache key, and ignores the user.
#
# The original cache mechanism used by Pundit.
#
# @api private
# @since v2.3.2
#
# source://pundit//lib/pundit/cache_store/legacy_store.rb#11
class Pundit::CacheStore::LegacyStore
  # @api private
  # @return [LegacyStore] a new instance of LegacyStore
  # @since v2.3.2
  #
  # source://pundit//lib/pundit/cache_store/legacy_store.rb#13
  def initialize(hash = T.unsafe(nil)); end

  # A cache store that uses only the record as a cache key, and ignores the user.
  #
  # @api private
  # @note `nil` results are not cached.
  # @since v2.3.2
  #
  # source://pundit//lib/pundit/cache_store/legacy_store.rb#21
  def fetch(user:, record:); end
end

# A cache store that does not cache anything.
#
# Use `NullStore.instance` to get the singleton instance, it is thread-safe.
#
# @api private
# @see Pundit::Context#initialize
# @since v2.3.2
#
# source://pundit//lib/pundit/cache_store/null_store.rb#12
class Pundit::CacheStore::NullStore
  # Always yields, does not cache anything.
  #
  # @api private
  # @return [any] whatever the block returns.
  # @since v2.3.2
  # @yield
  #
  # source://pundit//lib/pundit/cache_store/null_store.rb#25
  def fetch(*_arg0, **_arg1); end

  class << self
    # @api private
    # @return [NullStore] the singleton instance
    # @since v2.3.2
    #
    # source://pundit//lib/pundit/cache_store/null_store.rb#18
    def instance; end
  end
end

# {Pundit::Context} is intended to be created once per request and user, and
# it is then used to perform authorization checks throughout the request.
#
# @example Using Sinatra
#   helpers do
#   def current_user = ...
#
#   def pundit
#   @pundit ||= Pundit::Context.new(user: current_user)
#   end
#   end
#
#   get "/posts/:id" do |id|
#   pundit.authorize(Post.find(id), query: :show?)
#   end
# @example Using [Roda](https://roda.jeremyevans.net/index.html)
#   route do |r|
#   context = Pundit::Context.new(user:)
#
#   r.get "posts", Integer do |id|
#   context.authorize(Post.find(id), query: :show?)
#   end
#   end
# @since v2.3.2
#
# source://pundit//lib/pundit/context.rb#30
class Pundit::Context
  # @param user later passed to policies and scopes
  # @param policy_cache [#fetch] cache store for policies (see e.g. {CacheStore::NullStore})
  # @return [Context] a new instance of Context
  # @see Pundit::Authorization#pundit
  # @since v2.3.2
  #
  # source://pundit//lib/pundit/context.rb#35
  def initialize(user:, policy_cache: T.unsafe(nil)); end

  # Retrieves the policy for the given record, initializing it with the
  # record and user and finally throwing an error if the user is not
  # authorized to perform the given action.
  #
  # @param possibly_namespaced_record [Object, Array] the object we're checking permissions of
  # @param query [Symbol, String] the predicate method to check on the policy (e.g. `:show?`)
  # @param policy_class [Class] the policy class we want to force use of
  # @raise [NotAuthorizedError] if the given query method returned false
  # @return [Object] Always returns the passed object record
  # @since v2.3.2
  #
  # source://pundit//lib/pundit/context.rb#62
  def authorize(possibly_namespaced_record, query:, policy_class:); end

  # Retrieves the policy for the given record.
  #
  # @param record [Object] the object we're retrieving the policy for
  # @raise [InvalidConstructorError] if the policy constructor called incorrectly
  # @return [Object, nil] instance of policy class with query methods
  # @see https://github.com/varvet/pundit#policies
  # @since v2.3.2
  #
  # source://pundit//lib/pundit/context.rb#82
  def policy(record); end

  # Retrieves the policy for the given record, or raises if not found.
  #
  # @param record [Object] the object we're retrieving the policy for
  # @raise [NotDefinedError] if the policy cannot be found
  # @raise [InvalidConstructorError] if the policy constructor called incorrectly
  # @return [Object] instance of policy class with query methods
  # @see https://github.com/varvet/pundit#policies
  # @since v2.3.2
  #
  # source://pundit//lib/pundit/context.rb#94
  def policy!(record); end

  # @api private
  # @see #initialize
  # @since v2.3.2
  #
  # source://pundit//lib/pundit/context.rb#48
  def policy_cache; end

  # Retrieves the policy scope for the given record.
  #
  # @param scope [Object] the object we're retrieving the policy scope for
  # @raise [InvalidConstructorError] if the policy constructor called incorrectly
  # @return [Scope{#resolve}, nil] instance of scope class which can resolve to a scope
  # @see https://github.com/varvet/pundit#scopes
  # @since v2.3.2
  #
  # source://pundit//lib/pundit/context.rb#109
  def policy_scope(scope); end

  # Retrieves the policy scope for the given record. Raises if not found.
  #
  # @param scope [Object] the object we're retrieving the policy scope for
  # @raise [NotDefinedError] if the policy scope cannot be found
  # @raise [InvalidConstructorError] if the policy constructor called incorrectly
  # @return [Scope{#resolve}] instance of scope class which can resolve to a scope
  # @see https://github.com/varvet/pundit#scopes
  # @since v2.3.2
  #
  # source://pundit//lib/pundit/context.rb#130
  def policy_scope!(scope); end

  # @api public
  # @see #initialize
  # @since v2.3.2
  #
  # source://pundit//lib/pundit/context.rb#43
  def user; end

  private

  # Finds a cached policy for the given record, or yields to find one.
  #
  # @api private
  # @param record [Object] the object we're retrieving the policy for
  # @raise [InvalidConstructorError] if policy can't be instantated
  # @return [Policy, nil] an instantiated policy
  # @since v2.3.2
  # @yield a policy finder if no policy was cached
  # @yieldparam policy_finder [PolicyFinder]
  # @yieldreturn [#new(user, model)]
  #
  # source://pundit//lib/pundit/context.rb#158
  def cached_find(record); end

  # Return a policy finder for the given record.
  #
  # @api private
  # @return [PolicyFinder]
  # @since v2.3.2
  #
  # source://pundit//lib/pundit/context.rb#178
  def policy_finder(record); end

  # Given a possibly namespaced record, return the actual record.
  #
  # @api private
  # @since v2.3.2
  #
  # source://pundit//lib/pundit/context.rb#186
  def pundit_model(record); end
end

# To avoid name clashes with common Error naming when mixing in Pundit,
# keep it here with compact class style definition.
#
# @api private
# @since v1.0.0
#
# source://pundit//lib/pundit/error.rb#8
class Pundit::Error < ::StandardError; end

# @api private
# @private
# @since v0.1.0
#
# source://pundit//lib/pundit.rb#28
module Pundit::Generators; end

# Rails view helpers, to allow a slightly different view-specific
# implementation of the methods in {Pundit::Authorization}.
#
# @api private
# @since v1.0.0
#
# source://pundit//lib/pundit/helper.rb#9
module Pundit::Helper
  # @api private
  # @see Pundit::Authorization#pundit_policy_scope
  # @since v1.0.0
  #
  # source://pundit//lib/pundit/helper.rb#12
  def policy_scope(scope); end
end

# Error that will be raised if a policy or policy scope constructor is not called correctly.
#
# @since v2.0.0
#
# source://pundit//lib/pundit/error.rb#56
class Pundit::InvalidConstructorError < ::Pundit::Error; end

# Error that will be raised when authorization has failed
#
# @since v0.1.0
#
# source://pundit//lib/pundit/error.rb#12
class Pundit::NotAuthorizedError < ::Pundit::Error
  # @overload initialize
  # @overload initialize
  # @return [NotAuthorizedError] a new instance of NotAuthorizedError
  # @since v1.0.0
  #
  # source://pundit//lib/pundit/error.rb#36
  def initialize(options = T.unsafe(nil)); end

  # @see #initialize
  # @since v0.2.3
  #
  # source://pundit//lib/pundit/error.rb#21
  def policy; end

  # @see #initialize
  # @since v0.2.3
  #
  # source://pundit//lib/pundit/error.rb#15
  def query; end

  # @see #initialize
  # @since v0.2.3
  #
  # source://pundit//lib/pundit/error.rb#18
  def record; end
end

# Error that will be raised if a policy or policy scope is not defined.
#
# @since v0.1.0
#
# source://pundit//lib/pundit/error.rb#70
class Pundit::NotDefinedError < ::Pundit::Error; end

# Finds policy and scope classes for given object.
#
# @api public
# @example
#   user = User.find(params[:id])
#   finder = PolicyFinder.new(user)
#   finder.policy #=> UserPolicy
#   finder.scope #=> UserPolicy::Scope
# @since v0.1.0
#
# source://pundit//lib/pundit/policy_finder.rb#16
class Pundit::PolicyFinder
  # @api public
  # @param object [any] the object to find policy and scope classes for
  # @return [PolicyFinder] a new instance of PolicyFinder
  # @since v0.1.0
  #
  # source://pundit//lib/pundit/policy_finder.rb#29
  def initialize(object); end

  # @api public
  # @see #initialize
  # @since v0.1.0
  #
  # source://pundit//lib/pundit/policy_finder.rb#25
  def object; end

  # @api public
  # @return [String] the name of the key this object would have in a params hash
  # @since v1.1.0
  #
  # source://pundit//lib/pundit/policy_finder.rb#76
  def param_key; end

  # @api public
  # @example
  #   policy = finder.policy #=> UserPolicy
  #   policy.show? #=> true
  #   policy.update? #=> false
  # @return [nil, Class] policy class with query methods
  # @see https://github.com/varvet/pundit#policies
  # @since v0.1.0
  #
  # source://pundit//lib/pundit/policy_finder.rb#52
  def policy; end

  # @api public
  # @raise [NotDefinedError] if policy could not be determined
  # @return [Class] policy class with query methods
  # @since v0.1.0
  #
  # source://pundit//lib/pundit/policy_finder.rb#69
  def policy!; end

  # @api public
  # @example
  #   scope = finder.scope #=> UserPolicy::Scope
  #   scope.resolve #=> <#ActiveRecord::Relation ...>
  # @return [nil, Scope{#resolve}] scope class which can resolve to a scope
  # @see https://github.com/varvet/pundit#scopes
  # @since v0.1.0
  #
  # source://pundit//lib/pundit/policy_finder.rb#40
  def scope; end

  # @api public
  # @raise [NotDefinedError] if scope could not be determined
  # @return [Scope{#resolve}] scope class which can resolve to a scope
  # @since v0.1.0
  #
  # source://pundit//lib/pundit/policy_finder.rb#61
  def scope!; end

  private

  # Given an object, find the policy class name.
  #
  # Uses recursion to handle namespaces.
  #
  # @api public
  # @return [String, Class] the policy class, or its name.
  # @since v0.2.0
  #
  # source://pundit//lib/pundit/policy_finder.rb#96
  def find(subject); end

  # Given an object, find its' class name.
  #
  # - Supports ActiveModel.
  # - Supports regular classes.
  # - Supports symbols.
  # - Supports object instances.
  #
  # @api public
  # @return [String, Class] the class, or its name.
  # @since v1.1.0
  #
  # source://pundit//lib/pundit/policy_finder.rb#121
  def find_class_name(subject); end
end

# A constant applied to the end of the class name to find the policy class.
#
# @api private
# @since v2.5.0
#
# source://pundit//lib/pundit/policy_finder.rb#21
Pundit::PolicyFinder::SUFFIX = T.let(T.unsafe(nil), String)

# Error that will be raised if a controller action has not called the
# `policy_scope` or `skip_policy_scope` methods.
#
# @since v0.3.0
#
# source://pundit//lib/pundit/error.rb#66
class Pundit::PolicyScopingNotPerformedError < ::Pundit::AuthorizationNotPerformedError; end

# @since v2.5.0
#
# source://pundit//lib/pundit/railtie.rb#5
class Pundit::Railtie < ::Rails::Railtie; end

# @api private
# @deprecated See {Pundit::PolicyFinder}
# @since v1.0.0
#
# source://pundit//lib/pundit.rb#23
Pundit::SUFFIX = T.let(T.unsafe(nil), String)

# The current version of Pundit.
#
# source://pundit//lib/pundit/version.rb#5
Pundit::VERSION = T.let(T.unsafe(nil), String)
