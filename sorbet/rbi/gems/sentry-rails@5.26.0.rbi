# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sentry-rails` gem.
# Please instead update this file by running `bin/tapioca gem sentry-rails`.


# source://sentry-rails//lib/sentry/rails/version.rb#3
module Sentry
  class << self
    # source://sentry-rails//lib/sentry/rails/engine.rb#5
    def railtie_helpers_paths; end

    # source://sentry-rails//lib/sentry/rails/engine.rb#5
    def railtie_namespace; end

    # source://sentry-rails//lib/sentry/rails/engine.rb#5
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://sentry-rails//lib/sentry/rails/engine.rb#5
    def table_name_prefix; end

    # source://sentry-rails//lib/sentry/rails/engine.rb#5
    def use_relative_model_naming?; end
  end
end

# source://sentry-rails//lib/sentry/rails/configuration.rb#10
class Sentry::Configuration
  # Returns the value of attribute rails.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#11
  def rails; end
end

# source://sentry-rails//lib/sentry/rails/engine.rb#4
class Sentry::Engine < ::Rails::Engine; end

# source://sentry-rails//lib/sentry/rails/version.rb#4
module Sentry::Rails
  extend ::Sentry::Integrable
end

# source://sentry-rails//lib/sentry/rails/configuration.rb#53
Sentry::Rails::ACTIVE_SUPPORT_LOGGER_SUBSCRIPTION_ITEMS_DEFAULT = T.let(T.unsafe(nil), Hash)

# source://sentry-rails//lib/sentry/rails/backtrace_cleaner.rb#8
class Sentry::Rails::BacktraceCleaner < ::ActiveSupport::BacktraceCleaner
  # @return [BacktraceCleaner] a new instance of BacktraceCleaner
  #
  # source://sentry-rails//lib/sentry/rails/backtrace_cleaner.rb#12
  def initialize; end
end

# source://sentry-rails//lib/sentry/rails/backtrace_cleaner.rb#9
Sentry::Rails::BacktraceCleaner::APP_DIRS_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://sentry-rails//lib/sentry/rails/backtrace_cleaner.rb#10
Sentry::Rails::BacktraceCleaner::RENDER_TEMPLATE_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#5
class Sentry::Rails::CaptureExceptions < ::Sentry::Rack::CaptureExceptions
  # @return [CaptureExceptions] a new instance of CaptureExceptions
  #
  # source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#9
  def initialize(_); end

  private

  # source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#28
  def capture_exception(exception, env); end

  # source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#19
  def collect_exception(env); end

  # @return [Boolean]
  #
  # source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#53
  def show_exceptions?(exception, env); end

  # source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#37
  def start_transaction(env, scope); end

  # source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#24
  def transaction_op; end
end

# source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#6
Sentry::Rails::CaptureExceptions::RAILS_7_1 = T.let(T.unsafe(nil), TrueClass)

# source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#7
Sentry::Rails::CaptureExceptions::SPAN_ORIGIN = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/configuration.rb#113
class Sentry::Rails::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#162
  def initialize; end

  # Set this option to true if you want Sentry to capture each retry failure
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#160
  def active_job_report_on_retry_error; end

  # Set this option to true if you want Sentry to capture each retry failure
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#160
  def active_job_report_on_retry_error=(_arg0); end

  # Hash of subscription items that will be shown in breadcrumbs active support logger.
  #
  # @return [Hash<String, Array<Symbol>>]
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#157
  def active_support_logger_subscription_items; end

  # Hash of subscription items that will be shown in breadcrumbs active support logger.
  #
  # @return [Hash<String, Array<Symbol>>]
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#157
  def active_support_logger_subscription_items=(_arg0); end

  # sentry-rails by default skips asset request' transactions by checking if the path matches
  #
  # ```rb
  # %r(\A/{0,2}#{::Rails.application.config.assets.prefix})
  # ```
  #
  # If you want to use a different pattern, you can configure the `assets_regexp` option like:
  #
  # ```rb
  # Sentry.init do |config|
  #   config.rails.assets_regexp = /my_regexp/
  # end
  # ```
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#153
  def assets_regexp; end

  # sentry-rails by default skips asset request' transactions by checking if the path matches
  #
  # ```rb
  # %r(\A/{0,2}#{::Rails.application.config.assets.prefix})
  # ```
  #
  # If you want to use a different pattern, you can configure the `assets_regexp` option like:
  #
  # ```rb
  # Sentry.init do |config|
  #   config.rails.assets_regexp = /my_regexp/
  # end
  # ```
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#153
  def assets_regexp=(_arg0); end

  # The threshold in milliseconds for the ActiveRecordSubscriber to capture the source location of the query
  # in the span data. Default is 100ms.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#138
  def db_query_source_threshold_ms; end

  # The threshold in milliseconds for the ActiveRecordSubscriber to capture the source location of the query
  # in the span data. Default is 100ms.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#138
  def db_query_source_threshold_ms=(_arg0); end

  # When the ActiveRecordSubscriber is enabled, capture the source location of the query in the span data.
  # This is enabled by default, but can be disabled by setting this to false.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#134
  def enable_db_query_source; end

  # When the ActiveRecordSubscriber is enabled, capture the source location of the query in the span data.
  # This is enabled by default, but can be disabled by setting this to false.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#134
  def enable_db_query_source=(_arg0); end

  # Rails 7.0 introduced a new error reporter feature, which the SDK once opted-in by default.
  # But after receiving multiple issue reports, the integration seemed to cause serious troubles to some users.
  # So the integration is now controlled by this configuration, which is disabled (false) by default.
  # More information can be found from: https://github.com/rails/rails/pull/43625#issuecomment-1072514175
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#118
  def register_error_subscriber; end

  # Rails 7.0 introduced a new error reporter feature, which the SDK once opted-in by default.
  # But after receiving multiple issue reports, the integration seemed to cause serious troubles to some users.
  # So the integration is now controlled by this configuration, which is disabled (false) by default.
  # More information can be found from: https://github.com/rails/rails/pull/43625#issuecomment-1072514175
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#118
  def register_error_subscriber=(_arg0); end

  # Rails catches exceptions in the ActionDispatch::ShowExceptions or
  # ActionDispatch::DebugExceptions middlewares, depending on the environment.
  # When `report_rescued_exceptions` is true (it is by default), Sentry will
  # report exceptions even when they are rescued by these middlewares.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#124
  def report_rescued_exceptions; end

  # Rails catches exceptions in the ActionDispatch::ShowExceptions or
  # ActionDispatch::DebugExceptions middlewares, depending on the environment.
  # When `report_rescued_exceptions` is true (it is by default), Sentry will
  # report exceptions even when they are rescued by these middlewares.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#124
  def report_rescued_exceptions=(_arg0); end

  # Some adapters, like sidekiq, already have their own sentry integration.
  # In those cases, we should skip ActiveJob's reporting to avoid duplicated reports.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#128
  def skippable_job_adapters; end

  # Some adapters, like sidekiq, already have their own sentry integration.
  # In those cases, we should skip ActiveJob's reporting to avoid duplicated reports.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#128
  def skippable_job_adapters=(_arg0); end

  # Returns the value of attribute tracing_subscribers.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#130
  def tracing_subscribers; end

  # Sets the attribute tracing_subscribers
  #
  # @param value the value to set the attribute tracing_subscribers to.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#130
  def tracing_subscribers=(_arg0); end
end

# source://sentry-rails//lib/sentry/rails/configuration.rb#36
Sentry::Rails::IGNORE_DEFAULT = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/instrument_payload_cleanup_helper.rb#5
module Sentry::Rails::InstrumentPayloadCleanupHelper
  # source://sentry-rails//lib/sentry/rails/instrument_payload_cleanup_helper.rb#8
  def cleanup_data(data); end
end

# source://sentry-rails//lib/sentry/rails/instrument_payload_cleanup_helper.rb#6
Sentry::Rails::InstrumentPayloadCleanupHelper::IGNORED_DATA_TYPES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/rescued_exception_interceptor.rb#5
class Sentry::Rails::RescuedExceptionInterceptor
  # @return [RescuedExceptionInterceptor] a new instance of RescuedExceptionInterceptor
  #
  # source://sentry-rails//lib/sentry/rails/rescued_exception_interceptor.rb#6
  def initialize(app); end

  # source://sentry-rails//lib/sentry/rails/rescued_exception_interceptor.rb#10
  def call(env); end

  # @return [Boolean]
  #
  # source://sentry-rails//lib/sentry/rails/rescued_exception_interceptor.rb#21
  def report_rescued_exceptions?; end
end

# source://sentry-rails//lib/sentry/rails/tracing.rb#5
module Sentry::Rails::Tracing
  class << self
    # source://sentry-rails//lib/sentry/rails/tracing.rb#71
    def get_current_transaction; end

    # this is necessary because instrumentation events don't record absolute start/finish time
    # so we need to retrieve the correct time this way
    #
    # source://sentry-rails//lib/sentry/rails/tracing.rb#44
    def patch_active_support_notifications; end

    # source://sentry-rails//lib/sentry/rails/tracing.rb#8
    def register_subscribers(subscribers); end

    # source://sentry-rails//lib/sentry/rails/tracing.rb#61
    def remove_active_support_notifications_patch; end

    # source://sentry-rails//lib/sentry/rails/tracing.rb#20
    def subscribe_tracing_events; end

    # source://sentry-rails//lib/sentry/rails/tracing.rb#16
    def subscribed_tracing_events; end

    # source://sentry-rails//lib/sentry/rails/tracing.rb#12
    def subscribers; end

    # source://sentry-rails//lib/sentry/rails/tracing.rb#33
    def unsubscribe_tracing_events; end
  end
end

# source://sentry-rails//lib/sentry/rails/tracing/abstract_subscriber.rb#6
class Sentry::Rails::Tracing::AbstractSubscriber
  class << self
    # source://sentry-rails//lib/sentry/rails/tracing/abstract_subscriber.rb#41
    def record_on_current_span(duration:, **options); end

    # @raise [NotImplementedError]
    #
    # source://sentry-rails//lib/sentry/rails/tracing/abstract_subscriber.rb#8
    def subscribe!; end

    # source://sentry-rails//lib/sentry/rails/tracing/abstract_subscriber.rb#30
    def subscribe_to_event(event_names); end

    # source://sentry-rails//lib/sentry/rails/tracing/abstract_subscriber.rb#12
    def unsubscribe!; end
  end
end

# source://sentry-rails//lib/sentry/rails/tracing/action_controller_subscriber.rb#9
class Sentry::Rails::Tracing::ActionControllerSubscriber < ::Sentry::Rails::Tracing::AbstractSubscriber
  extend ::Sentry::Rails::InstrumentPayloadCleanupHelper

  class << self
    # source://sentry-rails//lib/sentry/rails/tracing/action_controller_subscriber.rb#16
    def subscribe!; end
  end
end

# source://sentry-rails//lib/sentry/rails/tracing/action_controller_subscriber.rb#12
Sentry::Rails::Tracing::ActionControllerSubscriber::EVENT_NAMES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/action_controller_subscriber.rb#13
Sentry::Rails::Tracing::ActionControllerSubscriber::OP_NAME = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing/action_controller_subscriber.rb#14
Sentry::Rails::Tracing::ActionControllerSubscriber::SPAN_ORIGIN = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing/action_view_subscriber.rb#8
class Sentry::Rails::Tracing::ActionViewSubscriber < ::Sentry::Rails::Tracing::AbstractSubscriber
  class << self
    # source://sentry-rails//lib/sentry/rails/tracing/action_view_subscriber.rb#13
    def subscribe!; end
  end
end

# source://sentry-rails//lib/sentry/rails/tracing/action_view_subscriber.rb#9
Sentry::Rails::Tracing::ActionViewSubscriber::EVENT_NAMES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/action_view_subscriber.rb#11
Sentry::Rails::Tracing::ActionViewSubscriber::SPAN_ORIGIN = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing/action_view_subscriber.rb#10
Sentry::Rails::Tracing::ActionViewSubscriber::SPAN_PREFIX = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#8
class Sentry::Rails::Tracing::ActiveRecordSubscriber < ::Sentry::Rails::Tracing::AbstractSubscriber
  # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#17
  def backtrace_cleaner; end

  # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#17
  def backtrace_cleaner=(_arg0); end

  # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#17
  def backtrace_cleaner?; end

  class << self
    # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#17
    def backtrace_cleaner; end

    # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#17
    def backtrace_cleaner=(value); end

    # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#17
    def backtrace_cleaner?; end

    # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#88
    def query_source_location; end

    # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#23
    def subscribe!; end
  end
end

# source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#9
Sentry::Rails::Tracing::ActiveRecordSubscriber::EVENT_NAMES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#12
Sentry::Rails::Tracing::ActiveRecordSubscriber::EXCLUDED_EVENTS = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#11
Sentry::Rails::Tracing::ActiveRecordSubscriber::SPAN_ORIGIN = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#10
Sentry::Rails::Tracing::ActiveRecordSubscriber::SPAN_PREFIX = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#14
Sentry::Rails::Tracing::ActiveRecordSubscriber::SUPPORT_SOURCE_LOCATION = T.let(T.unsafe(nil), TrueClass)

# source://sentry-rails//lib/sentry/rails/tracing/active_storage_subscriber.rb#8
class Sentry::Rails::Tracing::ActiveStorageSubscriber < ::Sentry::Rails::Tracing::AbstractSubscriber
  class << self
    # source://sentry-rails//lib/sentry/rails/tracing/active_storage_subscriber.rb#26
    def subscribe!; end
  end
end

# source://sentry-rails//lib/sentry/rails/tracing/active_storage_subscriber.rb#9
Sentry::Rails::Tracing::ActiveStorageSubscriber::EVENT_NAMES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/active_storage_subscriber.rb#24
Sentry::Rails::Tracing::ActiveStorageSubscriber::SPAN_ORIGIN = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing/active_support_subscriber.rb#8
class Sentry::Rails::Tracing::ActiveSupportSubscriber < ::Sentry::Rails::Tracing::AbstractSubscriber
  class << self
    # source://sentry-rails//lib/sentry/rails/tracing/active_support_subscriber.rb#46
    def operation_name(event_name); end

    # source://sentry-rails//lib/sentry/rails/tracing/active_support_subscriber.rb#31
    def subscribe!; end
  end
end

# source://sentry-rails//lib/sentry/rails/tracing/active_support_subscriber.rb#27
Sentry::Rails::Tracing::ActiveSupportSubscriber::EVENT_NAMES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/active_support_subscriber.rb#23
Sentry::Rails::Tracing::ActiveSupportSubscriber::FLUSH_EVENT_NAMES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/active_support_subscriber.rb#9
Sentry::Rails::Tracing::ActiveSupportSubscriber::READ_EVENT_NAMES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/active_support_subscriber.rb#19
Sentry::Rails::Tracing::ActiveSupportSubscriber::REMOVE_EVENT_NAMES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/active_support_subscriber.rb#29
Sentry::Rails::Tracing::ActiveSupportSubscriber::SPAN_ORIGIN = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing/active_support_subscriber.rb#13
Sentry::Rails::Tracing::ActiveSupportSubscriber::WRITE_EVENT_NAMES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing.rb#6
Sentry::Rails::Tracing::START_TIMESTAMP_NAME = T.let(T.unsafe(nil), Symbol)

# it's just a container for the extended method
#
# source://sentry-rails//lib/sentry/rails/tracing.rb#76
module Sentry::Rails::Tracing::SentryNotificationExtension; end

# source://sentry-rails//lib/sentry/rails/version.rb#5
Sentry::Rails::VERSION = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/railtie.rb#8
class Sentry::Railtie < ::Rails::Railtie
  # source://sentry-rails//lib/sentry/rails/railtie.rb#132
  def activate_tracing; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#81
  def configure_cron_timezone; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#73
  def configure_project_root; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#77
  def configure_trusted_proxies; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#86
  def extend_controller_methods; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#102
  def inject_breadcrumbs_logger; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#124
  def override_streaming_reporter; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#98
  def patch_background_worker; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#141
  def register_error_subscriber(app); end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#116
  def setup_backtrace_cleanup_callback; end
end

class Sentry::SendEventJob < ::ActiveJob::Base
  def perform(event, hint = T.unsafe(nil)); end

  class << self
    def log_arguments; end
    def rescue_handlers; end
  end
end
