# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `doorkeeper` gem.
# Please instead update this file by running `bin/tapioca gem doorkeeper`.


# Main Doorkeeper namespace.
#
# source://doorkeeper//lib/doorkeeper/config/abstract_builder.rb#3
module Doorkeeper
  class << self
    # source://doorkeeper//lib/doorkeeper.rb#187
    def authenticate(request, methods = T.unsafe(nil)); end

    # @return [Doorkeeper::Config] configuration instance
    #
    # source://doorkeeper//lib/doorkeeper.rb#133
    def config; end

    # @return [Doorkeeper::Config] configuration instance
    #
    # source://doorkeeper//lib/doorkeeper.rb#133
    def configuration; end

    # source://doorkeeper//lib/doorkeeper.rb#125
    def configure(&block); end

    # @return [Boolean]
    #
    # source://doorkeeper//lib/doorkeeper.rb#137
    def configured?; end

    # source://doorkeeper//lib/doorkeeper.rb#191
    def gem_version; end

    # Returns the value of attribute orm_adapter.
    #
    # source://doorkeeper//lib/doorkeeper.rb#123
    def orm_adapter; end

    # source://doorkeeper//lib/doorkeeper.rb#165
    def run_orm_hooks; end

    # source://doorkeeper//lib/doorkeeper.rb#143
    def setup; end

    # source://doorkeeper//lib/doorkeeper.rb#183
    def setup_application_owner; end

    # source://doorkeeper//lib/doorkeeper.rb#153
    def setup_orm_adapter; end

    # source://doorkeeper//lib/doorkeeper.rb#179
    def setup_orm_models; end
  end
end

# source://doorkeeper//lib/doorkeeper/orm/active_record/access_grant.rb#6
class Doorkeeper::AccessGrant < ::ActiveRecord::Base
  include ::Doorkeeper::AccessGrant::GeneratedAttributeMethods
  include ::Doorkeeper::AccessGrant::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  include ::Doorkeeper::Orm::ActiveRecord::Mixins::AccessGrant
  include ::Doorkeeper::Models::Orderable
  include ::Doorkeeper::Models::SecretStorable
  include ::Doorkeeper::Models::ResourceOwnerable
  include ::Doorkeeper::OAuth::Helpers
  include ::Doorkeeper::Models::Expirable
  include ::Doorkeeper::Models::Revocable
  include ::Doorkeeper::Models::Accessible
  include ::Doorkeeper::Models::Scopes
  include ::Doorkeeper::AccessGrantMixin
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  extend ::Doorkeeper::Orm::ActiveRecord::Mixins::AccessGrant::ClassMethods
  extend ::Doorkeeper::Models::Orderable::ClassMethods
  extend ::Doorkeeper::Models::SecretStorable::ClassMethods
  extend ::Doorkeeper::Models::ResourceOwnerable::ClassMethods
  extend ::Doorkeeper::AccessGrantMixin::ClassMethods

  # source://activerecord/7.0.8.7/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_application(*args); end

  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/access_grant.rb#33
  def plaintext_token; end

  private

  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/access_grant.rb#47
  def generate_token; end

  class << self
    # source://activesupport/7.0.8.7/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activerecord/7.0.8.7/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activemodel/7.0.8.7/lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/7.0.8.7/lib/active_record/enum.rb#116
    def defined_enums; end

    # source://kaminari-activerecord/1.2.2/lib/kaminari/activerecord/active_record_model_extension.rb#15
    def page(num = T.unsafe(nil)); end

    # source://activerecord/7.0.8.7/lib/active_record/core.rb#70
    def strict_loading_by_default; end
  end
end

# source://doorkeeper//lib/doorkeeper/orm/active_record/access_grant.rb#0
module Doorkeeper::AccessGrant::GeneratedAssociationMethods
  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/association.rb#103
  def application; end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/association.rb#111
  def application=(value); end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/belongs_to.rb#132
  def application_changed?; end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/belongs_to.rb#136
  def application_previously_changed?; end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/singular_association.rb#28
  def build_application(*args, &block); end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/singular_association.rb#32
  def create_application(*args, &block); end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/singular_association.rb#36
  def create_application!(*args, &block); end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/singular_association.rb#19
  def reload_application; end
end

# source://doorkeeper//lib/doorkeeper/orm/active_record/access_grant.rb#0
module Doorkeeper::AccessGrant::GeneratedAttributeMethods; end

# source://doorkeeper//lib/doorkeeper/models/access_grant_mixin.rb#4
module Doorkeeper::AccessGrantMixin
  include ::Doorkeeper::OAuth::Helpers
  include ::Doorkeeper::Models::Expirable
  include ::Doorkeeper::Models::Revocable
  include ::Doorkeeper::Models::Accessible
  include ::Doorkeeper::Models::Scopes
  extend ::ActiveSupport::Concern
  include ::Doorkeeper::Models::Orderable
  include ::Doorkeeper::Models::SecretStorable
  include ::Doorkeeper::Models::ResourceOwnerable

  mixes_in_class_methods ::Doorkeeper::Models::Orderable::ClassMethods
  mixes_in_class_methods ::Doorkeeper::Models::SecretStorable::ClassMethods
  mixes_in_class_methods ::Doorkeeper::Models::ResourceOwnerable::ClassMethods
  mixes_in_class_methods ::Doorkeeper::AccessGrantMixin::ClassMethods

  # Never uses PKCE if PKCE migrations were not generated
  #
  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/models/access_grant_mixin.rb#17
  def uses_pkce?; end
end

# source://doorkeeper//lib/doorkeeper/models/access_grant_mixin.rb#21
module Doorkeeper::AccessGrantMixin::ClassMethods
  # Searches for Doorkeeper::AccessGrant record with the
  # specific token value.
  #
  # @param token [#to_s] token value (any object that responds to `#to_s`)
  # @return [Doorkeeper::AccessGrant, nil] AccessGrant object or nil if there is no record with such token
  #
  # source://doorkeeper//lib/doorkeeper/models/access_grant_mixin.rb#30
  def by_token(token); end

  # Determine the fallback storing strategy
  # Unless configured, there will be no fallback
  #
  # @return [Doorkeeper::SecretStoring::Base]
  #
  # source://doorkeeper//lib/doorkeeper/models/access_grant_mixin.rb#115
  def fallback_secret_strategy; end

  # suitable for PKCE validation
  #
  # @param code_verifier [#to_s] a one time use value (any object that responds to `#to_s`)
  # @return [#to_s] An encoded code challenge based on the provided verifier
  #
  # source://doorkeeper//lib/doorkeeper/models/access_grant_mixin.rb#91
  def generate_code_challenge(code_verifier); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/models/access_grant_mixin.rb#95
  def pkce_supported?; end

  # Revokes AccessGrant records that have not been revoked and associated
  # with the specific Application and Resource Owner.
  #
  # @param application_id [Integer] ID of the Application
  # @param resource_owner [ActiveRecord::Base, Integer] instance of the Resource Owner model or it's ID
  #
  # source://doorkeeper//lib/doorkeeper/models/access_grant_mixin.rb#42
  def revoke_all_for(application_id, resource_owner, clock = T.unsafe(nil)); end

  # Determines the secret storing transformer
  # Unless configured otherwise, uses the plain secret strategy
  #
  # @return [Doorkeeper::SecretStoring::Base]
  #
  # source://doorkeeper//lib/doorkeeper/models/access_grant_mixin.rb#105
  def secret_strategy; end
end

# source://doorkeeper//lib/doorkeeper/orm/active_record/access_token.rb#6
class Doorkeeper::AccessToken < ::ActiveRecord::Base
  include ::Doorkeeper::AccessToken::GeneratedAttributeMethods
  include ::Doorkeeper::AccessToken::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  include ::Doorkeeper::Orm::ActiveRecord::Mixins::AccessToken
  include ::Doorkeeper::Models::Orderable
  include ::Doorkeeper::Models::SecretStorable
  include ::Doorkeeper::Models::ResourceOwnerable
  include ::Doorkeeper::Models::ExpirationTimeSqlMath
  include ::Doorkeeper::OAuth::Helpers
  include ::Doorkeeper::Models::Expirable
  include ::Doorkeeper::Models::Reusable
  include ::Doorkeeper::Models::Revocable
  include ::Doorkeeper::Models::Accessible
  include ::Doorkeeper::Models::Scopes
  include ::Doorkeeper::AccessTokenMixin
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  extend ::Doorkeeper::Orm::ActiveRecord::Mixins::AccessToken::ClassMethods
  extend ::Doorkeeper::Models::Orderable::ClassMethods
  extend ::Doorkeeper::Models::SecretStorable::ClassMethods
  extend ::Doorkeeper::Models::ResourceOwnerable::ClassMethods
  extend ::Doorkeeper::Models::ExpirationTimeSqlMath::ClassMethods
  extend ::Doorkeeper::AccessTokenMixin::ClassMethods

  # source://activerecord/7.0.8.7/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_application(*args); end

  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/access_token.rb#22
  def use_refresh_token=(_arg0); end

  class << self
    # source://activesupport/7.0.8.7/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activerecord/7.0.8.7/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activemodel/7.0.8.7/lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/7.0.8.7/lib/active_record/enum.rb#116
    def defined_enums; end

    # source://kaminari-activerecord/1.2.2/lib/kaminari/activerecord/active_record_model_extension.rb#15
    def page(num = T.unsafe(nil)); end

    # source://activerecord/7.0.8.7/lib/active_record/core.rb#70
    def strict_loading_by_default; end
  end
end

# source://doorkeeper//lib/doorkeeper/orm/active_record/access_token.rb#0
module Doorkeeper::AccessToken::GeneratedAssociationMethods
  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/association.rb#103
  def application; end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/association.rb#111
  def application=(value); end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/belongs_to.rb#132
  def application_changed?; end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/belongs_to.rb#136
  def application_previously_changed?; end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/singular_association.rb#28
  def build_application(*args, &block); end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/singular_association.rb#32
  def create_application(*args, &block); end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/singular_association.rb#36
  def create_application!(*args, &block); end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/singular_association.rb#19
  def reload_application; end
end

# source://doorkeeper//lib/doorkeeper/orm/active_record/access_token.rb#0
module Doorkeeper::AccessToken::GeneratedAttributeMethods; end

# source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#4
module Doorkeeper::AccessTokenMixin
  include ::Doorkeeper::OAuth::Helpers
  include ::Doorkeeper::Models::Expirable
  include ::Doorkeeper::Models::Reusable
  include ::Doorkeeper::Models::Revocable
  include ::Doorkeeper::Models::Accessible
  include ::Doorkeeper::Models::Scopes
  extend ::ActiveSupport::Concern
  include ::Doorkeeper::Models::Orderable
  include ::Doorkeeper::Models::SecretStorable
  include ::Doorkeeper::Models::ResourceOwnerable
  include ::Doorkeeper::Models::ExpirationTimeSqlMath

  mixes_in_class_methods ::Doorkeeper::Models::Orderable::ClassMethods
  mixes_in_class_methods ::Doorkeeper::Models::SecretStorable::ClassMethods
  mixes_in_class_methods ::Doorkeeper::Models::ResourceOwnerable::ClassMethods
  mixes_in_class_methods ::Doorkeeper::Models::ExpirationTimeSqlMath::ClassMethods
  mixes_in_class_methods ::Doorkeeper::AccessTokenMixin::ClassMethods

  # Indicates if token is acceptable for specific scopes.
  #
  # @param scopes [Array<String>] scopes
  # @return [Boolean] true if record is accessible and includes scopes or
  #   false in other cases
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#403
  def acceptable?(scopes); end

  # JSON representation of the Access Token instance.
  #
  # @return [Hash] hash with token data
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#347
  def as_json(_options = T.unsafe(nil)); end

  # The token's custom attributes, as defined by
  # the custom_access_token_attributes config option.
  #
  # @return [Hash] hash of custom access token attributes.
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#365
  def custom_attributes; end

  # We keep a volatile copy of the raw refresh token for initial communication
  # The stored refresh_token may be mapped and not available in cleartext.
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#409
  def plaintext_refresh_token; end

  # We keep a volatile copy of the raw token for initial communication
  # The stored refresh_token may be mapped and not available in cleartext.
  #
  # Some strategies allow restoring stored secrets (e.g. symmetric encryption)
  # while hashing strategies do not, so you cannot rely on this value
  # returning a present value for persisted tokens.
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#423
  def plaintext_token; end

  # Revokes token with `:refresh_token` equal to `:previous_refresh_token`
  # and clears `:previous_refresh_token` attribute.
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#434
  def revoke_previous_refresh_token!; end

  # Indicates whether the token instance have the same credential
  # as the other Access Token.
  #
  # @param access_token [Doorkeeper::AccessToken] other token
  # @return [Boolean] true if credentials are same of false in other cases
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#376
  def same_credential?(access_token); end

  # Indicates whether the token instance have the same credential
  # as the other Access Token.
  #
  # @param access_token [Doorkeeper::AccessToken] other token
  # @return [Boolean] true if credentials are same of false in other cases
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#388
  def same_resource_owner?(access_token); end

  # Access Token type: Bearer.
  #
  # @see https://datatracker.ietf.org/doc/html/rfc6750 The OAuth 2.0 Authorization Framework: Bearer Token Usage
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#335
  def token_type; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#339
  def use_refresh_token?; end

  private

  # Set of attributes that would be passed to token generator to
  # generate unique token based on them.
  #
  #  @return [Hash] set of attributes
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#485
  def attributes_for_token_generator; end

  # Generates refresh token with UniqueToken generator.
  #
  # @return [String] refresh token value
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#457
  def generate_refresh_token; end

  # Generates and sets the token value with the
  # configured Generator class (see Doorkeeper.config).
  #
  # @raise [Doorkeeper::Errors::UnableToGenerateToken] custom class doesn't implement .generate method
  # @raise [Doorkeeper::Errors::TokenGeneratorNotFound] custom class doesn't exist
  # @return [String] generated token value
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#472
  def generate_token; end

  # Searches for Access Token record with `:refresh_token` equal to
  # `:previous_refresh_token` value.
  #
  # @return [Doorkeeper::AccessToken, nil] Access Token record or nil if nothing found
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#449
  def old_refresh_token; end

  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#503
  def token_generator; end
end

# source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#18
module Doorkeeper::AccessTokenMixin::ClassMethods
  # Looking for not revoked Access Token records that belongs to specific
  # Application and Resource Owner.
  #
  # @param application_id [Integer] ID of the Application model instance
  # @param resource_owner [ActiveRecord::Base, Integer] Resource Owner model instance or it's ID
  # @return [ActiveRecord::Relation] collection of matching AccessToken objects
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#277
  def authorized_tokens_for(application_id, resource_owner); end

  # Returns an instance of the Doorkeeper::AccessToken
  # found by previous refresh token. Keep in mind that value
  # of the previous_refresh_token isn't encrypted using
  # secrets strategy.
  #
  # @param previous_refresh_token [#to_s] previous refresh token value (any object that responds to `#to_s`)
  # @return [Doorkeeper::AccessToken, nil] AccessToken object or nil
  #   if there is no record with such refresh token
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#56
  def by_previous_refresh_token(previous_refresh_token); end

  # Returns an instance of the Doorkeeper::AccessToken
  # with specific token value.
  #
  # @param refresh_token [#to_s] refresh token value (any object that responds to `#to_s`)
  # @return [Doorkeeper::AccessToken, nil] AccessToken object or nil
  #   if there is no record with such refresh token
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#41
  def by_refresh_token(refresh_token); end

  # Returns an instance of the Doorkeeper::AccessToken with
  # specific plain text token value.
  #
  # @param token [#to_s] Plain text token value (any object that responds to `#to_s`)
  # @return [Doorkeeper::AccessToken, nil] AccessToken object or nil
  #   if there is no record with such token
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#28
  def by_token(token); end

  # Creates a not expired AccessToken record with a matching set of
  # scopes that belongs to specific Application and Resource Owner.
  #
  # @option token_attributes
  # @option token_attributes
  # @param application [Doorkeeper::Application] Application instance
  # @param resource_owner [ActiveRecord::Base, Integer] Resource Owner model instance or it's ID
  # @param scopes [#to_s] set of scopes (any object that responds to `#to_s`)
  # @param token_attributes [Hash] Additional attributes to use when creating a token
  # @return [Doorkeeper::AccessToken] new access token
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#253
  def create_for(application:, resource_owner:, scopes:, **token_attributes); end

  # Checks whether the token custom attribute values match the custom
  # attributes from the parameters.
  #
  # @param token [Doorkeeper::AccessToken] The access token whose custom attributes are being compared
  #   to the custom_attributes.
  # @param custom_attributes [Hash] A hash of the attributes for which we want to determine whether
  #   the token's custom attributes match.
  # @return [Boolean] true if the token's custom attribute values
  #   match those in the custom_attributes, or if both are empty/blank.
  #   False otherwise.
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#186
  def custom_attributes_match?(token, custom_attributes); end

  # Extracts the token's custom attributes (defined by the
  # custom_access_token_attributes config option) from the token's attributes.
  #
  # @param attributes [Hash] A hash of the access token's attributes.
  # @return [Hash] A hash containing only the custom access token attributes.
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#325
  def extract_custom_attributes(attributes); end

  # Determine the fallback storing strategy
  # Unless configured, there will be no fallback
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#314
  def fallback_secret_strategy; end

  # Interface to enumerate access token records in batches in order not
  # to bloat the memory. Could be overloaded in any ORM extension.
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#103
  def find_access_token_in_batches(relation, **args, &block); end

  # Enumerates AccessToken records in batches to find a matching token.
  # Batching is required in order not to pollute the memory if Application
  # has huge amount of associated records.
  #
  # ActiveRecord 5.x - 6.x ignores custom ordering so we can't perform a
  # database sort by created_at, so we need to load all the matching records,
  # sort them and find latest one.
  #
  # @param relation [ActiveRecord::Relation] Access tokens relation
  # @param application [Doorkeeper::Application] Application instance
  # @param scopes [String, Doorkeeper::OAuth::Scopes] set of scopes
  # @param custom_attributes [Nilable Hash] A nil value, or hash with keys corresponding to the custom attributes
  #   configured with the `custom_access_token_attributes` config option.
  #   A nil value will ignore custom attributes.
  # @return [Doorkeeper::AccessToken, nil] Access Token instance or
  #   nil if matching record was not found
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#129
  def find_matching_token(relation, application, custom_attributes, scopes); end

  # Looking for not expired AccessToken record with a matching set of
  # scopes that belongs to specific Application and Resource Owner.
  # If it doesn't exists - then creates it.
  #
  # @option token_attributes
  # @option token_attributes
  # @param application [Doorkeeper::Application] Application instance
  # @param resource_owner [ActiveRecord::Base, Integer] Resource Owner model instance or it's ID
  # @param scopes [#to_s] set of scopes (any object that responds to `#to_s`)
  # @param token_attributes [Hash] Additional attributes to use when creating a token
  # @return [Doorkeeper::AccessToken] existing record or a new one
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#216
  def find_or_create_for(application:, resource_owner:, scopes:, **token_attributes); end

  # Convenience method for backwards-compatibility, return the last
  # matching token for the given Application and Resource Owner.
  #
  # @param application_id [Integer] ID of the Application model instance
  # @param resource_owner [ActiveRecord::Base, Integer] ID of the Resource Owner model instance
  # @return [Doorkeeper::AccessToken, nil] matching AccessToken object or
  #   nil if nothing was found
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#295
  def last_authorized_token_for(application_id, resource_owner); end

  # Looking for not revoked Access Token with a matching set of scopes
  # that belongs to specific Application and Resource Owner.
  #
  # @param application [Doorkeeper::Application] Application instance
  # @param resource_owner [ActiveRecord::Base, Integer] Resource Owner model instance or it's ID
  # @param scopes [String, Doorkeeper::OAuth::Scopes] set of scopes
  # @param custom_attributes [Nilable Hash] A nil value, or hash with keys corresponding to the custom attributes
  #   configured with the `custom_access_token_attributes` config option.
  #   A nil value will ignore custom attributes.
  # @return [Doorkeeper::AccessToken, nil] Access Token instance or
  #   nil if matching record was not found
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#94
  def matching_token_for(application, resource_owner, scopes, custom_attributes: T.unsafe(nil), include_expired: T.unsafe(nil)); end

  # Revokes AccessToken records that have not been revoked and associated
  # with the specific Application and Resource Owner.
  #
  # @param application_id [Integer] ID of the Application
  # @param resource_owner [ActiveRecord::Base, Integer] instance of the Resource Owner model or it's ID
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#68
  def revoke_all_for(application_id, resource_owner, clock = T.unsafe(nil)); end

  # Checks whether the token scopes match the scopes from the parameters
  #
  # @param token_scopes [#to_s] set of scopes (any object that responds to `#to_s`)
  # @param param_scopes [Doorkeeper::OAuth::Scopes] scopes from params
  # @param app_scopes [Doorkeeper::OAuth::Scopes] Application scopes
  # @return [Boolean] true if the param scopes match the token scopes,
  #   and all the param scopes are defined in the application (or in the
  #   server configuration if the application doesn't define any scopes),
  #   and false in other cases
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#161
  def scopes_match?(token_scopes, param_scopes, app_scopes); end

  # Determines the secret storing transformer
  # Unless configured otherwise, uses the plain secret strategy
  #
  # @return [Doorkeeper::SecretStoring::Base]
  #
  # source://doorkeeper//lib/doorkeeper/models/access_token_mixin.rb#307
  def secret_strategy; end
end

# source://doorkeeper//lib/doorkeeper/orm/active_record/application.rb#7
class Doorkeeper::Application < ::ActiveRecord::Base
  include ::Doorkeeper::Application::GeneratedAttributeMethods
  include ::Doorkeeper::Application::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  include ::Doorkeeper::Orm::ActiveRecord::Mixins::Application
  include ::Doorkeeper::Models::Orderable
  include ::Doorkeeper::Models::SecretStorable
  include ::Doorkeeper::OAuth::Helpers
  include ::Doorkeeper::Models::Scopes
  include ::Doorkeeper::ApplicationMixin
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  extend ::Doorkeeper::Orm::ActiveRecord::Mixins::Application::ClassMethods
  extend ::Doorkeeper::Models::Orderable::ClassMethods
  extend ::Doorkeeper::Models::SecretStorable::ClassMethods
  extend ::Doorkeeper::ApplicationMixin::ClassMethods

  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/application.rb#75
  def as_json(options = T.unsafe(nil)); end

  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/application.rb#90
  def authorized_for_resource_owner?(resource_owner); end

  # source://activerecord/7.0.8.7/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_access_grants(*args); end

  # source://activerecord/7.0.8.7/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_access_tokens(*args); end

  # source://activerecord/7.0.8.7/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_authorized_applications(*args); end

  # source://activerecord/7.0.8.7/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_authorized_tokens(*args); end

  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/application.rb#59
  def plaintext_secret; end

  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/application.rb#99
  def read_attribute_for_serialization(key); end

  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/application.rb#48
  def renew_secret; end

  # source://activerecord/7.0.8.7/lib/active_record/autosave_association.rb#160
  def validate_associated_records_for_access_grants(*args); end

  # source://activerecord/7.0.8.7/lib/active_record/autosave_association.rb#160
  def validate_associated_records_for_access_tokens(*args); end

  # source://activerecord/7.0.8.7/lib/active_record/autosave_association.rb#160
  def validate_associated_records_for_authorized_applications(*args); end

  # source://activerecord/7.0.8.7/lib/active_record/autosave_association.rb#160
  def validate_associated_records_for_authorized_tokens(*args); end

  private

  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/application.rb#175
  def client_serializable_attributes; end

  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/application.rb#137
  def enforce_scopes?; end

  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/application.rb#154
  def extract_serializable_attributes(options = T.unsafe(nil)); end

  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/application.rb#122
  def generate_secret; end

  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/application.rb#118
  def generate_uid; end

  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/application.rb#128
  def scopes_match_configured; end

  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/application.rb#107
  def secret_generator; end

  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/application.rb#141
  def secret_required?; end

  class << self
    # source://activesupport/7.0.8.7/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activerecord/7.0.8.7/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activemodel/7.0.8.7/lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/7.0.8.7/lib/active_record/enum.rb#116
    def defined_enums; end

    # source://kaminari-activerecord/1.2.2/lib/kaminari/activerecord/active_record_model_extension.rb#15
    def page(num = T.unsafe(nil)); end

    # source://activerecord/7.0.8.7/lib/active_record/core.rb#70
    def strict_loading_by_default; end
  end
end

# source://doorkeeper//lib/doorkeeper/orm/active_record/application.rb#0
module Doorkeeper::Application::GeneratedAssociationMethods
  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/collection_association.rb#62
  def access_grant_ids; end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/collection_association.rb#72
  def access_grant_ids=(ids); end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/association.rb#103
  def access_grants; end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/association.rb#111
  def access_grants=(value); end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/collection_association.rb#62
  def access_token_ids; end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/collection_association.rb#72
  def access_token_ids=(ids); end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/association.rb#103
  def access_tokens; end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/association.rb#111
  def access_tokens=(value); end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/collection_association.rb#62
  def authorized_application_ids; end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/collection_association.rb#72
  def authorized_application_ids=(ids); end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/association.rb#103
  def authorized_applications; end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/association.rb#111
  def authorized_applications=(value); end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/collection_association.rb#62
  def authorized_token_ids; end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/collection_association.rb#72
  def authorized_token_ids=(ids); end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/association.rb#103
  def authorized_tokens; end

  # source://activerecord/7.0.8.7/lib/active_record/associations/builder/association.rb#111
  def authorized_tokens=(value); end
end

# source://doorkeeper//lib/doorkeeper/orm/active_record/application.rb#0
module Doorkeeper::Application::GeneratedAttributeMethods; end

class Doorkeeper::ApplicationController < ::ActionController::Base
  include ::Doorkeeper::Helpers::Controller

  private

  # source://actionview/7.0.8.7/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/7.0.8.7/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.8.7/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

module Doorkeeper::ApplicationController::HelperMethods
  include ::Ransack::Helpers::FormHelper
  include ::ActionController::Base::HelperMethods
  include ::Doorkeeper::DashboardHelper
end

class Doorkeeper::ApplicationMetalController < ::ActionController::API
  include ::Doorkeeper::Helpers::Controller

  class << self
    # source://activesupport/7.0.8.7/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.8.7/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

# source://doorkeeper//lib/doorkeeper/models/application_mixin.rb#4
module Doorkeeper::ApplicationMixin
  include ::Doorkeeper::OAuth::Helpers
  include ::Doorkeeper::Models::Scopes
  extend ::ActiveSupport::Concern
  include ::Doorkeeper::Models::Orderable
  include ::Doorkeeper::Models::SecretStorable

  mixes_in_class_methods ::Doorkeeper::Models::Orderable::ClassMethods
  mixes_in_class_methods ::Doorkeeper::Models::SecretStorable::ClassMethods
  mixes_in_class_methods ::Doorkeeper::ApplicationMixin::ClassMethods

  # Set an application's valid redirect URIs.
  #
  # @param uris [String, Array<String>] Newline-separated string or array the URI(s)
  # @return [String] The redirect URI(s) separated by newlines.
  #
  # source://doorkeeper//lib/doorkeeper/models/application_mixin.rb#67
  def redirect_uri=(uris); end

  # Check whether the given plain text secret matches our stored secret
  #
  # @param input [#to_s] Plain secret provided by user
  #   (any object that responds to `#to_s`)
  # @return [Boolean] Whether the given secret matches the stored secret
  #   of this application.
  #
  # source://doorkeeper//lib/doorkeeper/models/application_mixin.rb#79
  def secret_matches?(input); end
end

# :nodoc
#
# source://doorkeeper//lib/doorkeeper/models/application_mixin.rb#13
module Doorkeeper::ApplicationMixin::ClassMethods
  # Returns an instance of the Doorkeeper::Application with specific UID.
  #
  # @param uid [#to_s] UID (any object that responds to `#to_s`)
  # @return [Doorkeeper::Application, nil] Application instance or nil
  #   if there is no record with such UID
  #
  # source://doorkeeper//lib/doorkeeper/models/application_mixin.rb#42
  def by_uid(uid); end

  # Returns an instance of the Doorkeeper::Application with
  # specific UID and secret.
  #
  # Public/Non-confidential applications will only find by uid if secret is
  # blank.
  #
  # @param uid [#to_s] UID (any object that responds to `#to_s`)
  # @param secret [#to_s] secret (any object that responds to `#to_s`)
  # @return [Doorkeeper::Application, nil] Application instance or nil if there is no record with such credentials
  #
  # source://doorkeeper//lib/doorkeeper/models/application_mixin.rb#26
  def by_uid_and_secret(uid, secret); end

  # Determine the fallback storing strategy
  # Unless configured, there will be no fallback
  #
  # source://doorkeeper//lib/doorkeeper/models/application_mixin.rb#56
  def fallback_secret_strategy; end

  # Determines the secret storing transformer
  # Unless configured otherwise, uses the plain secret strategy
  #
  # source://doorkeeper//lib/doorkeeper/models/application_mixin.rb#49
  def secret_strategy; end
end

class Doorkeeper::ApplicationsController < ::Doorkeeper::ApplicationController
  def create; end
  def destroy; end
  def edit; end
  def index; end
  def new; end
  def show; end
  def update; end

  private

  # source://actionview/7.0.8.7/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def application_params; end
  def i18n_scope(action); end
  def set_application; end

  class << self
    # source://activesupport/7.0.8.7/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionview/7.0.8.7/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.8.7/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionpack/7.0.8.7/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

class Doorkeeper::AuthorizationsController < ::Doorkeeper::ApplicationController
  def create; end
  def destroy; end
  def new; end

  private

  # source://actionview/7.0.8.7/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def after_successful_authorization(context); end
  def authorization; end
  def authorize_response; end
  def before_successful_authorization(context = T.unsafe(nil)); end
  def build_context(**attributes); end
  def can_authorize_response?; end
  def custom_access_token_attributes; end
  def matching_token?; end
  def pre_auth; end
  def pre_auth_param_fields; end
  def pre_auth_params; end
  def redirect_or_render(auth); end
  def render_error; end
  def render_success; end
  def strategy; end

  class << self
    # source://activesupport/7.0.8.7/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.8.7/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

class Doorkeeper::AuthorizedApplicationsController < ::Doorkeeper::ApplicationController
  def destroy; end
  def index; end

  private

  # source://actionview/7.0.8.7/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/7.0.8.7/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.8.7/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

# Doorkeeper option DSL could be reused in extensions to build their own
# configurations. To use the Option DSL gems need to define `builder_class` method
# that returns configuration Builder class. This exception raises when they don't
# define it.
#
# source://doorkeeper//lib/doorkeeper/config/abstract_builder.rb#4
class Doorkeeper::Config
  include ::Doorkeeper::Config::Validations
  extend ::Doorkeeper::Config::Option

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def access_grant_class(*_args); end

  # Doorkeeper Access Grant model class.
  #
  # @return [ActiveRecord::Base, Mongoid::Document, Sequel::Model]
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#465
  def access_grant_model; end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def access_token_class(*_args); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def access_token_expires_in(*_args); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def access_token_generator(*_args); end

  # source://doorkeeper//lib/doorkeeper/config.rb#586
  def access_token_methods; end

  # Doorkeeper Access Token model class.
  #
  # @return [ActiveRecord::Base, Mongoid::Document, Sequel::Model]
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#457
  def access_token_model; end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def after_successful_authorization(*_args); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def after_successful_strategy_response(*_args); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def allow_blank_redirect_uri(*_args); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#672
  def allow_blank_redirect_uri?(application = T.unsafe(nil)); end

  # Allows to customize OAuth grant flows that +each+ application support.
  # You can configure a custom block (or use a class respond to `#call`) that must
  # return `true` in case Application instance supports requested OAuth grant flow
  # during the authorization request to the server. This configuration +doesn't+
  # set flows per application, it only allows to check if application supports
  # specific grant flow.
  #
  # For example you can add an additional database column to `oauth_applications` table,
  # say `t.array :grant_flows, default: []`, and store allowed grant flows that can
  # be used with this application there. Then when authorization requested Doorkeeper
  # will call this block to check if specific Application (passed with client_id and/or
  # client_secret) is allowed to perform the request for the specific grant type
  # (authorization, password, client_credentials, etc).
  #
  # Example of the block:
  #
  #   ->(flow, client) { client.grant_flows.include?(flow) }
  #
  # In case this option invocation result is `false`, Doorkeeper server returns
  # :unauthorized_client error and stops the request.
  #
  # @param allow_grant_flow_for_client [Proc] Block or any object respond to #call
  # @return [Boolean] `true` if allow or `false` if forbid the request
  #
  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def allow_grant_flow_for_client(*_args); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#680
  def allow_grant_flow_for_client?(grant_flow, client); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def allow_token_introspection(*_args); end

  # source://doorkeeper//lib/doorkeeper/config.rb#477
  def api_only; end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def application_class(*_args); end

  # Doorkeeper Application model class.
  #
  # @return [ActiveRecord::Base, Mongoid::Document, Sequel::Model]
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#473
  def application_model; end

  # Returns the value of attribute application_secret_fallback_strategy.
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#439
  def application_secret_fallback_strategy; end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def application_secret_generator(*_args); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#548
  def application_secret_hashed?; end

  # source://doorkeeper//lib/doorkeeper/config.rb#556
  def application_secret_strategy; end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def authenticate_admin(*_args); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def authenticate_resource_owner(*_args); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def authorization_code_expires_in(*_args); end

  # source://doorkeeper//lib/doorkeeper/config.rb#598
  def authorization_response_flows; end

  # source://doorkeeper//lib/doorkeeper/config.rb#607
  def authorization_response_types; end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def authorize_resource_owner_for_client(*_args); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def base_controller(*_args); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def base_metal_controller(*_args); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def before_successful_authorization(*_args); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def before_successful_strategy_response(*_args); end

  # source://doorkeeper//lib/doorkeeper/config.rb#206
  def builder_class; end

  # [NOTE]: deprecated and will be removed soon
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#643
  def calculate_authorization_response_types; end

  # Calculates grant flows configured by the user in Doorkeeper
  # configuration considering registered aliases that is exposed
  # to single or multiple other flows.
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#658
  def calculate_grant_flows; end

  # [NOTE]: deprecated and will be removed soon
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#648
  def calculate_token_grant_types; end

  # source://doorkeeper//lib/doorkeeper/config.rb#443
  def clear_cache!; end

  # source://doorkeeper//lib/doorkeeper/config.rb#582
  def client_credentials_methods; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#536
  def confirm_application_owner?; end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def custom_access_token_attributes(*_args); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def custom_access_token_expires_in(*_args); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def custom_introspection_response(*_args); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def default_generator_method(*_args); end

  # source://doorkeeper//lib/doorkeeper/config.rb#560
  def default_scopes; end

  # [NOTE]: deprecated and will be removed soon
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#626
  def deprecated_authorization_flows; end

  # [NOTE]: deprecated and will be removed soon
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#616
  def deprecated_token_grant_types_resolver; end

  # source://doorkeeper//lib/doorkeeper/config.rb#528
  def dynamic_scopes_delimiter; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#520
  def enable_application_owner?; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#524
  def enable_dynamic_scopes?; end

  # source://doorkeeper//lib/doorkeeper/config.rb#594
  def enabled_grant_flows; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#516
  def enforce_configured_scopes?; end

  # source://doorkeeper//lib/doorkeeper/config.rb#481
  def enforce_content_type; end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def forbid_redirect_uri(*_args); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#512
  def force_pkce?; end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def force_ssl_in_redirect_uri(*_args); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def grant_flows(*_args); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def handle_auth_errors(*_args); end

  # source://doorkeeper//lib/doorkeeper/config.rb#620
  def native_authorization_code_route; end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def native_redirect_uri(*_args); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#686
  def option_defined?(name); end

  # source://doorkeeper//lib/doorkeeper/config.rb#564
  def optional_scopes; end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def orm(*_args); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def pkce_code_challenge_methods(*_args); end

  # source://doorkeeper//lib/doorkeeper/config.rb#576
  def pkce_code_challenge_methods_supported; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#532
  def polymorphic_resource_owner?; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#540
  def raise_on_errors?; end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def realm(*_args); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#544
  def redirect_on_errors?; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#485
  def refresh_token_enabled?; end

  # source://doorkeeper//lib/doorkeeper/config.rb#493
  def resolve_controller(name); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def resource_owner_from_credentials(*_args); end

  # Returns the value of attribute reuse_access_token.
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#439
  def reuse_access_token; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#508
  def revoke_previous_authorization_code_token?; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#504
  def revoke_previous_client_credentials_token?; end

  # source://doorkeeper//lib/doorkeeper/config.rb#568
  def scopes; end

  # source://doorkeeper//lib/doorkeeper/config.rb#572
  def scopes_by_grant_type; end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def skip_authorization(*_args); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def skip_client_authentication_for_password_grant(*_args); end

  # source://doorkeeper//lib/doorkeeper/config.rb#603
  def token_grant_flows; end

  # source://doorkeeper//lib/doorkeeper/config.rb#611
  def token_grant_types; end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def token_lookup_batch_size(*_args); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#63
  def token_reuse_limit(*_args); end

  # Returns the value of attribute token_secret_fallback_strategy.
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#439
  def token_secret_fallback_strategy; end

  # source://doorkeeper//lib/doorkeeper/config.rb#552
  def token_secret_strategy; end

  private

  # source://doorkeeper//lib/doorkeeper/config.rb#698
  def calculate_token_grant_flows; end

  # Helper to read boolearized configuration option
  #
  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#693
  def option_set?(instance_key); end

  class << self
    # source://doorkeeper//lib/doorkeeper/config.rb#206
    def builder_class; end
  end
end

# Abstract base class for Doorkeeper and it's extensions configuration
# builder. Instantiates and validates gem configuration.
#
# source://doorkeeper//lib/doorkeeper/config/abstract_builder.rb#8
class Doorkeeper::Config::AbstractBuilder
  # @param config [Class] class
  # @return [AbstractBuilder] a new instance of AbstractBuilder
  #
  # source://doorkeeper//lib/doorkeeper/config/abstract_builder.rb#13
  def initialize(config = T.unsafe(nil), &block); end

  # Builds and validates configuration.
  #
  # @return [Doorkeeper::Config] config instance
  #
  # source://doorkeeper//lib/doorkeeper/config/abstract_builder.rb#22
  def build; end

  # Returns the value of attribute config.
  #
  # source://doorkeeper//lib/doorkeeper/config/abstract_builder.rb#9
  def config; end
end

# Default Doorkeeper configuration builder
#
# source://doorkeeper//lib/doorkeeper/config.rb#15
class Doorkeeper::Config::Builder < ::Doorkeeper::Config::AbstractBuilder
  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def access_grant_class(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def access_token_class(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def access_token_expires_in(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def access_token_generator(*args, &block); end

  # Change the way access token is authenticated from the request object.
  # By default it retrieves first from the `HTTP_AUTHORIZATION` header, then
  # falls back to the `:access_token` or `:bearer_token` params from the
  # `params` object.
  #
  # @param methods [Array] Define access token methods
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#83
  def access_token_methods(*methods); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def admin_authenticator(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def after_successful_authorization(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def after_successful_strategy_response(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def allow_blank_redirect_uri(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def allow_grant_flow_for_client(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def allow_token_introspection(*args, &block); end

  # Use an API mode for applications generated with --api argument
  # It will skip applications controller, disable forgery protection
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#134
  def api_only; end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def application_class(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def application_secret_generator(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def authorization_code_expires_in(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def authorize_resource_owner_for_client(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def base_controller(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def base_metal_controller(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def before_successful_authorization(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def before_successful_strategy_response(*args, &block); end

  # Change the way client credentials are retrieved from the request object.
  # By default it retrieves first from the `HTTP_AUTHORIZATION` header, then
  # falls back to the `:client_id` and `:client_secret` params from the
  # `params` object.
  #
  # @param methods [Array] Define client credentials
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#73
  def client_credentials(*methods); end

  # source://doorkeeper//lib/doorkeeper/config.rb#30
  def confirm_application_owner; end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def custom_access_token_attributes(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def custom_access_token_expires_in(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def custom_introspection_response(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def default_generator_method(*args, &block); end

  # Define default access token scopes for your provider
  #
  # token scopes
  #
  # @param scopes [Array] Default set of access (OAuth::Scopes.new)
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#48
  def default_scopes(*scopes); end

  # Provide support for an owner to be assigned to each registered
  # application (disabled by default)
  # Optional parameter confirmation: true (default false) if you want
  # to enforce ownership of a registered application
  #
  # @option opts[Boolean]
  # @param opts [Hash] the options to confirm if an application owner
  #   is present
  # @param opts[Boolean] [Hash] a customizable set of options
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#25
  def enable_application_owner(opts = T.unsafe(nil)); end

  # Provide support for dynamic scopes (e.g. user:*) (disabled by default)
  # Optional parameter delimiter (default ":") if you want to customize
  # the delimiter separating the scope name and matching value.
  #
  # @param opts [Hash] the options to configure dynamic scopes
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#39
  def enable_dynamic_scopes(opts = T.unsafe(nil)); end

  # Forbids creating/updating applications with arbitrary scopes that are
  # not in configuration, i.e. `default_scopes` or `optional_scopes`.
  # (disabled by default)
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#147
  def enforce_configured_scopes; end

  # Enforce request content type as the spec requires:
  # disabled by default for backward compatibility.
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#153
  def enforce_content_type; end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def forbid_redirect_uri(*args, &block); end

  # Require non-confidential apps to use PKCE (send a code_verifier) when requesting
  # an access_token using an authorization code (disabled by default)
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#128
  def force_pkce; end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def force_ssl_in_redirect_uri(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def grant_flows(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def handle_auth_errors(*args, &block); end

  # Allow optional hashing of application secrets before persisting them.
  # Will be used for hashing of input token and grants.
  #
  # @param using Provide a different secret storage implementation for applications
  # @param fallback Provide a fallback secret storage implementation for applications
  #   or use :plain to fallback to plain application secrets
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#180
  def hash_application_secrets(using: T.unsafe(nil), fallback: T.unsafe(nil)); end

  # Allow optional hashing of input tokens before persisting them.
  # Will be used for hashing of input token and grants.
  #
  # @param using Provide a different secret storage implementation class for tokens
  # @param fallback Provide a fallback secret storage implementation class for tokens
  #   or use :plain to fallback to plain tokens
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#165
  def hash_token_secrets(using: T.unsafe(nil), fallback: T.unsafe(nil)); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def native_redirect_uri(*args, &block); end

  # Define default access token scopes for your provider
  #
  # token scopes
  #
  # @param scopes [Array] Optional set of access (OAuth::Scopes.new)
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#56
  def optional_scopes(*scopes); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def orm(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def pkce_code_challenge_methods(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def realm(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def resource_owner_authenticator(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def resource_owner_from_credentials(*args, &block); end

  # Reuse access token for the same resource owner within an application
  # (disabled by default)
  # Rationale: https://github.com/doorkeeper-gem/doorkeeper/issues/383
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#98
  def reuse_access_token; end

  # Only allow one valid access token obtained via authorization code
  # per client. If a new access token is obtained before the old one
  # expired, the old one gets revoked (disabled by default)
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#122
  def revoke_previous_authorization_code_token; end

  # TODO: maybe make it more generic for other flows too?
  # Only allow one valid access token obtained via client credentials
  # per client. If a new access token is obtained before the old one
  # expired, the old one gets revoked (disabled by default)
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#115
  def revoke_previous_client_credentials_token; end

  # Define scopes_by_grant_type to limit certain scope to certain grant_type
  # Default set to {} i.e. no limitation on scopes usage
  #
  # @param with [Hash] grant_types as keys.
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#63
  def scopes_by_grant_type(hash = T.unsafe(nil)); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def skip_authorization(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def skip_client_authentication_for_password_grant(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def token_lookup_batch_size(*args, &block); end

  # source://doorkeeper//lib/doorkeeper/config/option.rb#45
  def token_reuse_limit(*args, &block); end

  # Enables polymorphic Resource Owner association for Access Grant and
  # Access Token models. Requires additional database columns to be setup.
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#140
  def use_polymorphic_resource_owner; end

  # Issue access tokens with refresh token (disabled if not set)
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#88
  def use_refresh_token(enabled = T.unsafe(nil), &block); end

  # Choose to use the url path for native autorization codes
  # Enabling this flag sets the authorization code response route for
  # native redirect uris to oauth/authorize/<code>. The default is
  # oauth/authorize/native?code=<code>.
  # Rationale: https://github.com/doorkeeper-gem/doorkeeper/issues/1143
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#107
  def use_url_path_for_native_authorization; end

  private

  # Configure the secret storing functionality
  #
  # @raise [ArgumentError]
  #
  # source://doorkeeper//lib/doorkeeper/config.rb#190
  def configure_secrets_for(type, using:, fallback:); end
end

# Doorkeeper configuration option DSL
#
# source://doorkeeper//lib/doorkeeper/config/option.rb#6
module Doorkeeper::Config::Option
  # Defines configuration option
  #
  # When you call option, it defines two methods. One method will take place
  # in the +Config+ class and the other method will take place in the
  # +Builder+ class.
  #
  # The +name+ parameter will set both builder method and config attribute.
  # If the +:as+ option is defined, the builder method will be the specified
  # option while the config attribute will be the +name+ parameter.
  #
  # If you want to introduce another level of config DSL you can
  # define +builder_class+ parameter.
  # Builder should take a block as the initializer parameter and respond to function +build+
  # that returns the value of the config attribute.
  #
  # ==== Options
  #
  # * [:+as+] Set the builder method that goes inside +configure+ block
  # * [+:default+] The default value in case no option was set
  # * [+:builder_class+] Configuration option builder class
  #
  # ==== Examples
  #
  #    option :name
  #    option :name, as: :set_name
  #    option :name, default: 'My Name'
  #    option :scopes builder_class: ScopesBuilder
  #
  # source://doorkeeper//lib/doorkeeper/config/option.rb#35
  def option(name, options = T.unsafe(nil)); end

  class << self
    # @private
    # @raise [Doorkeeper::MissingConfigurationBuilderClass]
    #
    # source://doorkeeper//lib/doorkeeper/config/option.rb#74
    def extended(base); end
  end
end

# Doorkeeper configuration validator.
#
# source://doorkeeper//lib/doorkeeper/config/validations.rb#7
module Doorkeeper::Config::Validations
  # Validates configuration options to be set properly.
  #
  # source://doorkeeper//lib/doorkeeper/config/validations.rb#10
  def validate!; end

  private

  # source://doorkeeper//lib/doorkeeper/config/validations.rb#53
  def validate_pkce_code_challenge_methods; end

  # Determine whether +reuse_access_token+ and a non-restorable
  # +token_secret_strategy+ have both been activated.
  #
  # In that case, disable reuse_access_token value and warn the user.
  #
  # source://doorkeeper//lib/doorkeeper/config/validations.rb#23
  def validate_reuse_access_token_value; end

  # Validate that the provided strategies are valid for
  # tokens and applications
  #
  # source://doorkeeper//lib/doorkeeper/config/validations.rb#37
  def validate_secret_strategies; end

  # source://doorkeeper//lib/doorkeeper/config/validations.rb#42
  def validate_token_reuse_limit; end
end

module Doorkeeper::DashboardHelper
  def doorkeeper_errors_for(object, method); end
  def doorkeeper_submit_path(application); end
end

# source://doorkeeper//lib/doorkeeper/engine.rb#4
class Doorkeeper::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.0.8.7/lib/active_support/callbacks.rb#68
    def __callbacks; end
  end
end

# source://doorkeeper//lib/doorkeeper/errors.rb#4
module Doorkeeper::Errors; end

# source://doorkeeper//lib/doorkeeper/errors.rb#78
class Doorkeeper::Errors::AccessDenied < ::Doorkeeper::Errors::BaseResponseError; end

# source://doorkeeper//lib/doorkeeper/errors.rb#40
class Doorkeeper::Errors::BaseResponseError < ::Doorkeeper::Errors::DoorkeeperError
  # @return [BaseResponseError] a new instance of BaseResponseError
  #
  # source://doorkeeper//lib/doorkeeper/errors.rb#43
  def initialize(response); end

  # Returns the value of attribute response.
  #
  # source://doorkeeper//lib/doorkeeper/errors.rb#41
  def response; end

  class << self
    # source://doorkeeper//lib/doorkeeper/errors.rb#47
    def name_for_response; end
  end
end

# source://doorkeeper//lib/doorkeeper/errors.rb#5
class Doorkeeper::Errors::DoorkeeperError < ::StandardError
  # source://doorkeeper//lib/doorkeeper/errors.rb#6
  def type; end

  class << self
    # source://doorkeeper//lib/doorkeeper/errors.rb#10
    def translate_options; end
  end
end

# source://doorkeeper//lib/doorkeeper/errors.rb#68
class Doorkeeper::Errors::InvalidClient < ::Doorkeeper::Errors::BaseResponseError; end

# source://doorkeeper//lib/doorkeeper/errors.rb#71
class Doorkeeper::Errors::InvalidCodeChallenge < ::Doorkeeper::Errors::BaseResponseError; end

# source://doorkeeper//lib/doorkeeper/errors.rb#52
class Doorkeeper::Errors::InvalidCodeChallengeMethod < ::Doorkeeper::Errors::BaseResponseError
  class << self
    # source://doorkeeper//lib/doorkeeper/errors.rb#53
    def translate_options; end
  end
end

# source://doorkeeper//lib/doorkeeper/errors.rb#72
class Doorkeeper::Errors::InvalidGrant < ::Doorkeeper::Errors::BaseResponseError; end

# source://doorkeeper//lib/doorkeeper/errors.rb#15
class Doorkeeper::Errors::InvalidGrantReuse < ::Doorkeeper::Errors::DoorkeeperError
  # source://doorkeeper//lib/doorkeeper/errors.rb#16
  def type; end
end

# source://doorkeeper//lib/doorkeeper/errors.rb#70
class Doorkeeper::Errors::InvalidRedirectUri < ::Doorkeeper::Errors::BaseResponseError; end

# source://doorkeeper//lib/doorkeeper/errors.rb#66
class Doorkeeper::Errors::InvalidRequest < ::Doorkeeper::Errors::BaseResponseError; end

# source://doorkeeper//lib/doorkeeper/errors.rb#69
class Doorkeeper::Errors::InvalidScope < ::Doorkeeper::Errors::BaseResponseError; end

# source://doorkeeper//lib/doorkeeper/errors.rb#67
class Doorkeeper::Errors::InvalidToken < ::Doorkeeper::Errors::BaseResponseError; end

# source://doorkeeper//lib/doorkeeper/errors.rb#21
class Doorkeeper::Errors::InvalidTokenStrategy < ::Doorkeeper::Errors::DoorkeeperError
  # source://doorkeeper//lib/doorkeeper/errors.rb#22
  def type; end
end

# source://doorkeeper//lib/doorkeeper/errors.rb#27
class Doorkeeper::Errors::MissingRequiredParameter < ::Doorkeeper::Errors::DoorkeeperError
  # @return [MissingRequiredParameter] a new instance of MissingRequiredParameter
  #
  # source://doorkeeper//lib/doorkeeper/errors.rb#30
  def initialize(missing_param); end

  # Returns the value of attribute missing_param.
  #
  # source://doorkeeper//lib/doorkeeper/errors.rb#28
  def missing_param; end

  # source://doorkeeper//lib/doorkeeper/errors.rb#35
  def type; end
end

# source://doorkeeper//lib/doorkeeper/errors.rb#64
class Doorkeeper::Errors::NoOrmCleaner < ::Doorkeeper::Errors::DoorkeeperError; end

# source://doorkeeper//lib/doorkeeper/errors.rb#79
class Doorkeeper::Errors::ServerError < ::Doorkeeper::Errors::BaseResponseError; end

# source://doorkeeper//lib/doorkeeper/errors.rb#81
class Doorkeeper::Errors::TokenExpired < ::Doorkeeper::Errors::InvalidToken; end

# source://doorkeeper//lib/doorkeeper/errors.rb#84
class Doorkeeper::Errors::TokenForbidden < ::Doorkeeper::Errors::InvalidToken; end

# source://doorkeeper//lib/doorkeeper/errors.rb#63
class Doorkeeper::Errors::TokenGeneratorNotFound < ::Doorkeeper::Errors::DoorkeeperError; end

# source://doorkeeper//lib/doorkeeper/errors.rb#82
class Doorkeeper::Errors::TokenRevoked < ::Doorkeeper::Errors::InvalidToken; end

# source://doorkeeper//lib/doorkeeper/errors.rb#83
class Doorkeeper::Errors::TokenUnknown < ::Doorkeeper::Errors::InvalidToken; end

# source://doorkeeper//lib/doorkeeper/errors.rb#62
class Doorkeeper::Errors::UnableToGenerateToken < ::Doorkeeper::Errors::DoorkeeperError; end

# source://doorkeeper//lib/doorkeeper/errors.rb#74
class Doorkeeper::Errors::UnauthorizedClient < ::Doorkeeper::Errors::BaseResponseError; end

# source://doorkeeper//lib/doorkeeper/errors.rb#76
class Doorkeeper::Errors::UnsupportedResponseMode < ::Doorkeeper::Errors::BaseResponseError; end

# source://doorkeeper//lib/doorkeeper/errors.rb#75
class Doorkeeper::Errors::UnsupportedResponseType < ::Doorkeeper::Errors::BaseResponseError; end

# source://doorkeeper//lib/doorkeeper/grant_flow/flow.rb#4
module Doorkeeper::GrantFlow
  extend ::Doorkeeper::GrantFlow::Registry
end

# source://doorkeeper//lib/doorkeeper/grant_flow/fallback_flow.rb#5
class Doorkeeper::GrantFlow::FallbackFlow < ::Doorkeeper::GrantFlow::Flow
  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/grant_flow/fallback_flow.rb#6
  def handles_grant_type?; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/grant_flow/fallback_flow.rb#10
  def handles_response_type?; end
end

# source://doorkeeper//lib/doorkeeper/grant_flow/flow.rb#5
class Doorkeeper::GrantFlow::Flow
  # @return [Flow] a new instance of Flow
  #
  # source://doorkeeper//lib/doorkeeper/grant_flow/flow.rb#10
  def initialize(name, **options); end

  # source://doorkeeper//lib/doorkeeper/grant_flow/flow.rb#35
  def default_response_mode; end

  # Returns the value of attribute grant_type_matches.
  #
  # source://doorkeeper//lib/doorkeeper/grant_flow/flow.rb#6
  def grant_type_matches; end

  # Returns the value of attribute grant_type_strategy.
  #
  # source://doorkeeper//lib/doorkeeper/grant_flow/flow.rb#6
  def grant_type_strategy; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/grant_flow/flow.rb#19
  def handles_grant_type?; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/grant_flow/flow.rb#23
  def handles_response_type?; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/grant_flow/flow.rb#27
  def matches_grant_type?(value); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/grant_flow/flow.rb#39
  def matches_response_mode?(value); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/grant_flow/flow.rb#31
  def matches_response_type?(value); end

  # Returns the value of attribute name.
  #
  # source://doorkeeper//lib/doorkeeper/grant_flow/flow.rb#6
  def name; end

  # Returns the value of attribute response_mode_matches.
  #
  # source://doorkeeper//lib/doorkeeper/grant_flow/flow.rb#6
  def response_mode_matches; end

  # Returns the value of attribute response_type_matches.
  #
  # source://doorkeeper//lib/doorkeeper/grant_flow/flow.rb#6
  def response_type_matches; end

  # Returns the value of attribute response_type_strategy.
  #
  # source://doorkeeper//lib/doorkeeper/grant_flow/flow.rb#6
  def response_type_strategy; end
end

# source://doorkeeper//lib/doorkeeper/grant_flow/registry.rb#5
module Doorkeeper::GrantFlow::Registry
  # source://doorkeeper//lib/doorkeeper/grant_flow/registry.rb#9
  def aliases; end

  # source://doorkeeper//lib/doorkeeper/grant_flow/registry.rb#9
  def aliases=(val); end

  # source://doorkeeper//lib/doorkeeper/grant_flow/registry.rb#40
  def expand_alias(alias_name); end

  # source://doorkeeper//lib/doorkeeper/grant_flow/registry.rb#6
  def flows; end

  # source://doorkeeper//lib/doorkeeper/grant_flow/registry.rb#6
  def flows=(val); end

  # [NOTE]: make it to use #fetch after removing fallbacks
  #
  # source://doorkeeper//lib/doorkeeper/grant_flow/registry.rb#45
  def get(name); end

  # Allows to register custom OAuth grant flow so that Doorkeeper
  # could recognize and process it.
  #
  # source://doorkeeper//lib/doorkeeper/grant_flow/registry.rb#15
  def register(name_or_flow, **options); end

  # Allows to register aliases that could be used in `grant_flows`
  # configuration option. It is possible to have aliases like 1:1 or
  # 1:N, i.e. "implicit_oidc" => ['token', 'id_token', 'id_token token'].
  #
  # source://doorkeeper//lib/doorkeeper/grant_flow/registry.rb#36
  def register_alias(alias_name, **options); end

  class << self
    # source://doorkeeper//lib/doorkeeper/grant_flow/registry.rb#9
    def aliases; end

    # source://doorkeeper//lib/doorkeeper/grant_flow/registry.rb#9
    def aliases=(val); end

    # source://doorkeeper//lib/doorkeeper/grant_flow/registry.rb#6
    def flows; end

    # source://doorkeeper//lib/doorkeeper/grant_flow/registry.rb#6
    def flows=(val); end
  end
end

# source://doorkeeper//lib/doorkeeper.rb#23
module Doorkeeper::Helpers; end

# Rails controller helpers.
#
# source://doorkeeper//lib/doorkeeper/helpers/controller.rb#9
module Doorkeeper::Helpers::Controller
  private

  # source://doorkeeper//lib/doorkeeper/helpers/controller.rb#31
  def authenticate_admin!; end

  # source://doorkeeper//lib/doorkeeper/helpers/controller.rb#13
  def authenticate_resource_owner!; end

  # source://doorkeeper//lib/doorkeeper/helpers/controller.rb#46
  def config_methods; end

  # source://doorkeeper//lib/doorkeeper/helpers/controller.rb#18
  def current_resource_owner; end

  # source://doorkeeper//lib/doorkeeper/helpers/controller.rb#40
  def doorkeeper_token; end

  # source://doorkeeper//lib/doorkeeper/helpers/controller.rb#78
  def enforce_content_type; end

  # source://doorkeeper//lib/doorkeeper/helpers/controller.rb#50
  def get_error_response_from_exception(exception); end

  # source://doorkeeper//lib/doorkeeper/helpers/controller.rb#64
  def handle_token_exception(exception); end

  # source://doorkeeper//lib/doorkeeper/helpers/controller.rb#26
  def resource_owner_from_credentials; end

  # source://doorkeeper//lib/doorkeeper/helpers/controller.rb#35
  def server; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/helpers/controller.rb#71
  def skip_authorization?; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/helpers/controller.rb#84
  def x_www_form_urlencoded?; end
end

# source://doorkeeper//lib/doorkeeper.rb#93
module Doorkeeper::Models; end

# source://doorkeeper//lib/doorkeeper/models/concerns/accessible.rb#5
module Doorkeeper::Models::Accessible
  # Indicates whether the object is accessible (not expired and not revoked).
  #
  # @return [Boolean] true if object accessible or false in other case
  #
  # source://doorkeeper//lib/doorkeeper/models/concerns/accessible.rb#10
  def accessible?; end
end

# source://doorkeeper//lib/doorkeeper/models/concerns/expirable.rb#5
module Doorkeeper::Models::Expirable
  # Indicates whether the object is expired (`#expires_in` present and
  # expiration time has come).
  #
  # @return [Boolean] true if object expired and false in other case
  #
  # source://doorkeeper//lib/doorkeeper/models/concerns/expirable.rb#10
  def expired?; end

  # Expiration time (date time of creation + TTL).
  #
  # @return [Time, nil] expiration time in UTC
  #   or nil if the object never expires.
  #
  # source://doorkeeper//lib/doorkeeper/models/concerns/expirable.rb#31
  def expires_at; end

  # Calculates expiration time in seconds.
  #
  # @return [Integer, nil] number of seconds if object has expiration time
  #   or nil if object never expires.
  #
  # source://doorkeeper//lib/doorkeeper/models/concerns/expirable.rb#18
  def expires_in_seconds; end
end

# source://doorkeeper//lib/doorkeeper/models/concerns/expiration_time_sql_math.rb#5
module Doorkeeper::Models::ExpirationTimeSqlMath
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Doorkeeper::Models::ExpirationTimeSqlMath::ClassMethods
end

# source://doorkeeper//lib/doorkeeper/models/concerns/expiration_time_sql_math.rb#52
Doorkeeper::Models::ExpirationTimeSqlMath::ADAPTERS_MAPPING = T.let(T.unsafe(nil), Hash)

# source://doorkeeper//lib/doorkeeper/models/concerns/expiration_time_sql_math.rb#64
module Doorkeeper::Models::ExpirationTimeSqlMath::ClassMethods
  # source://doorkeeper//lib/doorkeeper/models/concerns/expiration_time_sql_math.rb#82
  def adapter_name; end

  # source://doorkeeper//lib/doorkeeper/models/concerns/expiration_time_sql_math.rb#70
  def expiration_time_sql; end

  # source://doorkeeper//lib/doorkeeper/models/concerns/expiration_time_sql_math.rb#78
  def expiration_time_sql_expression; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/models/concerns/expiration_time_sql_math.rb#65
  def supports_expiration_time_math?; end
end

# source://doorkeeper//lib/doorkeeper/models/concerns/expiration_time_sql_math.rb#8
class Doorkeeper::Models::ExpirationTimeSqlMath::ExpirationTimeSqlGenerator
  # @return [ExpirationTimeSqlGenerator] a new instance of ExpirationTimeSqlGenerator
  #
  # source://doorkeeper//lib/doorkeeper/models/concerns/expiration_time_sql_math.rb#13
  def initialize(model); end

  # source://doorkeeper//lib/doorkeeper/models/concerns/expiration_time_sql_math.rb#17
  def generate_sql; end

  # Returns the value of attribute model.
  #
  # source://doorkeeper//lib/doorkeeper/models/concerns/expiration_time_sql_math.rb#9
  def model; end

  # source://doorkeeper//lib/doorkeeper/models/concerns/expiration_time_sql_math.rb#11
  def table_name(*_arg0, **_arg1, &_arg2); end
end

# source://doorkeeper//lib/doorkeeper/models/concerns/expiration_time_sql_math.rb#22
class Doorkeeper::Models::ExpirationTimeSqlMath::MySqlExpirationTimeSqlGenerator < ::Doorkeeper::Models::ExpirationTimeSqlMath::ExpirationTimeSqlGenerator
  # source://doorkeeper//lib/doorkeeper/models/concerns/expiration_time_sql_math.rb#23
  def generate_sql; end
end

# source://doorkeeper//lib/doorkeeper/models/concerns/expiration_time_sql_math.rb#40
class Doorkeeper::Models::ExpirationTimeSqlMath::OracleExpirationTimeSqlGenerator < ::Doorkeeper::Models::ExpirationTimeSqlMath::ExpirationTimeSqlGenerator
  # source://doorkeeper//lib/doorkeeper/models/concerns/expiration_time_sql_math.rb#41
  def generate_sql; end
end

# source://doorkeeper//lib/doorkeeper/models/concerns/expiration_time_sql_math.rb#46
class Doorkeeper::Models::ExpirationTimeSqlMath::PostgresExpirationTimeSqlGenerator < ::Doorkeeper::Models::ExpirationTimeSqlMath::ExpirationTimeSqlGenerator
  # source://doorkeeper//lib/doorkeeper/models/concerns/expiration_time_sql_math.rb#47
  def generate_sql; end
end

# source://doorkeeper//lib/doorkeeper/models/concerns/expiration_time_sql_math.rb#28
class Doorkeeper::Models::ExpirationTimeSqlMath::SqlLiteExpirationTimeSqlGenerator < ::Doorkeeper::Models::ExpirationTimeSqlMath::ExpirationTimeSqlGenerator
  # source://doorkeeper//lib/doorkeeper/models/concerns/expiration_time_sql_math.rb#29
  def generate_sql; end
end

# source://doorkeeper//lib/doorkeeper/models/concerns/expiration_time_sql_math.rb#34
class Doorkeeper::Models::ExpirationTimeSqlMath::SqlServerExpirationTimeSqlGenerator < ::Doorkeeper::Models::ExpirationTimeSqlMath::ExpirationTimeSqlGenerator
  # source://doorkeeper//lib/doorkeeper/models/concerns/expiration_time_sql_math.rb#35
  def generate_sql; end
end

# source://doorkeeper//lib/doorkeeper/models/concerns/orderable.rb#5
module Doorkeeper::Models::Orderable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Doorkeeper::Models::Orderable::ClassMethods
end

# source://doorkeeper//lib/doorkeeper/models/concerns/orderable.rb#8
module Doorkeeper::Models::Orderable::ClassMethods
  # source://doorkeeper//lib/doorkeeper/models/concerns/orderable.rb#9
  def ordered_by(attribute, direction = T.unsafe(nil)); end
end

# source://doorkeeper//lib/doorkeeper/models/concerns/ownership.rb#5
module Doorkeeper::Models::Ownership
  extend ::ActiveSupport::Concern

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/models/concerns/ownership.rb#13
  def validate_owner?; end
end

# source://doorkeeper//lib/doorkeeper/models/concerns/polymorphic_resource_owner.rb#5
module Doorkeeper::Models::PolymorphicResourceOwner; end

# source://doorkeeper//lib/doorkeeper/models/concerns/polymorphic_resource_owner.rb#6
module Doorkeeper::Models::PolymorphicResourceOwner::ForAccessGrant
  extend ::ActiveSupport::Concern
end

# source://doorkeeper//lib/doorkeeper/models/concerns/polymorphic_resource_owner.rb#18
module Doorkeeper::Models::PolymorphicResourceOwner::ForAccessToken
  extend ::ActiveSupport::Concern
end

# source://doorkeeper//lib/doorkeeper/models/concerns/resource_ownerable.rb#5
module Doorkeeper::Models::ResourceOwnerable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Doorkeeper::Models::ResourceOwnerable::ClassMethods
end

# source://doorkeeper//lib/doorkeeper/models/concerns/resource_ownerable.rb#8
module Doorkeeper::Models::ResourceOwnerable::ClassMethods
  # Searches for record by Resource Owner considering Doorkeeper
  # configuration for resource owner association.
  #
  # @param resource_owner [ActiveRecord::Base, Integer] resource owner
  # @return [Doorkeeper::AccessGrant, Doorkeeper::AccessToken] collection of records
  #
  # source://doorkeeper//lib/doorkeeper/models/concerns/resource_ownerable.rb#18
  def by_resource_owner(resource_owner); end

  protected

  # Backward compatible way to retrieve resource owner itself (if
  # polymorphic association enabled) or just it's ID.
  #
  # @param resource_owner [ActiveRecord::Base, Integer] resource owner
  # @return [ActiveRecord::Base, Integer] instance of Resource Owner or it's ID
  #
  # source://doorkeeper//lib/doorkeeper/models/concerns/resource_ownerable.rb#37
  def resource_owner_id_for(resource_owner); end
end

# source://doorkeeper//lib/doorkeeper/models/concerns/reusable.rb#5
module Doorkeeper::Models::Reusable
  # Indicates whether the object is reusable (i.e. It is not expired and
  # has not crossed reuse_limit).
  #
  # @return [Boolean] true if can be reused and false in other case
  #
  # source://doorkeeper//lib/doorkeeper/models/concerns/reusable.rb#10
  def reusable?; end
end

# source://doorkeeper//lib/doorkeeper/models/concerns/revocable.rb#5
module Doorkeeper::Models::Revocable
  # Revokes the object (updates `:revoked_at` attribute setting its value
  # to the specific time).
  #
  # @param clock [Time] time object
  #
  # source://doorkeeper//lib/doorkeeper/models/concerns/revocable.rb#11
  def revoke(clock = T.unsafe(nil)); end

  # Indicates whether the object has been revoked.
  #
  # @return [Boolean] true if revoked, false in other case
  #
  # source://doorkeeper//lib/doorkeeper/models/concerns/revocable.rb#19
  def revoked?; end
end

# source://doorkeeper//lib/doorkeeper/models/concerns/scopes.rb#5
module Doorkeeper::Models::Scopes
  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/models/concerns/scopes.rb#22
  def includes_scope?(*required_scopes); end

  # source://doorkeeper//lib/doorkeeper/models/concerns/scopes.rb#6
  def scopes; end

  # source://doorkeeper//lib/doorkeeper/models/concerns/scopes.rb#10
  def scopes=(value); end

  # source://doorkeeper//lib/doorkeeper/models/concerns/scopes.rb#18
  def scopes_string; end
end

# Storable finder to provide lookups for input plaintext values which are
# mapped to their stored versions (e.g., hashing, encryption) before lookup.
#
# source://doorkeeper//lib/doorkeeper/models/concerns/secret_storable.rb#8
module Doorkeeper::Models::SecretStorable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Doorkeeper::Models::SecretStorable::ClassMethods

  # source://doorkeeper//lib/doorkeeper/models/concerns/secret_storable.rb#11
  def fallback_secret_strategy(*_arg0, **_arg1, &_arg2); end

  # source://doorkeeper//lib/doorkeeper/models/concerns/secret_storable.rb#11
  def secret_strategy(*_arg0, **_arg1, &_arg2); end
end

# :nodoc
#
# source://doorkeeper//lib/doorkeeper/models/concerns/secret_storable.rb#16
module Doorkeeper::Models::SecretStorable::ClassMethods
  # Determine the fallback storing strategy
  # Unless configured, there will be no fallback
  #
  # source://doorkeeper//lib/doorkeeper/models/concerns/secret_storable.rb#100
  def fallback_secret_strategy; end

  # Allow looking up previously plain tokens as a fallback
  # IFF a fallback strategy has been defined
  #
  # @param attr [Symbol] The token attribute we're looking with.
  # @param plain_secret [#to_s] plain secret value (any object that responds to `#to_s`)
  # @return [Doorkeeper::AccessToken, nil] AccessToken object or nil
  #   if there is no record with such token
  #
  # source://doorkeeper//lib/doorkeeper/models/concerns/secret_storable.rb#61
  def find_by_fallback_token(attr, plain_secret); end

  # Returns an instance of the Doorkeeper::AccessToken with
  # specific token value.
  #
  # @param attr [Symbol] The token attribute we're looking with.
  # @param token [#to_s] token value (any object that responds to `#to_s`)
  # @return [Doorkeeper::AccessToken, nil] AccessToken object or nil
  #   if there is no record with such token
  #
  # source://doorkeeper//lib/doorkeeper/models/concerns/secret_storable.rb#42
  def find_by_plaintext_token(attr, token); end

  # Compare the given plaintext with the secret
  #
  # @param input [String] The plain input to compare.
  # @param secret [String] The secret value to compare with.
  # @return [Boolean] Whether input matches secret as per the secret strategy
  #
  # source://doorkeeper//lib/doorkeeper/models/concerns/secret_storable.rb#28
  def secret_matches?(*_arg0, **_arg1, &_arg2); end

  # Determines the secret storing transformer
  # Unless configured otherwise, uses the plain secret strategy
  #
  # source://doorkeeper//lib/doorkeeper/models/concerns/secret_storable.rb#93
  def secret_strategy; end

  # Allow implementations in ORMs to replace a plain
  # value falling back to to avoid it remaining as plain text.
  #
  # @param instance An instance of this model with a plain value token.
  # @param attr The secret attribute name to upgrade.
  # @param plain_secret The plain secret to upgrade.
  #
  # source://doorkeeper//lib/doorkeeper/models/concerns/secret_storable.rb#85
  def upgrade_fallback_value(instance, attr, plain_secret); end
end

# source://doorkeeper//lib/doorkeeper/oauth.rb#4
module Doorkeeper::OAuth; end

# source://doorkeeper//lib/doorkeeper/oauth.rb#6
Doorkeeper::OAuth::AUTHORIZATION_CODE = T.let(T.unsafe(nil), String)

# source://doorkeeper//lib/doorkeeper.rb#65
module Doorkeeper::OAuth::Authorization; end

# source://doorkeeper//lib/doorkeeper/oauth/authorization/code.rb#6
class Doorkeeper::OAuth::Authorization::Code
  # @return [Code] a new instance of Code
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization/code.rb#9
  def initialize(pre_auth, resource_owner); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization/code.rb#24
  def access_grant?; end

  # source://doorkeeper//lib/doorkeeper/oauth/authorization/code.rb#14
  def issue_token!; end

  # source://doorkeeper//lib/doorkeeper/oauth/authorization/code.rb#20
  def oob_redirect; end

  # Returns the value of attribute pre_auth.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization/code.rb#7
  def pre_auth; end

  # Returns the value of attribute resource_owner.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization/code.rb#7
  def resource_owner; end

  # Returns the value of attribute token.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization/code.rb#7
  def token; end

  private

  # source://doorkeeper//lib/doorkeeper/oauth/authorization/code.rb#34
  def access_grant_attributes; end

  # source://doorkeeper//lib/doorkeeper/oauth/authorization/code.rb#30
  def authorization_code_expires_in; end

  # source://doorkeeper//lib/doorkeeper/oauth/authorization/code.rb#51
  def custom_attributes; end

  # source://doorkeeper//lib/doorkeeper/oauth/authorization/code.rb#57
  def pkce_attributes; end

  # Ensures firstly, if migration with additional PKCE columns was
  # generated and migrated
  #
  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization/code.rb#68
  def pkce_supported?; end
end

# source://doorkeeper//lib/doorkeeper/oauth/authorization/context.rb#6
class Doorkeeper::OAuth::Authorization::Context
  # @return [Context] a new instance of Context
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization/context.rb#9
  def initialize(**attributes); end

  # Returns the value of attribute client.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization/context.rb#7
  def client; end

  # Returns the value of attribute grant_type.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization/context.rb#7
  def grant_type; end

  # Returns the value of attribute resource_owner.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization/context.rb#7
  def resource_owner; end

  # Returns the value of attribute scopes.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization/context.rb#7
  def scopes; end
end

# source://doorkeeper//lib/doorkeeper/oauth/authorization/token.rb#6
class Doorkeeper::OAuth::Authorization::Token
  # @return [Token] a new instance of Token
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization/token.rb#47
  def initialize(pre_auth, resource_owner); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization/token.rb#85
  def access_token?; end

  # source://doorkeeper//lib/doorkeeper/oauth/authorization/token.rb#71
  def application; end

  # source://doorkeeper//lib/doorkeeper/oauth/authorization/token.rb#52
  def issue_token!; end

  # source://doorkeeper//lib/doorkeeper/oauth/authorization/token.rb#77
  def oob_redirect; end

  # Returns the value of attribute pre_auth.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization/token.rb#7
  def pre_auth; end

  # Returns the value of attribute resource_owner.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization/token.rb#7
  def resource_owner; end

  # Returns the value of attribute token.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization/token.rb#7
  def token; end

  private

  # source://doorkeeper//lib/doorkeeper/oauth/authorization/token.rb#91
  def controller; end

  class << self
    # source://doorkeeper//lib/doorkeeper/oauth/authorization/token.rb#27
    def access_token_expires_in(configuration, context); end

    # source://doorkeeper//lib/doorkeeper/oauth/authorization/token.rb#10
    def build_context(pre_auth_or_oauth_client, grant_type, scopes, resource_owner); end

    # @return [Boolean]
    #
    # source://doorkeeper//lib/doorkeeper/oauth/authorization/token.rb#38
    def refresh_token_enabled?(server, context); end
  end
end

# source://doorkeeper//lib/doorkeeper/oauth/authorization/uri_builder.rb#8
class Doorkeeper::OAuth::Authorization::URIBuilder
  class << self
    # source://doorkeeper//lib/doorkeeper/oauth/authorization/uri_builder.rb#17
    def uri_with_fragment(url, parameters = T.unsafe(nil)); end

    # source://doorkeeper//lib/doorkeeper/oauth/authorization/uri_builder.rb#10
    def uri_with_query(url, parameters = T.unsafe(nil)); end

    private

    # source://doorkeeper//lib/doorkeeper/oauth/authorization/uri_builder.rb#25
    def build_query(parameters = T.unsafe(nil)); end
  end
end

# source://doorkeeper//lib/doorkeeper/oauth/authorization_code_request.rb#5
class Doorkeeper::OAuth::AuthorizationCodeRequest < ::Doorkeeper::OAuth::BaseRequest
  # @return [AuthorizationCodeRequest] a new instance of AuthorizationCodeRequest
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization_code_request.rb#16
  def initialize(server, grant, client, parameters = T.unsafe(nil)); end

  # Returns the value of attribute access_token.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization_code_request.rb#13
  def access_token; end

  # Returns the value of attribute client.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization_code_request.rb#13
  def client; end

  # Returns the value of attribute code_verifier.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization_code_request.rb#13
  def code_verifier; end

  # Returns the value of attribute grant.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization_code_request.rb#13
  def grant; end

  # Returns the value of attribute invalid_request_reason.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization_code_request.rb#13
  def invalid_request_reason; end

  # Returns the value of attribute missing_param.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization_code_request.rb#13
  def missing_param; end

  # Returns the value of attribute redirect_uri.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization_code_request.rb#13
  def redirect_uri; end

  private

  # source://doorkeeper//lib/doorkeeper/oauth/authorization_code_request.rb#27
  def before_successful_response; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization_code_request.rb#62
  def confidential?; end

  # source://doorkeeper//lib/doorkeeper/oauth/authorization_code_request.rb#115
  def custom_token_attributes_with_data; end

  # source://doorkeeper//lib/doorkeeper/oauth/authorization_code_request.rb#111
  def generate_code_challenge(code_verifier); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization_code_request.rb#58
  def pkce_supported?; end

  # source://doorkeeper//lib/doorkeeper/oauth/authorization_code_request.rb#50
  def resource_owner; end

  # source://doorkeeper//lib/doorkeeper/oauth/authorization_code_request.rb#123
  def revoke_previous_tokens(application, resource_owner); end

  # source://doorkeeper//lib/doorkeeper/oauth/authorization_code_request.rb#79
  def validate_client; end

  # if either side (server or client) request PKCE, check the verifier
  # against the DB - if PKCE is supported
  #
  # source://doorkeeper//lib/doorkeeper/oauth/authorization_code_request.rb#98
  def validate_code_verifier; end

  # source://doorkeeper//lib/doorkeeper/oauth/authorization_code_request.rb#83
  def validate_grant; end

  # source://doorkeeper//lib/doorkeeper/oauth/authorization_code_request.rb#66
  def validate_params; end

  # source://doorkeeper//lib/doorkeeper/oauth/authorization_code_request.rb#89
  def validate_redirect_uri; end
end

# source://doorkeeper//lib/doorkeeper/oauth/base_request.rb#5
class Doorkeeper::OAuth::BaseRequest
  include ::Doorkeeper::Validations
  extend ::Doorkeeper::Validations::ClassMethods

  # source://doorkeeper//lib/doorkeeper/oauth/base_request.rb#49
  def after_successful_response; end

  # source://doorkeeper//lib/doorkeeper/oauth/base_request.rb#12
  def authorize; end

  # source://doorkeeper//lib/doorkeeper/oauth/base_request.rb#45
  def before_successful_response; end

  # source://doorkeeper//lib/doorkeeper/oauth/base_request.rb#10
  def default_scopes(*_arg0, **_arg1, &_arg2); end

  # source://doorkeeper//lib/doorkeeper/oauth/base_request.rb#29
  def find_or_create_access_token(client, resource_owner, scopes, custom_attributes, server); end

  # Returns the value of attribute grant_type.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/base_request.rb#8
  def grant_type; end

  # source://doorkeeper//lib/doorkeeper/oauth/base_request.rb#25
  def scopes; end

  # Returns the value of attribute server.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/base_request.rb#8
  def server; end

  private

  # source://doorkeeper//lib/doorkeeper/oauth/base_request.rb#55
  def build_scopes; end
end

# source://doorkeeper//lib/doorkeeper/oauth/base_response.rb#5
class Doorkeeper::OAuth::BaseResponse
  # source://doorkeeper//lib/doorkeeper/oauth/base_response.rb#6
  def body; end

  # source://doorkeeper//lib/doorkeeper/oauth/base_response.rb#10
  def description; end

  # source://doorkeeper//lib/doorkeeper/oauth/base_response.rb#14
  def headers; end

  # source://doorkeeper//lib/doorkeeper/oauth/base_response.rb#22
  def redirect_uri; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/base_response.rb#18
  def redirectable?; end

  # source://doorkeeper//lib/doorkeeper/oauth/base_response.rb#26
  def status; end
end

# source://doorkeeper//lib/doorkeeper/oauth.rb#9
Doorkeeper::OAuth::CLIENT_CREDENTIALS = T.let(T.unsafe(nil), String)

# source://doorkeeper//lib/doorkeeper/oauth/client.rb#5
class Doorkeeper::OAuth::Client
  # @return [Client] a new instance of Client
  #
  # source://doorkeeper//lib/doorkeeper/oauth/client.rb#10
  def initialize(application); end

  # Returns the value of attribute application.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/client.rb#6
  def application; end

  # source://doorkeeper//lib/doorkeeper/oauth/client.rb#8
  def confidential(*_arg0, **_arg1, &_arg2); end

  # source://doorkeeper//lib/doorkeeper/oauth/client.rb#8
  def id(*_arg0, **_arg1, &_arg2); end

  # source://doorkeeper//lib/doorkeeper/oauth/client.rb#8
  def name(*_arg0, **_arg1, &_arg2); end

  # source://doorkeeper//lib/doorkeeper/oauth/client.rb#8
  def redirect_uri(*_arg0, **_arg1, &_arg2); end

  # source://doorkeeper//lib/doorkeeper/oauth/client.rb#8
  def scopes(*_arg0, **_arg1, &_arg2); end

  # source://doorkeeper//lib/doorkeeper/oauth/client.rb#8
  def uid(*_arg0, **_arg1, &_arg2); end

  class << self
    # source://doorkeeper//lib/doorkeeper/oauth/client.rb#20
    def authenticate(credentials, method = T.unsafe(nil)); end

    # source://doorkeeper//lib/doorkeeper/oauth/client.rb#14
    def find(uid, method = T.unsafe(nil)); end
  end
end

# source://doorkeeper//lib/doorkeeper/oauth/client/credentials.rb#6
class Doorkeeper::OAuth::Client::Credentials < ::Struct
  # source://doorkeeper//lib/doorkeeper/oauth/client/credentials.rb#30
  def blank?(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute secret
  #
  # @return [Object] the current value of secret
  def secret; end

  # Sets the attribute secret
  #
  # @param value [Object] the value to set the attribute secret to.
  # @return [Object] the newly set value
  def secret=(_); end

  # Returns the value of attribute uid
  #
  # @return [Object] the current value of uid
  def uid; end

  # Sets the attribute uid
  #
  # @param value [Object] the value to set the attribute uid to.
  # @return [Object] the newly set value
  def uid=(_); end

  class << self
    def [](*_arg0); end

    # source://doorkeeper//lib/doorkeeper/oauth/client/credentials.rb#20
    def from_basic(request); end

    # source://doorkeeper//lib/doorkeeper/oauth/client/credentials.rb#16
    def from_params(request); end

    # source://doorkeeper//lib/doorkeeper/oauth/client/credentials.rb#8
    def from_request(request, *credentials_methods); end

    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://doorkeeper//lib/doorkeeper.rb#76
module Doorkeeper::OAuth::ClientCredentials; end

# source://doorkeeper//lib/doorkeeper/oauth/client_credentials/creator.rb#6
class Doorkeeper::OAuth::ClientCredentials::Creator
  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials/creator.rb#7
  def call(client, scopes, attributes = T.unsafe(nil)); end

  private

  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials/creator.rb#47
  def find_active_existing_token_for(client, scopes, attributes); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials/creator.rb#42
  def lookup_existing_token?; end

  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials/creator.rb#28
  def with_revocation(existing_token:); end
end

# source://doorkeeper//lib/doorkeeper/oauth/client_credentials/issuer.rb#6
class Doorkeeper::OAuth::ClientCredentials::Issuer
  # @return [Issuer] a new instance of Issuer
  #
  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials/issuer.rb#9
  def initialize(server, validator); end

  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials/issuer.rb#14
  def create(client, scopes, attributes = T.unsafe(nil), creator = T.unsafe(nil)); end

  # Returns the value of attribute error.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials/issuer.rb#7
  def error; end

  # Returns the value of attribute token.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials/issuer.rb#7
  def token; end

  # Returns the value of attribute validator.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials/issuer.rb#7
  def validator; end

  private

  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials/issuer.rb#28
  def create_token(client, scopes, attributes, creator); end
end

# source://doorkeeper//lib/doorkeeper/oauth/client_credentials/validator.rb#6
class Doorkeeper::OAuth::ClientCredentials::Validator
  include ::Doorkeeper::Validations
  include ::Doorkeeper::OAuth::Helpers
  extend ::Doorkeeper::Validations::ClassMethods

  # @return [Validator] a new instance of Validator
  #
  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials/validator.rb#14
  def initialize(server, request); end

  private

  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials/validator.rb#24
  def validate_client; end

  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials/validator.rb#28
  def validate_client_supports_grant_flow; end

  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials/validator.rb#37
  def validate_scopes; end
end

# source://doorkeeper//lib/doorkeeper/oauth/client_credentials_request.rb#5
class Doorkeeper::OAuth::ClientCredentialsRequest < ::Doorkeeper::OAuth::BaseRequest
  # @return [ClientCredentialsRequest] a new instance of ClientCredentialsRequest
  #
  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials_request.rb#12
  def initialize(server, client, parameters = T.unsafe(nil)); end

  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials_request.rb#20
  def access_token; end

  # Returns the value of attribute client.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials_request.rb#6
  def client; end

  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials_request.rb#10
  def error(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute response.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials_request.rb#6
  def error_response; end

  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials_request.rb#24
  def issuer; end

  # Returns the value of attribute original_scopes.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials_request.rb#6
  def original_scopes; end

  # Returns the value of attribute parameters.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials_request.rb#6
  def parameters; end

  # Returns the value of attribute response.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials_request.rb#6
  def response; end

  private

  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials_request.rb#37
  def custom_token_attributes_with_data; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/client_credentials_request.rb#33
  def valid?; end
end

# source://doorkeeper//lib/doorkeeper/oauth/code_request.rb#5
class Doorkeeper::OAuth::CodeRequest
  # @return [CodeRequest] a new instance of CodeRequest
  #
  # source://doorkeeper//lib/doorkeeper/oauth/code_request.rb#8
  def initialize(pre_auth, resource_owner); end

  # source://doorkeeper//lib/doorkeeper/oauth/code_request.rb#13
  def authorize; end

  # source://doorkeeper//lib/doorkeeper/oauth/code_request.rb#19
  def deny; end

  # Returns the value of attribute pre_auth.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/code_request.rb#6
  def pre_auth; end

  # Returns the value of attribute resource_owner.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/code_request.rb#6
  def resource_owner; end
end

# source://doorkeeper//lib/doorkeeper/oauth/code_response.rb#5
class Doorkeeper::OAuth::CodeResponse < ::Doorkeeper::OAuth::BaseResponse
  include ::Doorkeeper::OAuth::Helpers

  # @return [CodeResponse] a new instance of CodeResponse
  #
  # source://doorkeeper//lib/doorkeeper/oauth/code_response.rb#10
  def initialize(pre_auth, auth, options = T.unsafe(nil)); end

  # Returns the value of attribute auth.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/code_response.rb#8
  def auth; end

  # source://doorkeeper//lib/doorkeeper/oauth/code_response.rb#24
  def body; end

  # source://doorkeeper//lib/doorkeeper/oauth/code_response.rb#20
  def issued_token; end

  # Returns the value of attribute pre_auth.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/code_response.rb#8
  def pre_auth; end

  # source://doorkeeper//lib/doorkeeper/oauth/code_response.rb#40
  def redirect_uri; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/code_response.rb#16
  def redirectable?; end

  # Returns the value of attribute response_on_fragment.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/code_response.rb#8
  def response_on_fragment; end
end

# source://doorkeeper//lib/doorkeeper/oauth/error.rb#5
class Doorkeeper::OAuth::Error < ::Struct
  # source://doorkeeper//lib/doorkeeper/oauth/error.rb#6
  def description; end

  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  def name=(_); end

  # Returns the value of attribute state
  #
  # @return [Object] the current value of state
  def state; end

  # Sets the attribute state
  #
  # @param value [Object] the value to set the attribute state to.
  # @return [Object] the newly set value
  def state=(_); end

  # Returns the value of attribute translate_options
  #
  # @return [Object] the current value of translate_options
  def translate_options; end

  # Sets the attribute translate_options
  #
  # @param value [Object] the value to set the attribute translate_options to.
  # @return [Object] the newly set value
  def translate_options=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://doorkeeper//lib/doorkeeper/oauth/error_response.rb#5
class Doorkeeper::OAuth::ErrorResponse < ::Doorkeeper::OAuth::BaseResponse
  include ::Doorkeeper::OAuth::Helpers

  # @return [ErrorResponse] a new instance of ErrorResponse
  #
  # source://doorkeeper//lib/doorkeeper/oauth/error_response.rb#36
  def initialize(attributes = T.unsafe(nil)); end

  # source://doorkeeper//lib/doorkeeper/oauth/error_response.rb#43
  def body; end

  # source://doorkeeper//lib/doorkeeper/oauth/error_response.rb#34
  def description(*_arg0, **_arg1, &_arg2); end

  # source://doorkeeper//lib/doorkeeper/oauth/error_response.rb#71
  def headers; end

  # source://doorkeeper//lib/doorkeeper/oauth/error_response.rb#34
  def name(*_arg0, **_arg1, &_arg2); end

  # @raise [exception_class.new(self)]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/error_response.rb#79
  def raise_exception!; end

  # source://doorkeeper//lib/doorkeeper/oauth/error_response.rb#63
  def redirect_uri; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/error_response.rb#59
  def redirectable?; end

  # source://doorkeeper//lib/doorkeeper/oauth/error_response.rb#34
  def state(*_arg0, **_arg1, &_arg2); end

  # source://doorkeeper//lib/doorkeeper/oauth/error_response.rb#51
  def status; end

  protected

  # @raise [NotImplementedError]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/error_response.rb#89
  def exception_class; end

  # source://doorkeeper//lib/doorkeeper/oauth/error_response.rb#85
  def realm; end

  private

  # source://doorkeeper//lib/doorkeeper/oauth/error_response.rb#96
  def authenticate_info; end

  class << self
    # source://doorkeeper//lib/doorkeeper/oauth/error_response.rb#10
    def from_request(request, attributes = T.unsafe(nil)); end

    private

    # source://doorkeeper//lib/doorkeeper/oauth/error_response.rb#22
    def error_name_for(error); end

    # source://doorkeeper//lib/doorkeeper/oauth/error_response.rb#26
    def exception_class_for(error); end
  end
end

# source://doorkeeper//lib/doorkeeper/oauth/error_response.rb#8
Doorkeeper::OAuth::ErrorResponse::NON_REDIRECTABLE_STATES = T.let(T.unsafe(nil), Array)

# source://doorkeeper//lib/doorkeeper/oauth/forbidden_token_response.rb#5
class Doorkeeper::OAuth::ForbiddenTokenResponse < ::Doorkeeper::OAuth::ErrorResponse
  # @return [ForbiddenTokenResponse] a new instance of ForbiddenTokenResponse
  #
  # source://doorkeeper//lib/doorkeeper/oauth/forbidden_token_response.rb#10
  def initialize(attributes = T.unsafe(nil)); end

  # source://doorkeeper//lib/doorkeeper/oauth/forbidden_token_response.rb#25
  def description; end

  # source://doorkeeper//lib/doorkeeper/oauth/forbidden_token_response.rb#19
  def headers; end

  # source://doorkeeper//lib/doorkeeper/oauth/forbidden_token_response.rb#15
  def status; end

  protected

  # source://doorkeeper//lib/doorkeeper/oauth/forbidden_token_response.rb#32
  def exception_class; end

  class << self
    # source://doorkeeper//lib/doorkeeper/oauth/forbidden_token_response.rb#6
    def from_scopes(scopes, attributes = T.unsafe(nil)); end
  end
end

# source://doorkeeper//lib/doorkeeper/oauth.rb#5
Doorkeeper::OAuth::GRANT_TYPES = T.let(T.unsafe(nil), Array)

# source://doorkeeper//lib/doorkeeper.rb#82
module Doorkeeper::OAuth::Helpers; end

# source://doorkeeper//lib/doorkeeper/oauth/helpers/scope_checker.rb#6
module Doorkeeper::OAuth::Helpers::ScopeChecker
  class << self
    # @return [Boolean]
    #
    # source://doorkeeper//lib/doorkeeper/oauth/helpers/scope_checker.rb#39
    def valid?(scope_str:, server_scopes:, app_scopes: T.unsafe(nil), grant_type: T.unsafe(nil)); end
  end
end

# source://doorkeeper//lib/doorkeeper/oauth/helpers/scope_checker.rb#7
class Doorkeeper::OAuth::Helpers::ScopeChecker::Validator
  # @return [Validator] a new instance of Validator
  #
  # source://doorkeeper//lib/doorkeeper/oauth/helpers/scope_checker.rb#10
  def initialize(scope_str, server_scopes, app_scopes, grant_type); end

  # Returns the value of attribute parsed_scopes.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/helpers/scope_checker.rb#8
  def parsed_scopes; end

  # Returns the value of attribute scope_str.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/helpers/scope_checker.rb#8
  def scope_str; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/helpers/scope_checker.rb#18
  def valid?; end

  private

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/helpers/scope_checker.rb#31
  def permitted_to_grant_type?; end

  # source://doorkeeper//lib/doorkeeper/oauth/helpers/scope_checker.rb#27
  def valid_scopes(server_scopes, app_scopes); end
end

# source://doorkeeper//lib/doorkeeper/oauth/helpers/uri_checker.rb#8
module Doorkeeper::OAuth::Helpers::URIChecker
  class << self
    # source://doorkeeper//lib/doorkeeper/oauth/helpers/uri_checker.rb#51
    def as_uri(url); end

    # @return [Boolean]
    #
    # source://doorkeeper//lib/doorkeeper/oauth/helpers/uri_checker.rb#69
    def hypertext_scheme?(uri); end

    # @return [Boolean]
    #
    # source://doorkeeper//lib/doorkeeper/oauth/helpers/uri_checker.rb#73
    def iff_host?(uri); end

    # @return [Boolean]
    #
    # source://doorkeeper//lib/doorkeeper/oauth/helpers/uri_checker.rb#41
    def loopback_uri?(uri); end

    # @return [Boolean]
    #
    # source://doorkeeper//lib/doorkeeper/oauth/helpers/uri_checker.rb#18
    def matches?(url, client_url); end

    # @return [Boolean]
    #
    # source://doorkeeper//lib/doorkeeper/oauth/helpers/uri_checker.rb#77
    def oob_uri?(uri); end

    # @return [Boolean]
    #
    # source://doorkeeper//lib/doorkeeper/oauth/helpers/uri_checker.rb#55
    def query_matches?(query, client_query); end

    # @return [Boolean]
    #
    # source://doorkeeper//lib/doorkeeper/oauth/helpers/uri_checker.rb#9
    def valid?(url); end

    # @return [Boolean]
    #
    # source://doorkeeper//lib/doorkeeper/oauth/helpers/uri_checker.rb#47
    def valid_for_authorization?(url, client_url); end

    # @return [Boolean]
    #
    # source://doorkeeper//lib/doorkeeper/oauth/helpers/uri_checker.rb#63
    def valid_scheme?(uri); end
  end
end

# Default Doorkeeper token generator. Follows OAuth RFC and
# could be customized using `default_generator_method` in
# configuration.
#
# source://doorkeeper//lib/doorkeeper/oauth/helpers/unique_token.rb#9
module Doorkeeper::OAuth::Helpers::UniqueToken
  class << self
    # Generator method for default generator class (SecureRandom)
    #
    # source://doorkeeper//lib/doorkeeper/oauth/helpers/unique_token.rb#24
    def default_generator_method; end

    # source://doorkeeper//lib/doorkeeper/oauth/helpers/unique_token.rb#10
    def generate(options = T.unsafe(nil)); end
  end
end

# source://doorkeeper//lib/doorkeeper.rb#88
module Doorkeeper::OAuth::Hooks; end

# source://doorkeeper//lib/doorkeeper/oauth/hooks/context.rb#6
class Doorkeeper::OAuth::Hooks::Context
  # @return [Context] a new instance of Context
  #
  # source://doorkeeper//lib/doorkeeper/oauth/hooks/context.rb#9
  def initialize(**attributes); end

  # Returns the value of attribute auth.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/hooks/context.rb#7
  def auth; end

  # source://doorkeeper//lib/doorkeeper/oauth/hooks/context.rb#15
  def issued_token; end

  # Returns the value of attribute pre_auth.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/hooks/context.rb#7
  def pre_auth; end
end

# source://doorkeeper//lib/doorkeeper/oauth.rb#7
Doorkeeper::OAuth::IMPLICIT = T.let(T.unsafe(nil), String)

# source://doorkeeper//lib/doorkeeper/oauth/invalid_request_response.rb#5
class Doorkeeper::OAuth::InvalidRequestResponse < ::Doorkeeper::OAuth::ErrorResponse
  # @return [InvalidRequestResponse] a new instance of InvalidRequestResponse
  #
  # source://doorkeeper//lib/doorkeeper/oauth/invalid_request_response.rb#19
  def initialize(attributes = T.unsafe(nil)); end

  # source://doorkeeper//lib/doorkeeper/oauth/invalid_request_response.rb#29
  def description; end

  # source://doorkeeper//lib/doorkeeper/oauth/invalid_request_response.rb#38
  def exception_class; end

  # Returns the value of attribute reason.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/invalid_request_response.rb#6
  def reason; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/invalid_request_response.rb#42
  def redirectable?; end

  # source://doorkeeper//lib/doorkeeper/oauth/invalid_request_response.rb#25
  def status; end

  class << self
    # source://doorkeeper//lib/doorkeeper/oauth/invalid_request_response.rb#8
    def from_request(request, attributes = T.unsafe(nil)); end
  end
end

# source://doorkeeper//lib/doorkeeper/oauth/invalid_token_response.rb#5
class Doorkeeper::OAuth::InvalidTokenResponse < ::Doorkeeper::OAuth::ErrorResponse
  # @return [InvalidTokenResponse] a new instance of InvalidTokenResponse
  #
  # source://doorkeeper//lib/doorkeeper/oauth/invalid_token_response.rb#20
  def initialize(attributes = T.unsafe(nil)); end

  # source://doorkeeper//lib/doorkeeper/oauth/invalid_token_response.rb#29
  def description; end

  # Returns the value of attribute reason.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/invalid_token_response.rb#6
  def reason; end

  # source://doorkeeper//lib/doorkeeper/oauth/invalid_token_response.rb#25
  def status; end

  protected

  # source://doorkeeper//lib/doorkeeper/oauth/invalid_token_response.rb#39
  def exception_class; end

  private

  # source://doorkeeper//lib/doorkeeper/oauth/invalid_token_response.rb#45
  def errors_mapping; end

  class << self
    # source://doorkeeper//lib/doorkeeper/oauth/invalid_token_response.rb#8
    def from_access_token(access_token, attributes = T.unsafe(nil)); end
  end
end

# source://doorkeeper//lib/doorkeeper/oauth/nonstandard.rb#5
class Doorkeeper::OAuth::NonStandard; end

# When you use this value, your application can then detect that the page has loaded, and can
# read the title of the HTML page to obtain the authorization code. It is then up to your
# application to close the browser window if you want to ensure that the user never sees the
# page that contains the authorization code. The mechanism for doing this varies from platform
# to platform.
#
# If your platform doesn't allow you to detect that the page has loaded or read the title of
# the page, you can have the user paste the code back to your application, as prompted by the
# text in the confirmation page that the OAuth 2.0 server generates.
#
# source://doorkeeper//lib/doorkeeper/oauth/nonstandard.rb#25
Doorkeeper::OAuth::NonStandard::IETF_WG_OAUTH2_OOB = T.let(T.unsafe(nil), String)

# This is identical to urn:ietf:wg:oauth:2.0:oob, but the text in the confirmation page that
# the OAuth 2.0 server generates won't instruct the user to copy the authorization code, but
# instead will simply ask the user to close the window.
#
# This is useful when your application reads the title of the HTML page (by checking window
# titles on the desktop, for example) to obtain the authorization code, but can't close the
# page on its own.
#
# source://doorkeeper//lib/doorkeeper/oauth/nonstandard.rb#34
Doorkeeper::OAuth::NonStandard::IETF_WG_OAUTH2_OOB_AUTO = T.let(T.unsafe(nil), String)

# source://doorkeeper//lib/doorkeeper/oauth/nonstandard.rb#36
Doorkeeper::OAuth::NonStandard::IETF_WG_OAUTH2_OOB_METHODS = T.let(T.unsafe(nil), Array)

# source://doorkeeper//lib/doorkeeper/oauth.rb#8
Doorkeeper::OAuth::PASSWORD = T.let(T.unsafe(nil), String)

# source://doorkeeper//lib/doorkeeper/oauth/password_access_token_request.rb#5
class Doorkeeper::OAuth::PasswordAccessTokenRequest < ::Doorkeeper::OAuth::BaseRequest
  include ::Doorkeeper::OAuth::Helpers

  # @return [PasswordAccessTokenRequest] a new instance of PasswordAccessTokenRequest
  #
  # source://doorkeeper//lib/doorkeeper/oauth/password_access_token_request.rb#15
  def initialize(server, client, credentials, resource_owner, parameters = T.unsafe(nil)); end

  # Returns the value of attribute access_token.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/password_access_token_request.rb#13
  def access_token; end

  # Returns the value of attribute client.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/password_access_token_request.rb#13
  def client; end

  # Returns the value of attribute credentials.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/password_access_token_request.rb#13
  def credentials; end

  # Returns the value of attribute parameters.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/password_access_token_request.rb#13
  def parameters; end

  # Returns the value of attribute resource_owner.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/password_access_token_request.rb#13
  def resource_owner; end

  private

  # source://doorkeeper//lib/doorkeeper/oauth/password_access_token_request.rb#27
  def before_successful_response; end

  # Section 4.3.2. Access Token Request for Resource Owner Password Credentials Grant:
  #
  #   If the client type is confidential or the client was issued client credentials (or assigned
  #   other authentication requirements), the client MUST authenticate with the authorization
  #   server as described in Section 3.2.1.
  #
  #   The authorization server MUST:
  #
  #    o  require client authentication for confidential clients or for any  client that was
  #       issued client credentials (or with other authentication requirements)
  #
  #    o  authenticate the client if client authentication is included,
  #
  #   @see https://datatracker.ietf.org/doc/html/rfc6749#section-4.3
  #
  # source://doorkeeper//lib/doorkeeper/oauth/password_access_token_request.rb#62
  def validate_client; end

  # source://doorkeeper//lib/doorkeeper/oauth/password_access_token_request.rb#70
  def validate_client_supports_grant_flow; end

  # source://doorkeeper//lib/doorkeeper/oauth/password_access_token_request.rb#43
  def validate_resource_owner; end

  # source://doorkeeper//lib/doorkeeper/oauth/password_access_token_request.rb#32
  def validate_scopes; end
end

# source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#5
class Doorkeeper::OAuth::PreAuthorization
  include ::Doorkeeper::Validations
  extend ::Doorkeeper::Validations::ClassMethods

  # @return [PreAuthorization] a new instance of PreAuthorization
  #
  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#24
  def initialize(server, parameters = T.unsafe(nil), resource_owner = T.unsafe(nil)); end

  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#61
  def as_json(_options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#38
  def authorizable?; end

  # Returns the value of attribute authorization_response_flow.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#20
  def authorization_response_flow; end

  # Returns the value of attribute client.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#20
  def client; end

  # Returns the value of attribute code_challenge.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#20
  def code_challenge; end

  # Returns the value of attribute code_challenge_method.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#20
  def code_challenge_method; end

  # Returns the value of attribute custom_access_token_attributes.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#20
  def custom_access_token_attributes; end

  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#50
  def error_response; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#65
  def form_post_response?; end

  # Returns the value of attribute missing_param.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#20
  def missing_param; end

  # Returns the value of attribute redirect_uri.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#20
  def redirect_uri; end

  # Returns the value of attribute resource_owner.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#20
  def resource_owner; end

  # Returns the value of attribute response_mode.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#20
  def response_mode; end

  # Returns the value of attribute response_type.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#20
  def response_type; end

  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#46
  def scope; end

  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#42
  def scopes; end

  # Returns the value of attribute state.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#20
  def state; end

  private

  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#73
  def build_scopes; end

  # Returns the value of attribute client_id.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#71
  def client_id; end

  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#166
  def grant_type; end

  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#170
  def pre_auth_hash; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#160
  def response_on_fragment?; end

  # Returns the value of attribute server.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#71
  def server; end

  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#87
  def validate_client; end

  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#82
  def validate_client_id; end

  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#92
  def validate_client_supports_grant_flow; end

  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#147
  def validate_code_challenge; end

  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#153
  def validate_code_challenge_method; end

  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#110
  def validate_params; end

  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#101
  def validate_redirect_uri; end

  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#96
  def validate_resource_owner_authorize_for_client; end

  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#129
  def validate_response_mode; end

  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#120
  def validate_response_type; end

  # source://doorkeeper//lib/doorkeeper/oauth/pre_authorization.rb#138
  def validate_scopes; end
end

# source://doorkeeper//lib/doorkeeper/oauth.rb#10
Doorkeeper::OAuth::REFRESH_TOKEN = T.let(T.unsafe(nil), String)

# source://doorkeeper//lib/doorkeeper/oauth/refresh_token_request.rb#5
class Doorkeeper::OAuth::RefreshTokenRequest < ::Doorkeeper::OAuth::BaseRequest
  include ::Doorkeeper::OAuth::Helpers

  # @return [RefreshTokenRequest] a new instance of RefreshTokenRequest
  #
  # source://doorkeeper//lib/doorkeeper/oauth/refresh_token_request.rb#17
  def initialize(server, refresh_token, credentials, parameters = T.unsafe(nil)); end

  # Returns the value of attribute access_token.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/refresh_token_request.rb#14
  def access_token; end

  # Returns the value of attribute client.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/refresh_token_request.rb#14
  def client; end

  # Returns the value of attribute credentials.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/refresh_token_request.rb#14
  def credentials; end

  # Returns the value of attribute missing_param.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/refresh_token_request.rb#15
  def missing_param; end

  # Returns the value of attribute refresh_token.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/refresh_token_request.rb#14
  def refresh_token; end

  private

  # source://doorkeeper//lib/doorkeeper/oauth/refresh_token_request.rb#32
  def before_successful_response; end

  # source://doorkeeper//lib/doorkeeper/oauth/refresh_token_request.rb#51
  def create_access_token; end

  # source://doorkeeper//lib/doorkeeper/oauth/refresh_token_request.rb#123
  def custom_token_attributes_with_data; end

  # source://doorkeeper//lib/doorkeeper/oauth/refresh_token_request.rb#47
  def default_scopes; end

  # source://doorkeeper//lib/doorkeeper/oauth/refresh_token_request.rb#28
  def load_client(credentials); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/refresh_token_request.rb#43
  def refresh_token_revoked_on_use?; end

  # source://doorkeeper//lib/doorkeeper/oauth/refresh_token_request.rb#98
  def validate_client; end

  # @see https://datatracker.ietf.org/doc/html/rfc6749#section-1.5
  #
  # source://doorkeeper//lib/doorkeeper/oauth/refresh_token_request.rb#106
  def validate_client_match; end

  # source://doorkeeper//lib/doorkeeper/oauth/refresh_token_request.rb#112
  def validate_scope; end

  # source://doorkeeper//lib/doorkeeper/oauth/refresh_token_request.rb#94
  def validate_token; end

  # source://doorkeeper//lib/doorkeeper/oauth/refresh_token_request.rb#88
  def validate_token_presence; end
end

# source://doorkeeper//lib/doorkeeper/oauth/scopes.rb#5
class Doorkeeper::OAuth::Scopes
  include ::Prelude::Enumerator
  include ::Enumerable
  include ::Comparable

  # @return [Scopes] a new instance of Scopes
  #
  # source://doorkeeper//lib/doorkeeper/oauth/scopes.rb#26
  def initialize; end

  # DEPRECATED: With dynamic scopes, #allowed should be called because
  # A & B doesn't really make sense with dynamic scopes.
  #
  # For example, if A = user:* and B is user:1, A & B = [].
  # If we modified this method to take dynamic scopes into an account, then order
  # becomes important, and this would violate the principle that A & B = B & A.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/scopes.rb#79
  def &(other); end

  # source://doorkeeper//lib/doorkeeper/oauth/scopes.rb#61
  def +(other); end

  # source://doorkeeper//lib/doorkeeper/oauth/scopes.rb#65
  def <=>(other); end

  # source://doorkeeper//lib/doorkeeper/oauth/scopes.rb#42
  def add(*scopes); end

  # source://doorkeeper//lib/doorkeeper/oauth/scopes.rb#47
  def all; end

  # Returns a set of scopes that are allowed, taking dynamic
  # scopes into account. This instance's scopes is taken as the allowed set,
  # and the passed value is the set to filter.
  #
  # @param other The set of scopes to filter
  #
  # source://doorkeeper//lib/doorkeeper/oauth/scopes.rb#90
  def allowed(other); end

  # source://doorkeeper//lib/doorkeeper/oauth/scopes.rb#24
  def each(*_arg0, **_arg1, &_arg2); end

  # source://doorkeeper//lib/doorkeeper/oauth/scopes.rb#24
  def empty?(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/scopes.rb#30
  def exists?(scope); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/scopes.rb#55
  def has_scopes?(scopes); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/scopes.rb#55
  def scopes?(scopes); end

  # source://doorkeeper//lib/doorkeeper/oauth/scopes.rb#51
  def to_s; end

  private

  # source://doorkeeper//lib/doorkeeper/oauth/scopes.rb#101
  def dynamic_scope_delimiter; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/scopes.rb#111
  def dynamic_scope_match?(allowed, requested); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/scopes.rb#97
  def dynamic_scopes_enabled?; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/scopes.rb#107
  def dynamic_scopes_present?(allowed, requested); end

  # source://doorkeeper//lib/doorkeeper/oauth/scopes.rb#123
  def to_array(other); end

  class << self
    # source://doorkeeper//lib/doorkeeper/oauth/scopes.rb#18
    def from_array(array); end

    # source://doorkeeper//lib/doorkeeper/oauth/scopes.rb#11
    def from_string(string); end
  end
end

# source://doorkeeper//lib/doorkeeper/oauth/scopes.rb#9
Doorkeeper::OAuth::Scopes::DYNAMIC_SCOPE_WILDCARD = T.let(T.unsafe(nil), String)

# source://doorkeeper//lib/doorkeeper/oauth/token.rb#5
class Doorkeeper::OAuth::Token
  class << self
    # source://doorkeeper//lib/doorkeeper/oauth/token.rb#15
    def authenticate(request, *methods); end

    # source://doorkeeper//lib/doorkeeper/oauth/token.rb#25
    def from_access_token_param(request); end

    # source://doorkeeper//lib/doorkeeper/oauth/token.rb#39
    def from_basic_authorization(request); end

    # source://doorkeeper//lib/doorkeeper/oauth/token.rb#33
    def from_bearer_authorization(request); end

    # source://doorkeeper//lib/doorkeeper/oauth/token.rb#29
    def from_bearer_param(request); end

    # source://doorkeeper//lib/doorkeeper/oauth/token.rb#7
    def from_request(request, *methods); end

    private

    # source://doorkeeper//lib/doorkeeper/oauth/token.rb#52
    def decode_basic_credentials_token(encoded_header); end

    # @return [Boolean]
    #
    # source://doorkeeper//lib/doorkeeper/oauth/token.rb#60
    def match?(header, pattern); end

    # source://doorkeeper//lib/doorkeeper/oauth/token.rb#47
    def token_from_basic_header(header, pattern); end

    # source://doorkeeper//lib/doorkeeper/oauth/token.rb#56
    def token_from_header(header, pattern); end
  end
end

# RFC7662 OAuth 2.0 Token Introspection
#
# @see https://datatracker.ietf.org/doc/html/rfc7662
#
# source://doorkeeper//lib/doorkeeper/oauth/token_introspection.rb#8
class Doorkeeper::OAuth::TokenIntrospection
  # @return [TokenIntrospection] a new instance of TokenIntrospection
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_introspection.rb#11
  def initialize(server, token); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_introspection.rb#16
  def authorized?; end

  # Returns the value of attribute error.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_introspection.rb#9
  def error; end

  # source://doorkeeper//lib/doorkeeper/oauth/token_introspection.rb#21
  def error_response; end

  # Returns the value of attribute invalid_request_reason.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_introspection.rb#9
  def invalid_request_reason; end

  # source://doorkeeper//lib/doorkeeper/oauth/token_introspection.rb#33
  def to_json(*_arg0); end

  # Returns the value of attribute token.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_introspection.rb#9
  def token; end

  private

  # Boolean indicator of whether or not the presented token
  # is currently active.  The specifics of a token's "active" state
  # will vary depending on the implementation of the authorization
  # server and the information it keeps about its tokens, but a "true"
  # value return for the "active" property will generally indicate
  # that a given token has been issued by this authorization server,
  # has not been revoked by the resource owner, and is within its
  # given time window of validity (e.g., after its issuance time and
  # before its expiration time).
  #
  # Any other error is considered an "inactive" token.
  #
  # * The token requested does not exist or is invalid
  # * The token expired
  # * The token was issued to a different client than is making this request
  #
  # Since resource servers using token introspection rely on the
  # authorization server to determine the state of a token, the
  # authorization server MUST perform all applicable checks against a
  # token's state. For instance, these tests include the following:
  #
  #    o  If the token can expire, the authorization server MUST determine
  #       whether or not the token has expired.
  #    o  If the token can be issued before it is able to be used, the
  #       authorization server MUST determine whether or not a token's valid
  #       period has started yet.
  #    o  If the token can be revoked after it was issued, the authorization
  #       server MUST determine whether or not such a revocation has taken
  #       place.
  #    o  If the token has been signed, the authorization server MUST
  #       validate the signature.
  #    o  If the token can be used only at certain resource servers, the
  #       authorization server MUST determine whether or not the token can
  #       be used at the resource server making the introspection call.
  #
  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_introspection.rb#167
  def active?; end

  # If the protected resource uses OAuth 2.0 client credentials to
  # authenticate to the introspection endpoint and its credentials are
  # invalid, the authorization server responds with an HTTP 401
  # (Unauthorized) as described in Section 5.2 of OAuth 2.0 [RFC6749].
  #
  # Endpoint must first validate the authentication.
  # If the authentication is invalid, the endpoint should respond with
  # an HTTP 401 status code and an invalid_client response.
  #
  # To prevent token scanning attacks, the endpoint MUST also require
  # some form of authorization to access this endpoint, such as client
  # authentication as described in OAuth 2.0 [RFC6749] or a separate
  # OAuth 2.0 access token such as the bearer token described in OAuth
  # 2.0 Bearer Token Usage [RFC6750].
  #
  # @see https://www.oauth.com/oauth2-servers/token-introspection-endpoint/
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_introspection.rb#58
  def authorize!; end

  # source://doorkeeper//lib/doorkeeper/oauth/token_introspection.rb#70
  def authorize_using_basic_auth!; end

  # source://doorkeeper//lib/doorkeeper/oauth/token_introspection.rb#80
  def authorize_using_bearer_token!; end

  # Client Authentication
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_introspection.rb#94
  def authorized_client; end

  # Bearer Token Authentication
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_introspection.rb#99
  def authorized_token; end

  # RFC7662 Section 2.1
  #
  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_introspection.rb#187
  def authorized_token_matches_introspected?; end

  # Allows to customize introspection response.
  # Provides context (controller) and token for generating developer-specific
  # response.
  #
  # @see https://datatracker.ietf.org/doc/html/rfc7662#section-2.2
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_introspection.rb#205
  def customize_response(response); end

  # If the introspection call is properly authorized but the token is not
  # active, does not exist on this server, or the protected resource is
  # not allowed to introspect this particular token, then the
  # authorization server MUST return an introspection response with the
  # "active" field set to "false".  Note that to avoid disclosing too
  # much of the authorization server's state to a third party, the
  # authorization server SHOULD NOT include any additional information
  # about an inactive token, including why the token is inactive.
  #
  # @see https://datatracker.ietf.org/doc/html/rfc7662 2.2. Introspection Response
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_introspection.rb#126
  def failure_response; end

  # Returns the value of attribute server.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_introspection.rb#39
  def server; end

  # 2.2. Introspection Response
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_introspection.rb#104
  def success_response; end

  # Config constraints for introspection in Doorkeeper.config.allow_token_introspection
  #
  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_introspection.rb#192
  def token_introspection_allowed?(auth_client: T.unsafe(nil), auth_token: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_introspection.rb#180
  def valid_authorized_token?; end

  # Token can be valid only if it is not expired or revoked.
  #
  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_introspection.rb#176
  def valid_token?; end
end

# source://doorkeeper//lib/doorkeeper/oauth/token_request.rb#5
class Doorkeeper::OAuth::TokenRequest
  # @return [TokenRequest] a new instance of TokenRequest
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_request.rb#8
  def initialize(pre_auth, resource_owner); end

  # source://doorkeeper//lib/doorkeeper/oauth/token_request.rb#13
  def authorize; end

  # source://doorkeeper//lib/doorkeeper/oauth/token_request.rb#19
  def deny; end

  # Returns the value of attribute pre_auth.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_request.rb#6
  def pre_auth; end

  # Returns the value of attribute resource_owner.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_request.rb#6
  def resource_owner; end
end

# source://doorkeeper//lib/doorkeeper/oauth/token_response.rb#5
class Doorkeeper::OAuth::TokenResponse
  # @return [TokenResponse] a new instance of TokenResponse
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_response.rb#10
  def initialize(token); end

  # source://doorkeeper//lib/doorkeeper/oauth/token_response.rb#14
  def body; end

  # source://doorkeeper//lib/doorkeeper/oauth/token_response.rb#29
  def headers; end

  # Returns the value of attribute token.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_response.rb#6
  def issued_token; end

  # source://doorkeeper//lib/doorkeeper/oauth/token_response.rb#25
  def status; end

  # Returns the value of attribute token.
  #
  # source://doorkeeper//lib/doorkeeper/oauth/token_response.rb#6
  def token; end
end

# ActiveRecord ORM for Doorkeeper entity models.
# Consists of three main OAuth entities:
#   * Access Token
#   * Access Grant
#   * Application (client)
#
# Do a lazy loading of all the required and configured stuff.
#
# source://doorkeeper//lib/doorkeeper.rb#106
module Doorkeeper::Orm; end

# source://doorkeeper//lib/doorkeeper/orm/active_record.rb#22
module Doorkeeper::Orm::ActiveRecord
  class << self
    # source://doorkeeper//lib/doorkeeper/orm/active_record.rb#35
    def initialize_configured_associations; end

    # source://doorkeeper//lib/doorkeeper/orm/active_record.rb#31
    def run_hooks; end
  end
end

# source://doorkeeper//lib/doorkeeper/orm/active_record.rb#25
module Doorkeeper::Orm::ActiveRecord::Mixins; end

# source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/access_grant.rb#4
module Doorkeeper::Orm::ActiveRecord::Mixins::AccessGrant
  extend ::ActiveSupport::Concern
  include ::Doorkeeper::Models::Orderable
  include ::Doorkeeper::Models::SecretStorable
  include ::Doorkeeper::Models::ResourceOwnerable
  include ::Doorkeeper::AccessGrantMixin

  mixes_in_class_methods ::Doorkeeper::Orm::ActiveRecord::Mixins::AccessGrant::ClassMethods
  mixes_in_class_methods ::Doorkeeper::Models::Orderable::ClassMethods
  mixes_in_class_methods ::Doorkeeper::Models::SecretStorable::ClassMethods
  mixes_in_class_methods ::Doorkeeper::Models::ResourceOwnerable::ClassMethods
  mixes_in_class_methods ::Doorkeeper::AccessGrantMixin::ClassMethods
end

# source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/access_grant.rb#53
module Doorkeeper::Orm::ActiveRecord::Mixins::AccessGrant::ClassMethods
  private

  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/access_grant.rb#56
  def compute_doorkeeper_table_name; end
end

# source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/access_token.rb#4
module Doorkeeper::Orm::ActiveRecord::Mixins::AccessToken
  extend ::ActiveSupport::Concern
  include ::Doorkeeper::Models::Orderable
  include ::Doorkeeper::Models::SecretStorable
  include ::Doorkeeper::Models::ResourceOwnerable
  include ::Doorkeeper::Models::ExpirationTimeSqlMath
  include ::Doorkeeper::AccessTokenMixin

  mixes_in_class_methods ::Doorkeeper::Orm::ActiveRecord::Mixins::AccessToken::ClassMethods
  mixes_in_class_methods ::Doorkeeper::Models::Orderable::ClassMethods
  mixes_in_class_methods ::Doorkeeper::Models::SecretStorable::ClassMethods
  mixes_in_class_methods ::Doorkeeper::Models::ResourceOwnerable::ClassMethods
  mixes_in_class_methods ::Doorkeeper::Models::ExpirationTimeSqlMath::ClassMethods
  mixes_in_class_methods ::Doorkeeper::AccessTokenMixin::ClassMethods
end

# source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/access_token.rb#29
module Doorkeeper::Orm::ActiveRecord::Mixins::AccessToken::ClassMethods
  # Searches for not revoked Access Tokens associated with the
  # specific Resource Owner.
  #
  # @param resource_owner [ActiveRecord::Base] Resource Owner model instance
  # @return [ActiveRecord::Relation] active Access Tokens for Resource Owner
  #
  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/access_token.rb#39
  def active_for(resource_owner); end

  # Returns non-expired and non-revoked access tokens
  #
  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/access_token.rb#48
  def not_expired; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/access_token.rb#43
  def refresh_token_revoked_on_use?; end

  private

  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/access_token.rb#70
  def compute_doorkeeper_table_name; end
end

# source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/application.rb#4
module Doorkeeper::Orm::ActiveRecord::Mixins::Application
  extend ::ActiveSupport::Concern
  include ::Doorkeeper::Models::Orderable
  include ::Doorkeeper::Models::SecretStorable
  include ::Doorkeeper::ApplicationMixin

  mixes_in_class_methods ::Doorkeeper::Orm::ActiveRecord::Mixins::Application::ClassMethods
  mixes_in_class_methods ::Doorkeeper::Models::Orderable::ClassMethods
  mixes_in_class_methods ::Doorkeeper::Models::SecretStorable::ClassMethods
  mixes_in_class_methods ::Doorkeeper::ApplicationMixin::ClassMethods
end

# source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/application.rb#182
module Doorkeeper::Orm::ActiveRecord::Mixins::Application::ClassMethods
  # Returns Applications associated with active (not revoked) Access Tokens
  # that are owned by the specific Resource Owner.
  #
  # @param resource_owner [ActiveRecord::Base] Resource Owner model instance
  # @return [ActiveRecord::Relation] Applications authorized for the Resource Owner
  #
  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/application.rb#192
  def authorized_for(resource_owner); end

  # Revokes AccessToken and AccessGrant records that have not been revoked and
  # associated with the specific Application and Resource Owner.
  #
  # @param resource_owner [ActiveRecord::Base] instance of the Resource Owner model
  #
  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/application.rb#203
  def revoke_tokens_and_grants_for(id, resource_owner); end

  private

  # source://doorkeeper//lib/doorkeeper/orm/active_record/mixins/application.rb#210
  def compute_doorkeeper_table_name; end
end

# Helper class to clear stale and non-active tokens and grants.
# Used by Doorkeeper Rake tasks.
#
# source://doorkeeper//lib/doorkeeper/orm/active_record/stale_records_cleaner.rb#9
class Doorkeeper::Orm::ActiveRecord::StaleRecordsCleaner
  # @return [StaleRecordsCleaner] a new instance of StaleRecordsCleaner
  #
  # source://doorkeeper//lib/doorkeeper/orm/active_record/stale_records_cleaner.rb#10
  def initialize(base_scope); end

  # Clears expired records
  #
  # source://doorkeeper//lib/doorkeeper/orm/active_record/stale_records_cleaner.rb#25
  def clean_expired(ttl); end

  # Clears revoked records
  #
  # source://doorkeeper//lib/doorkeeper/orm/active_record/stale_records_cleaner.rb#15
  def clean_revoked; end
end

# source://doorkeeper//lib/doorkeeper.rb#110
module Doorkeeper::Rails; end

# Abstract router module that implements base behavior
# for generating and mapping Rails routes.
#
# Could be reused in Doorkeeper extensions.
#
# source://doorkeeper//lib/doorkeeper/rails/routes/abstract_router.rb#10
module Doorkeeper::Rails::AbstractRouter
  extend ::ActiveSupport::Concern

  # source://doorkeeper//lib/doorkeeper/rails/routes/abstract_router.rb#15
  def initialize(routes, mapper = T.unsafe(nil), &block); end

  # @raise [NotImplementedError]
  #
  # source://doorkeeper//lib/doorkeeper/rails/routes/abstract_router.rb#20
  def generate_routes!(**_options); end

  # Returns the value of attribute routes.
  #
  # source://doorkeeper//lib/doorkeeper/rails/routes/abstract_router.rb#13
  def routes; end

  private

  # source://doorkeeper//lib/doorkeeper/rails/routes/abstract_router.rb#26
  def map_route(name, method); end
end

# source://doorkeeper//lib/doorkeeper/rails/helpers.rb#5
module Doorkeeper::Rails::Helpers
  # source://doorkeeper//lib/doorkeeper/rails/helpers.rb#6
  def doorkeeper_authorize!(*scopes); end

  # source://doorkeeper//lib/doorkeeper/rails/helpers.rb#14
  def doorkeeper_forbidden_render_options(**_arg0); end

  # source://doorkeeper//lib/doorkeeper/rails/helpers.rb#12
  def doorkeeper_unauthorized_render_options(**_arg0); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/rails/helpers.rb#16
  def valid_doorkeeper_token?; end

  private

  # source://doorkeeper//lib/doorkeeper/rails/helpers.rb#44
  def doorkeeper_error; end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/rails/helpers.rb#68
  def doorkeeper_invalid_token_response?; end

  # source://doorkeeper//lib/doorkeeper/rails/helpers.rb#22
  def doorkeeper_render_error; end

  # source://doorkeeper//lib/doorkeeper/rails/helpers.rb#30
  def doorkeeper_render_error_with(error); end

  # source://doorkeeper//lib/doorkeeper/rails/helpers.rb#52
  def doorkeeper_render_options(error); end

  # source://doorkeeper//lib/doorkeeper/rails/helpers.rb#60
  def doorkeeper_status_for_error(error, respond_not_found_when_forbidden); end

  # source://doorkeeper//lib/doorkeeper/rails/helpers.rb#72
  def doorkeeper_token; end
end

# source://doorkeeper//lib/doorkeeper/rails/routes/mapping.rb#5
class Doorkeeper::Rails::Routes
  include ::Doorkeeper::Rails::AbstractRouter
  extend ::Doorkeeper::Rails::Routes::Registry

  # @return [Routes] a new instance of Routes
  #
  # source://doorkeeper//lib/doorkeeper/rails/routes.rb#30
  def initialize(routes, mapper = T.unsafe(nil), &block); end

  # source://doorkeeper//lib/doorkeeper/rails/routes.rb#34
  def generate_routes!(options); end

  # source://doorkeeper//lib/doorkeeper/rails/routes.rb#20
  def mapping; end

  private

  # source://doorkeeper//lib/doorkeeper/rails/routes.rb#87
  def application_routes(mapping); end

  # source://doorkeeper//lib/doorkeeper/rails/routes.rb#48
  def authorization_routes(mapping); end

  # source://doorkeeper//lib/doorkeeper/rails/routes.rb#94
  def authorized_applications_routes(mapping); end

  # source://doorkeeper//lib/doorkeeper/rails/routes.rb#74
  def introspect_routes(mapping); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/rails/routes.rb#104
  def introspection_routes?; end

  # source://doorkeeper//lib/doorkeeper/rails/routes.rb#100
  def native_authorization_code_route; end

  # source://doorkeeper//lib/doorkeeper/rails/routes.rb#70
  def revoke_routes(mapping); end

  # source://doorkeeper//lib/doorkeeper/rails/routes.rb#78
  def token_info_routes(mapping); end

  # source://doorkeeper//lib/doorkeeper/rails/routes.rb#61
  def token_routes(mapping); end

  class << self
    # source://doorkeeper//lib/doorkeeper/rails/routes.rb#24
    def install!; end

    # source://doorkeeper//lib/doorkeeper/rails/routes.rb#20
    def mapping; end
  end
end

# source://doorkeeper//lib/doorkeeper/rails/routes.rb#11
module Doorkeeper::Rails::Routes::Helper
  # source://doorkeeper//lib/doorkeeper/rails/routes.rb#12
  def use_doorkeeper(options = T.unsafe(nil), &block); end
end

# source://doorkeeper//lib/doorkeeper/rails/routes/mapper.rb#6
class Doorkeeper::Rails::Routes::Mapper
  # @return [Mapper] a new instance of Mapper
  #
  # source://doorkeeper//lib/doorkeeper/rails/routes/mapper.rb#7
  def initialize(mapping = T.unsafe(nil)); end

  # source://doorkeeper//lib/doorkeeper/rails/routes/mapper.rb#24
  def as(alias_names = T.unsafe(nil)); end

  # source://doorkeeper//lib/doorkeeper/rails/routes/mapper.rb#16
  def controllers(controller_names = T.unsafe(nil)); end

  # source://doorkeeper//lib/doorkeeper/rails/routes/mapper.rb#11
  def map(&block); end

  # source://doorkeeper//lib/doorkeeper/rails/routes/mapper.rb#20
  def skip_controllers(*controller_names); end
end

# source://doorkeeper//lib/doorkeeper/rails/routes/mapping.rb#6
class Doorkeeper::Rails::Routes::Mapping
  # @return [Mapping] a new instance of Mapping
  #
  # source://doorkeeper//lib/doorkeeper/rails/routes/mapping.rb#9
  def initialize; end

  # source://doorkeeper//lib/doorkeeper/rails/routes/mapping.rb#27
  def [](routes); end

  # Returns the value of attribute as.
  #
  # source://doorkeeper//lib/doorkeeper/rails/routes/mapping.rb#7
  def as; end

  # Sets the attribute as
  #
  # @param value the value to set the attribute as to.
  #
  # source://doorkeeper//lib/doorkeeper/rails/routes/mapping.rb#7
  def as=(_arg0); end

  # Returns the value of attribute controllers.
  #
  # source://doorkeeper//lib/doorkeeper/rails/routes/mapping.rb#7
  def controllers; end

  # Sets the attribute controllers
  #
  # @param value the value to set the attribute controllers to.
  #
  # source://doorkeeper//lib/doorkeeper/rails/routes/mapping.rb#7
  def controllers=(_arg0); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/rails/routes/mapping.rb#34
  def skipped?(controller); end

  # Returns the value of attribute skips.
  #
  # source://doorkeeper//lib/doorkeeper/rails/routes/mapping.rb#7
  def skips; end

  # Sets the attribute skips
  #
  # @param value the value to set the attribute skips to.
  #
  # source://doorkeeper//lib/doorkeeper/rails/routes/mapping.rb#7
  def skips=(_arg0); end
end

# Thread-safe registry of any Doorkeeper additional routes.
# Used to allow implementing of Doorkeeper extensions that must
# use their own routes.
#
# source://doorkeeper//lib/doorkeeper/rails/routes/registry.rb#10
module Doorkeeper::Rails::Routes::Registry
  # Registers additional routes in the Doorkeeper registry
  #
  # @param routes [Object] routes class
  #
  # source://doorkeeper//lib/doorkeeper/rails/routes/registry.rb#31
  def register(routes); end

  # Registers additional routes in the Doorkeeper registry
  #
  # @param routes [Object] routes class
  #
  # source://doorkeeper//lib/doorkeeper/rails/routes/registry.rb#31
  def register_routes(routes); end

  # Collection of additional registered routes for Doorkeeper.
  #
  # @return [Array<Object>] set of registered routes
  #
  # source://doorkeeper//lib/doorkeeper/rails/routes/registry.rb#20
  def registered_routes; end
end

# source://doorkeeper//lib/doorkeeper/rails/routes/registry.rb#14
class Doorkeeper::Rails::Routes::Registry::InvalidRouterClass < ::StandardError; end

# source://doorkeeper//lib/doorkeeper/rails/routes/registry.rb#11
Doorkeeper::Rails::Routes::Registry::ROUTES_ACCESS_LOCK = T.let(T.unsafe(nil), Thread::Mutex)

# source://doorkeeper//lib/doorkeeper/rails/routes/registry.rb#12
Doorkeeper::Rails::Routes::Registry::ROUTES_DEFINITION_LOCK = T.let(T.unsafe(nil), Thread::Mutex)

# source://doorkeeper//lib/doorkeeper/rake.rb#4
module Doorkeeper::Rake
  class << self
    # source://doorkeeper//lib/doorkeeper/rake.rb#6
    def load_tasks; end
  end
end

# ActiveModel validator for redirect URI validation in according
# to OAuth standards and Doorkeeper configuration.
#
# source://doorkeeper//lib/doorkeeper/orm/active_record/redirect_uri_validator.rb#8
class Doorkeeper::RedirectUriValidator < ::ActiveModel::EachValidator
  # source://doorkeeper//lib/doorkeeper/orm/active_record/redirect_uri_validator.rb#9
  def validate_each(record, attribute, value); end

  private

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/orm/active_record/redirect_uri_validator.rb#37
  def forbidden_uri?(uri); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/orm/active_record/redirect_uri_validator.rb#55
  def invalid_ssl_uri?(uri); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/orm/active_record/redirect_uri_validator.rb#33
  def oob_redirect_uri?(uri); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/orm/active_record/redirect_uri_validator.rb#51
  def relative_uri?(uri); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/orm/active_record/redirect_uri_validator.rb#47
  def unspecified_host?(uri); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/orm/active_record/redirect_uri_validator.rb#41
  def unspecified_scheme?(uri); end
end

# source://doorkeeper//lib/doorkeeper/request.rb#4
module Doorkeeper::Request
  class << self
    # source://doorkeeper//lib/doorkeeper/request.rb#6
    def authorization_strategy(response_type); end

    # @raise [Errors::MissingRequiredParameter]
    #
    # source://doorkeeper//lib/doorkeeper/request.rb#20
    def token_strategy(grant_type); end

    private

    # source://doorkeeper//lib/doorkeeper/request.rb#43
    def authorization_flows; end

    # [NOTE]: this will be removed in a newer versions of Doorkeeper.
    # For retro-compatibility only
    #
    # source://doorkeeper//lib/doorkeeper/request.rb#53
    def available; end

    # source://doorkeeper//lib/doorkeeper/request.rb#57
    def build_fallback_strategy_class(grant_or_request_type); end

    # source://doorkeeper//lib/doorkeeper/request.rb#47
    def token_flows; end
  end
end

# source://doorkeeper//lib/doorkeeper/request/authorization_code.rb#5
class Doorkeeper::Request::AuthorizationCode < ::Doorkeeper::Request::Strategy
  # source://doorkeeper//lib/doorkeeper/request/authorization_code.rb#6
  def client(*_arg0, **_arg1, &_arg2); end

  # source://doorkeeper//lib/doorkeeper/request/authorization_code.rb#6
  def parameters(*_arg0, **_arg1, &_arg2); end

  # source://doorkeeper//lib/doorkeeper/request/authorization_code.rb#8
  def request; end

  private

  # @raise [Errors::MissingRequiredParameter]
  #
  # source://doorkeeper//lib/doorkeeper/request/authorization_code.rb#19
  def grant; end
end

# source://doorkeeper//lib/doorkeeper/request/client_credentials.rb#5
class Doorkeeper::Request::ClientCredentials < ::Doorkeeper::Request::Strategy
  # source://doorkeeper//lib/doorkeeper/request/client_credentials.rb#6
  def client(*_arg0, **_arg1, &_arg2); end

  # source://doorkeeper//lib/doorkeeper/request/client_credentials.rb#6
  def parameters(*_arg0, **_arg1, &_arg2); end

  # source://doorkeeper//lib/doorkeeper/request/client_credentials.rb#8
  def request; end
end

# source://doorkeeper//lib/doorkeeper/request/code.rb#5
class Doorkeeper::Request::Code < ::Doorkeeper::Request::Strategy
  # source://doorkeeper//lib/doorkeeper/request/code.rb#6
  def current_resource_owner(*_arg0, **_arg1, &_arg2); end

  # source://doorkeeper//lib/doorkeeper/request/code.rb#8
  def pre_auth; end

  # source://doorkeeper//lib/doorkeeper/request/code.rb#12
  def request; end
end

# source://doorkeeper//lib/doorkeeper/request/password.rb#5
class Doorkeeper::Request::Password < ::Doorkeeper::Request::Strategy
  # source://doorkeeper//lib/doorkeeper/request/password.rb#6
  def client(*_arg0, **_arg1, &_arg2); end

  # source://doorkeeper//lib/doorkeeper/request/password.rb#6
  def credentials(*_arg0, **_arg1, &_arg2); end

  # source://doorkeeper//lib/doorkeeper/request/password.rb#6
  def parameters(*_arg0, **_arg1, &_arg2); end

  # source://doorkeeper//lib/doorkeeper/request/password.rb#8
  def request; end

  # source://doorkeeper//lib/doorkeeper/request/password.rb#6
  def resource_owner(*_arg0, **_arg1, &_arg2); end
end

# source://doorkeeper//lib/doorkeeper/request/refresh_token.rb#5
class Doorkeeper::Request::RefreshToken < ::Doorkeeper::Request::Strategy
  # source://doorkeeper//lib/doorkeeper/request/refresh_token.rb#6
  def credentials(*_arg0, **_arg1, &_arg2); end

  # source://doorkeeper//lib/doorkeeper/request/refresh_token.rb#6
  def parameters(*_arg0, **_arg1, &_arg2); end

  # source://doorkeeper//lib/doorkeeper/request/refresh_token.rb#8
  def refresh_token; end

  # source://doorkeeper//lib/doorkeeper/request/refresh_token.rb#12
  def request; end
end

# source://doorkeeper//lib/doorkeeper/request/strategy.rb#5
class Doorkeeper::Request::Strategy
  # @return [Strategy] a new instance of Strategy
  #
  # source://doorkeeper//lib/doorkeeper/request/strategy.rb#10
  def initialize(server); end

  # source://doorkeeper//lib/doorkeeper/request/strategy.rb#8
  def authorize(*_arg0, **_arg1, &_arg2); end

  # @raise [NotImplementedError]
  #
  # source://doorkeeper//lib/doorkeeper/request/strategy.rb#14
  def request; end

  # Returns the value of attribute server.
  #
  # source://doorkeeper//lib/doorkeeper/request/strategy.rb#6
  def server; end
end

# source://doorkeeper//lib/doorkeeper/request/token.rb#5
class Doorkeeper::Request::Token < ::Doorkeeper::Request::Strategy
  # source://doorkeeper//lib/doorkeeper/request/token.rb#6
  def current_resource_owner(*_arg0, **_arg1, &_arg2); end

  # source://doorkeeper//lib/doorkeeper/request/token.rb#8
  def pre_auth; end

  # source://doorkeeper//lib/doorkeeper/request/token.rb#12
  def request; end
end

# source://doorkeeper//lib/doorkeeper.rb#37
module Doorkeeper::RevocableTokens; end

# source://doorkeeper//lib/doorkeeper/revocable_tokens/revocable_access_token.rb#5
class Doorkeeper::RevocableTokens::RevocableAccessToken
  # @return [RevocableAccessToken] a new instance of RevocableAccessToken
  #
  # source://doorkeeper//lib/doorkeeper/revocable_tokens/revocable_access_token.rb#8
  def initialize(token); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/revocable_tokens/revocable_access_token.rb#12
  def revocable?; end

  # source://doorkeeper//lib/doorkeeper/revocable_tokens/revocable_access_token.rb#16
  def revoke; end

  # Returns the value of attribute token.
  #
  # source://doorkeeper//lib/doorkeeper/revocable_tokens/revocable_access_token.rb#6
  def token; end
end

# source://doorkeeper//lib/doorkeeper/revocable_tokens/revocable_refresh_token.rb#5
class Doorkeeper::RevocableTokens::RevocableRefreshToken
  # @return [RevocableRefreshToken] a new instance of RevocableRefreshToken
  #
  # source://doorkeeper//lib/doorkeeper/revocable_tokens/revocable_refresh_token.rb#8
  def initialize(token); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/revocable_tokens/revocable_refresh_token.rb#12
  def revocable?; end

  # source://doorkeeper//lib/doorkeeper/revocable_tokens/revocable_refresh_token.rb#16
  def revoke; end

  # Returns the value of attribute token.
  #
  # source://doorkeeper//lib/doorkeeper/revocable_tokens/revocable_refresh_token.rb#6
  def token; end
end

# source://doorkeeper//lib/doorkeeper.rb#115
module Doorkeeper::SecretStoring; end

# Plain text secret storing, which is the default
# but also provides fallback lookup if
# other secret storing mechanisms are enabled.
#
# source://doorkeeper//lib/doorkeeper/secret_storing/bcrypt.rb#9
class Doorkeeper::SecretStoring::BCrypt < ::Doorkeeper::SecretStoring::Base
  class << self
    # Determines whether this strategy supports restoring
    # secrets from the database. This allows detecting users
    # trying to use a non-restorable strategy with +reuse_access_tokens+.
    #
    # @return [Boolean]
    #
    # source://doorkeeper//lib/doorkeeper/secret_storing/bcrypt.rb#30
    def allows_restoring_secrets?; end

    # Test if we can require the BCrypt gem
    #
    # @return [Boolean]
    #
    # source://doorkeeper//lib/doorkeeper/secret_storing/bcrypt.rb#52
    def bcrypt_present?; end

    # Securely compare the given +input+ value with a +stored+ value
    # processed by +transform_secret+.
    #
    # @return [Boolean]
    #
    # source://doorkeeper//lib/doorkeeper/secret_storing/bcrypt.rb#20
    def secret_matches?(input, stored); end

    # Return the value to be stored by the database
    #
    # @param plain_secret The plain secret input / generated
    #
    # source://doorkeeper//lib/doorkeeper/secret_storing/bcrypt.rb#13
    def transform_secret(plain_secret); end

    # Determines what secrets this strategy is applicable for
    #
    # source://doorkeeper//lib/doorkeeper/secret_storing/bcrypt.rb#36
    def validate_for(model); end
  end
end

# Base class for secret storing, including common helpers
#
# source://doorkeeper//lib/doorkeeper/secret_storing/base.rb#7
class Doorkeeper::SecretStoring::Base
  class << self
    # Determines whether this strategy supports restoring
    # secrets from the database. This allows detecting users
    # trying to use a non-restorable strategy with +reuse_access_tokens+.
    #
    # @return [Boolean]
    #
    # source://doorkeeper//lib/doorkeeper/secret_storing/base.rb#42
    def allows_restoring_secrets?; end

    # Return the restored value from the database
    # as retrieved from the database.
    #
    # @param resource The resource instance to act on
    # @param attribute The secret attribute to restore
    # @raise [NotImplementedError]
    #
    # source://doorkeeper//lib/doorkeeper/secret_storing/base.rb#34
    def restore_secret(_resource, _attribute); end

    # Securely compare the given +input+ value with a +stored+ value
    # processed by +transform_secret+.
    #
    # @return [Boolean]
    #
    # source://doorkeeper//lib/doorkeeper/secret_storing/base.rb#58
    def secret_matches?(input, stored); end

    # Transform and store the given secret attribute => value
    # pair used for safely storing the attribute
    #
    # @param resource The model instance being modified
    # @param attribute The secret attribute
    # @param plain_secret The plain secret input / generated
    #
    # source://doorkeeper//lib/doorkeeper/secret_storing/base.rb#22
    def store_secret(resource, attribute, plain_secret); end

    # Return the value to be stored by the database
    # used for looking up a database value.
    #
    # @param plain_secret The plain secret input / generated
    # @raise [NotImplementedError]
    #
    # source://doorkeeper//lib/doorkeeper/secret_storing/base.rb#12
    def transform_secret(_plain_secret); end

    # Determines what secrets this strategy is applicable for
    #
    # @raise [ArgumentError]
    #
    # source://doorkeeper//lib/doorkeeper/secret_storing/base.rb#48
    def validate_for(model); end
  end
end

# Plain text secret storing, which is the default
# but also provides fallback lookup if
# other secret storing mechanisms are enabled.
#
# source://doorkeeper//lib/doorkeeper/secret_storing/plain.rb#9
class Doorkeeper::SecretStoring::Plain < ::Doorkeeper::SecretStoring::Base
  class << self
    # Plain values obviously allow restoring
    #
    # @return [Boolean]
    #
    # source://doorkeeper//lib/doorkeeper/secret_storing/plain.rb#28
    def allows_restoring_secrets?; end

    # Return the restored value from the database
    # as retrieved from the database.
    #
    # @param resource The resource instance to act on
    # @param attribute The secret attribute to restore
    #
    # source://doorkeeper//lib/doorkeeper/secret_storing/plain.rb#22
    def restore_secret(resource, attribute); end

    # Return the value to be stored by the database
    #
    # @param plain_secret The plain secret input / generated
    #
    # source://doorkeeper//lib/doorkeeper/secret_storing/plain.rb#13
    def transform_secret(plain_secret); end
  end
end

# Plain text secret storing, which is the default
# but also provides fallback lookup if
# other secret storing mechanisms are enabled.
#
# source://doorkeeper//lib/doorkeeper/secret_storing/sha256_hash.rb#9
class Doorkeeper::SecretStoring::Sha256Hash < ::Doorkeeper::SecretStoring::Base
  class << self
    # Determines whether this strategy supports restoring
    # secrets from the database. This allows detecting users
    # trying to use a non-restorable strategy with +reuse_access_tokens+.
    #
    # @return [Boolean]
    #
    # source://doorkeeper//lib/doorkeeper/secret_storing/sha256_hash.rb#21
    def allows_restoring_secrets?; end

    # Return the value to be stored by the database
    #
    # @param plain_secret The plain secret input / generated
    #
    # source://doorkeeper//lib/doorkeeper/secret_storing/sha256_hash.rb#13
    def transform_secret(plain_secret); end
  end
end

# source://doorkeeper//lib/doorkeeper/server.rb#4
class Doorkeeper::Server
  # @return [Server] a new instance of Server
  #
  # source://doorkeeper//lib/doorkeeper/server.rb#7
  def initialize(context); end

  # source://doorkeeper//lib/doorkeeper/server.rb#11
  def authorization_request(strategy); end

  # source://doorkeeper//lib/doorkeeper/server.rb#26
  def client; end

  # Returns the value of attribute context.
  #
  # source://doorkeeper//lib/doorkeeper/server.rb#5
  def context; end

  # source://doorkeeper//lib/doorkeeper/server.rb#39
  def credentials; end

  # source://doorkeeper//lib/doorkeeper/server.rb#30
  def current_resource_owner; end

  # TODO: context should be the request
  #
  # source://doorkeeper//lib/doorkeeper/server.rb#22
  def parameters; end

  # TODO: Use configuration and evaluate proper context on block
  #
  # source://doorkeeper//lib/doorkeeper/server.rb#35
  def resource_owner; end

  # source://doorkeeper//lib/doorkeeper/server.rb#16
  def token_request(strategy); end
end

# source://doorkeeper//lib/doorkeeper/stale_records_cleaner.rb#4
class Doorkeeper::StaleRecordsCleaner
  class << self
    # source://doorkeeper//lib/doorkeeper/stale_records_cleaner.rb#20
    def configured_orm; end

    # source://doorkeeper//lib/doorkeeper/stale_records_cleaner.rb#7
    def for(base_scope); end

    # source://doorkeeper//lib/doorkeeper/stale_records_cleaner.rb#16
    def new(base_scope); end
  end
end

# source://doorkeeper//lib/doorkeeper/stale_records_cleaner.rb#5
Doorkeeper::StaleRecordsCleaner::CLEANER_CLASS = T.let(T.unsafe(nil), String)

class Doorkeeper::TokenInfoController < ::Doorkeeper::ApplicationMetalController
  def show; end

  protected

  def doorkeeper_token_to_json; end
  def error_to_json(error); end

  class << self
    # source://actionpack/7.0.8.7/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

class Doorkeeper::TokensController < ::Doorkeeper::ApplicationMetalController
  def create; end
  def introspect; end
  def revoke; end

  private

  def access_token; end
  def after_successful_authorization(context); end
  def authorize_response; end
  def authorized?; end
  def before_successful_authorization(context = T.unsafe(nil)); end
  def build_context(**attributes); end
  def refresh_token; end
  def revocable_token; end
  def revocation_error_response; end
  def revoke_token; end
  def strategy; end
  def token; end
  def validate_presence_of_client; end

  class << self
    # source://activesupport/7.0.8.7/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.8.7/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

# source://doorkeeper//lib/doorkeeper/version.rb#4
module Doorkeeper::VERSION; end

# Semantic versioning
#
# source://doorkeeper//lib/doorkeeper/version.rb#6
Doorkeeper::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://doorkeeper//lib/doorkeeper/version.rb#7
Doorkeeper::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://doorkeeper//lib/doorkeeper/version.rb#9
Doorkeeper::VERSION::PRE = T.let(T.unsafe(nil), T.untyped)

# Full version number
#
# source://doorkeeper//lib/doorkeeper/version.rb#12
Doorkeeper::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://doorkeeper//lib/doorkeeper/version.rb#8
Doorkeeper::VERSION::TINY = T.let(T.unsafe(nil), Integer)

# source://doorkeeper//lib/doorkeeper/validations.rb#4
module Doorkeeper::Validations
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Doorkeeper::Validations::ClassMethods

  # Returns the value of attribute error.
  #
  # source://doorkeeper//lib/doorkeeper/validations.rb#7
  def error; end

  # Sets the attribute error
  #
  # @param value the value to set the attribute error to.
  #
  # source://doorkeeper//lib/doorkeeper/validations.rb#7
  def error=(_arg0); end

  # @return [Boolean]
  #
  # source://doorkeeper//lib/doorkeeper/validations.rb#18
  def valid?; end

  # source://doorkeeper//lib/doorkeeper/validations.rb#9
  def validate; end
end

# source://doorkeeper//lib/doorkeeper/validations.rb#23
module Doorkeeper::Validations::ClassMethods
  # source://doorkeeper//lib/doorkeeper/validations.rb#24
  def validate(attribute, options = T.unsafe(nil)); end

  # source://doorkeeper//lib/doorkeeper/validations.rb#28
  def validations; end
end
