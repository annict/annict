# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `User`.
# Please instead update this file by running `bin/tapioca dsl User`.


class User
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  sig { returns(T.untyped) }
  def password_confirmation; end

  sig { params(password_confirmation: T.untyped).returns(T.untyped) }
  def password_confirmation=(password_confirmation); end

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::User).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::User]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::User)) }
    def fifth; end

    sig { returns(::User) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::User)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::User])
    end
    sig { params(args: NilClass, block: T.proc.params(object: ::User).void).returns(T.nilable(::User)) }
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::User)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::User) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::User).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::User])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::User]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::User]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::User)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::User) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::User) }
    def find_sole_by(arg, *args); end

    sig { params(limit: NilClass).returns(T.nilable(::User)) }
    sig { params(limit: Integer).returns(T::Array[::User]) }
    def first(limit = nil); end

    sig { returns(::User) }
    def first!; end

    sig { returns(T.nilable(::User)) }
    def forty_two; end

    sig { returns(::User) }
    def forty_two!; end

    sig { returns(T.nilable(::User)) }
    def fourth; end

    sig { returns(::User) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: NilClass).returns(T.nilable(::User)) }
    sig { params(limit: Integer).returns(T::Array[::User]) }
    def last(limit = nil); end

    sig { returns(::User) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::User)) }
    def second; end

    sig { returns(::User) }
    def second!; end

    sig { returns(T.nilable(::User)) }
    def second_to_last; end

    sig { returns(::User) }
    def second_to_last!; end

    sig { returns(::User) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::User).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { params(limit: NilClass).returns(T.nilable(::User)) }
    sig { params(limit: Integer).returns(T::Array[::User]) }
    def take(limit = nil); end

    sig { returns(::User) }
    def take!; end

    sig { returns(T.nilable(::User)) }
    def third; end

    sig { returns(::User) }
    def third!; end

    sig { returns(T.nilable(::User)) }
    def third_to_last; end

    sig { returns(::User) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    # This method is created by ActiveRecord on the `User` class because it declared `has_many :activities`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Activity::PrivateCollectionProxy) }
    def activities; end

    sig { params(value: T::Enumerable[::Activity]).void }
    def activities=(value); end

    sig { returns(T::Array[T.untyped]) }
    def activity_group_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def activity_group_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :activity_groups`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ActivityGroup::PrivateCollectionProxy) }
    def activity_groups; end

    sig { params(value: T::Enumerable[::ActivityGroup]).void }
    def activity_groups=(value); end

    sig { returns(T::Array[T.untyped]) }
    def activity_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def activity_ids=(ids); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::EmailNotification) }
    def build_email_notification(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::GumroadSubscriber) }
    def build_gumroad_subscriber(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Profile) }
    def build_profile(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Setting) }
    def build_setting(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def channel_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def channel_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :channels, through: :receptions`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Channel::PrivateCollectionProxy) }
    def channels; end

    sig { params(value: T::Enumerable[::Channel]).void }
    def channels=(value); end

    sig { returns(T::Array[T.untyped]) }
    def character_favorite_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def character_favorite_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :character_favorites`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CharacterFavorite::PrivateCollectionProxy) }
    def character_favorites; end

    sig { params(value: T::Enumerable[::CharacterFavorite]).void }
    def character_favorites=(value); end

    sig { returns(T::Array[T.untyped]) }
    def collection_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def collection_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def collection_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def collection_item_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :collection_items`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CollectionItem::PrivateCollectionProxy) }
    def collection_items; end

    sig { params(value: T::Enumerable[::CollectionItem]).void }
    def collection_items=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :collections`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Collection::PrivateCollectionProxy) }
    def collections; end

    sig { params(value: T::Enumerable[::Collection]).void }
    def collections=(value); end

    sig { returns(T::Array[T.untyped]) }
    def connected_application_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def connected_application_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :connected_applications, through: :oauth_access_tokens`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Oauth::Application::PrivateCollectionProxy) }
    def connected_applications; end

    sig { params(value: T::Enumerable[::Oauth::Application]).void }
    def connected_applications=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::EmailNotification) }
    def create_email_notification(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::EmailNotification) }
    def create_email_notification!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::GumroadSubscriber) }
    def create_gumroad_subscriber(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::GumroadSubscriber) }
    def create_gumroad_subscriber!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Profile) }
    def create_profile(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Profile) }
    def create_profile!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Setting) }
    def create_setting(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Setting) }
    def create_setting!(*args, &blk); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :db_activities`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DbActivity::PrivateCollectionProxy) }
    def db_activities; end

    sig { params(value: T::Enumerable[::DbActivity]).void }
    def db_activities=(value); end

    sig { returns(T::Array[T.untyped]) }
    def db_activity_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def db_activity_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def db_comment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def db_comment_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :db_comments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DbComment::PrivateCollectionProxy) }
    def db_comments; end

    sig { params(value: T::Enumerable[::DbComment]).void }
    def db_comments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def email_confirmation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def email_confirmation_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :email_confirmations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::EmailConfirmation::PrivateCollectionProxy) }
    def email_confirmations; end

    sig { params(value: T::Enumerable[::EmailConfirmation]).void }
    def email_confirmations=(value); end

    sig { returns(T.nilable(::EmailNotification)) }
    def email_notification; end

    sig { params(value: T.nilable(::EmailNotification)).void }
    def email_notification=(value); end

    sig { returns(T::Array[T.untyped]) }
    def episode_record_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def episode_record_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :episode_records`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::EpisodeRecord::PrivateCollectionProxy) }
    def episode_records; end

    sig { params(value: T::Enumerable[::EpisodeRecord]).void }
    def episode_records=(value); end

    sig { returns(T::Array[T.untyped]) }
    def favorite_character_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def favorite_character_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :favorite_characters, through: :character_favorites`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Character::PrivateCollectionProxy) }
    def favorite_characters; end

    sig { params(value: T::Enumerable[::Character]).void }
    def favorite_characters=(value); end

    sig { returns(T::Array[T.untyped]) }
    def favorite_organization_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def favorite_organization_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :favorite_organizations, through: :organization_favorites`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Organization::PrivateCollectionProxy) }
    def favorite_organizations; end

    sig { params(value: T::Enumerable[::Organization]).void }
    def favorite_organizations=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :favorite_people, through: :person_favorites`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Person::PrivateCollectionProxy) }
    def favorite_people; end

    sig { params(value: T::Enumerable[::Person]).void }
    def favorite_people=(value); end

    sig { returns(T::Array[T.untyped]) }
    def favorite_person_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def favorite_person_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def follow_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def follow_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def following_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def following_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :followings, through: :follows`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::User::PrivateCollectionProxy) }
    def followings; end

    sig { params(value: T::Enumerable[::User]).void }
    def followings=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :follows`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Follow::PrivateCollectionProxy) }
    def follows; end

    sig { params(value: T::Enumerable[::Follow]).void }
    def follows=(value); end

    sig { returns(T::Array[T.untyped]) }
    def forum_comment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def forum_comment_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :forum_comments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ForumComment::PrivateCollectionProxy) }
    def forum_comments; end

    sig { params(value: T::Enumerable[::ForumComment]).void }
    def forum_comments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def forum_post_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def forum_post_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def forum_post_participant_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def forum_post_participant_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :forum_post_participants`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ForumPostParticipant::PrivateCollectionProxy) }
    def forum_post_participants; end

    sig { params(value: T::Enumerable[::ForumPostParticipant]).void }
    def forum_post_participants=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :forum_posts`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ForumPost::PrivateCollectionProxy) }
    def forum_posts; end

    sig { params(value: T::Enumerable[::ForumPost]).void }
    def forum_posts=(value); end

    sig { returns(T.nilable(::GumroadSubscriber)) }
    def gumroad_subscriber; end

    sig { params(value: T.nilable(::GumroadSubscriber)).void }
    def gumroad_subscriber=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :library_entries`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::LibraryEntry::PrivateCollectionProxy) }
    def library_entries; end

    sig { params(value: T::Enumerable[::LibraryEntry]).void }
    def library_entries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def library_entry_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def library_entry_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def like_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def like_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :likes`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Like::PrivateCollectionProxy) }
    def likes; end

    sig { params(value: T::Enumerable[::Like]).void }
    def likes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def multiple_episode_record_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def multiple_episode_record_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :multiple_episode_records`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::MultipleEpisodeRecord::PrivateCollectionProxy) }
    def multiple_episode_records; end

    sig { params(value: T::Enumerable[::MultipleEpisodeRecord]).void }
    def multiple_episode_records=(value); end

    sig { returns(T::Array[T.untyped]) }
    def mute_user_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def mute_user_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :mute_users`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::MuteUser::PrivateCollectionProxy) }
    def mute_users; end

    sig { params(value: T::Enumerable[::MuteUser]).void }
    def mute_users=(value); end

    sig { returns(T::Array[T.untyped]) }
    def muted_user_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def muted_user_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :muted_users`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::MuteUser::PrivateCollectionProxy) }
    def muted_users; end

    sig { params(value: T::Enumerable[::MuteUser]).void }
    def muted_users=(value); end

    sig { returns(T::Array[T.untyped]) }
    def notification_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def notification_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :notifications`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Notification::PrivateCollectionProxy) }
    def notifications; end

    sig { params(value: T::Enumerable[::Notification]).void }
    def notifications=(value); end

    sig { returns(T::Array[T.untyped]) }
    def oauth_access_grant_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def oauth_access_grant_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :oauth_access_grants`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Oauth::AccessGrant::PrivateCollectionProxy) }
    def oauth_access_grants; end

    sig { params(value: T::Enumerable[::Oauth::AccessGrant]).void }
    def oauth_access_grants=(value); end

    sig { returns(T::Array[T.untyped]) }
    def oauth_access_token_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def oauth_access_token_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :oauth_access_tokens`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Oauth::AccessToken::PrivateCollectionProxy) }
    def oauth_access_tokens; end

    sig { params(value: T::Enumerable[::Oauth::AccessToken]).void }
    def oauth_access_tokens=(value); end

    sig { returns(T::Array[T.untyped]) }
    def oauth_application_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def oauth_application_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :oauth_applications`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Oauth::Application::PrivateCollectionProxy) }
    def oauth_applications; end

    sig { params(value: T::Enumerable[::Oauth::Application]).void }
    def oauth_applications=(value); end

    sig { returns(T::Array[T.untyped]) }
    def organization_favorite_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def organization_favorite_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :organization_favorites`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::OrganizationFavorite::PrivateCollectionProxy) }
    def organization_favorites; end

    sig { params(value: T::Enumerable[::OrganizationFavorite]).void }
    def organization_favorites=(value); end

    sig { returns(T::Array[T.untyped]) }
    def person_favorite_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def person_favorite_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :person_favorites`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PersonFavorite::PrivateCollectionProxy) }
    def person_favorites; end

    sig { params(value: T::Enumerable[::PersonFavorite]).void }
    def person_favorites=(value); end

    sig { returns(T.nilable(::Profile)) }
    def profile; end

    sig { params(value: T.nilable(::Profile)).void }
    def profile=(value); end

    sig { returns(T::Array[T.untyped]) }
    def provider_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def provider_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :providers`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Provider::PrivateCollectionProxy) }
    def providers; end

    sig { params(value: T::Enumerable[::Provider]).void }
    def providers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def reaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def reaction_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :reactions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Reaction::PrivateCollectionProxy) }
    def reactions; end

    sig { params(value: T::Enumerable[::Reaction]).void }
    def reactions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def reception_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def reception_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :receptions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Reception::PrivateCollectionProxy) }
    def receptions; end

    sig { params(value: T::Enumerable[::Reception]).void }
    def receptions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def record_comment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def record_comment_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :record_comments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Comment::PrivateCollectionProxy) }
    def record_comments; end

    sig { params(value: T::Enumerable[::Comment]).void }
    def record_comments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def record_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def record_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :records`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Record::PrivateCollectionProxy) }
    def records; end

    sig { params(value: T::Enumerable[::Record]).void }
    def records=(value); end

    sig { returns(T.nilable(::EmailNotification)) }
    def reload_email_notification; end

    sig { returns(T.nilable(::GumroadSubscriber)) }
    def reload_gumroad_subscriber; end

    sig { returns(T.nilable(::Profile)) }
    def reload_profile; end

    sig { returns(T.nilable(::Setting)) }
    def reload_setting; end

    sig { void }
    def reset_email_notification; end

    sig { void }
    def reset_gumroad_subscriber; end

    sig { void }
    def reset_profile; end

    sig { void }
    def reset_setting; end

    sig { returns(T.nilable(::Setting)) }
    def setting; end

    sig { params(value: T.nilable(::Setting)).void }
    def setting=(value); end

    sig { returns(T::Array[T.untyped]) }
    def status_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def status_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :statuses`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Status::PrivateCollectionProxy) }
    def statuses; end

    sig { params(value: T::Enumerable[::Status]).void }
    def statuses=(value); end

    sig { returns(T::Array[T.untyped]) }
    def userland_project_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def userland_project_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def userland_project_member_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def userland_project_member_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :userland_project_members`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::UserlandProjectMember::PrivateCollectionProxy) }
    def userland_project_members; end

    sig { params(value: T::Enumerable[::UserlandProjectMember]).void }
    def userland_project_members=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :userland_projects, through: :userland_project_members`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::UserlandProject::PrivateCollectionProxy) }
    def userland_projects; end

    sig { params(value: T::Enumerable[::UserlandProject]).void }
    def userland_projects=(value); end

    sig { returns(T::Array[T.untyped]) }
    def work_comment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def work_comment_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :work_comments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::WorkComment::PrivateCollectionProxy) }
    def work_comments; end

    sig { params(value: T::Enumerable[::WorkComment]).void }
    def work_comments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def work_record_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def work_record_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :work_records`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::WorkRecord::PrivateCollectionProxy) }
    def work_records; end

    sig { params(value: T::Enumerable[::WorkRecord]).void }
    def work_records=(value); end

    sig { returns(T::Array[T.untyped]) }
    def work_tag_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def work_tag_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def work_taggable_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def work_taggable_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :work_taggables`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::WorkTaggable::PrivateCollectionProxy) }
    def work_taggables; end

    sig { params(value: T::Enumerable[::WorkTaggable]).void }
    def work_taggables=(value); end

    sig { returns(T::Array[T.untyped]) }
    def work_tagging_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def work_tagging_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :work_taggings`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::WorkTagging::PrivateCollectionProxy) }
    def work_taggings; end

    sig { params(value: T::Enumerable[::WorkTagging]).void }
    def work_taggings=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :work_tags, through: :work_taggables`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::WorkTag::PrivateCollectionProxy) }
    def work_tags; end

    sig { params(value: T::Enumerable[::WorkTag]).void }
    def work_tags=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def deleted(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(::String) }
    def aasm_state; end

    sig { params(value: ::String).returns(::String) }
    def aasm_state=(value); end

    sig { returns(T::Boolean) }
    def aasm_state?; end

    sig { returns(T.nilable(::String)) }
    def aasm_state_before_last_save; end

    sig { returns(T.untyped) }
    def aasm_state_before_type_cast; end

    sig { returns(T::Boolean) }
    def aasm_state_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def aasm_state_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def aasm_state_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def aasm_state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def aasm_state_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def aasm_state_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def aasm_state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def aasm_state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def aasm_state_was; end

    sig { void }
    def aasm_state_will_change!; end

    sig { returns(T.nilable(T::Array[::String])) }
    def allowed_locales; end

    sig { params(value: T.nilable(T::Array[::String])).returns(T.nilable(T::Array[::String])) }
    def allowed_locales=(value); end

    sig { returns(T::Boolean) }
    def allowed_locales?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def allowed_locales_before_last_save; end

    sig { returns(T.untyped) }
    def allowed_locales_before_type_cast; end

    sig { returns(T::Boolean) }
    def allowed_locales_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Array[::String]), T.nilable(T::Array[::String])])) }
    def allowed_locales_change; end

    sig { returns(T.nilable([T.nilable(T::Array[::String]), T.nilable(T::Array[::String])])) }
    def allowed_locales_change_to_be_saved; end

    sig { params(from: T.nilable(T::Array[::String]), to: T.nilable(T::Array[::String])).returns(T::Boolean) }
    def allowed_locales_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Array[::String])) }
    def allowed_locales_in_database; end

    sig { returns(T.nilable([T.nilable(T::Array[::String]), T.nilable(T::Array[::String])])) }
    def allowed_locales_previous_change; end

    sig { params(from: T.nilable(T::Array[::String]), to: T.nilable(T::Array[::String])).returns(T::Boolean) }
    def allowed_locales_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Array[::String])) }
    def allowed_locales_previously_was; end

    sig { returns(T.nilable(T::Array[::String])) }
    def allowed_locales_was; end

    sig { void }
    def allowed_locales_will_change!; end

    sig { returns(::Integer) }
    def character_favorites_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def character_favorites_count=(value); end

    sig { returns(T::Boolean) }
    def character_favorites_count?; end

    sig { returns(T.nilable(::Integer)) }
    def character_favorites_count_before_last_save; end

    sig { returns(T.untyped) }
    def character_favorites_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def character_favorites_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def character_favorites_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def character_favorites_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def character_favorites_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def character_favorites_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def character_favorites_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def character_favorites_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def character_favorites_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def character_favorites_count_was; end

    sig { void }
    def character_favorites_count_will_change!; end

    sig { returns(::Integer) }
    def completed_works_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def completed_works_count=(value); end

    sig { returns(T::Boolean) }
    def completed_works_count?; end

    sig { returns(T.nilable(::Integer)) }
    def completed_works_count_before_last_save; end

    sig { returns(T.untyped) }
    def completed_works_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def completed_works_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def completed_works_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def completed_works_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def completed_works_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def completed_works_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def completed_works_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def completed_works_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def completed_works_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def completed_works_count_was; end

    sig { void }
    def completed_works_count_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmation_sent_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmation_sent_at=(value); end

    sig { returns(T::Boolean) }
    def confirmation_sent_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmation_sent_at_before_last_save; end

    sig { returns(T.untyped) }
    def confirmation_sent_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def confirmation_sent_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def confirmation_sent_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def confirmation_sent_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def confirmation_sent_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmation_sent_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def confirmation_sent_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def confirmation_sent_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmation_sent_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmation_sent_at_was; end

    sig { void }
    def confirmation_sent_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def confirmation_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def confirmation_token=(value); end

    sig { returns(T::Boolean) }
    def confirmation_token?; end

    sig { returns(T.nilable(::String)) }
    def confirmation_token_before_last_save; end

    sig { returns(T.untyped) }
    def confirmation_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def confirmation_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def confirmation_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def confirmation_token_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def confirmation_token_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def confirmation_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def confirmation_token_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def confirmation_token_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def confirmation_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def confirmation_token_was; end

    sig { void }
    def confirmation_token_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmed_at=(value); end

    sig { returns(T::Boolean) }
    def confirmed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmed_at_before_last_save; end

    sig { returns(T.untyped) }
    def confirmed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def confirmed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def confirmed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def confirmed_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def confirmed_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def confirmed_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def confirmed_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmed_at_was; end

    sig { void }
    def confirmed_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at=(value); end

    sig { returns(T::Boolean) }
    def current_sign_in_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at_before_last_save; end

    sig { returns(T.untyped) }
    def current_sign_in_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def current_sign_in_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def current_sign_in_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def current_sign_in_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def current_sign_in_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def current_sign_in_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def current_sign_in_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at_was; end

    sig { void }
    def current_sign_in_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def current_sign_in_ip; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def current_sign_in_ip=(value); end

    sig { returns(T::Boolean) }
    def current_sign_in_ip?; end

    sig { returns(T.nilable(::String)) }
    def current_sign_in_ip_before_last_save; end

    sig { returns(T.untyped) }
    def current_sign_in_ip_before_type_cast; end

    sig { returns(T::Boolean) }
    def current_sign_in_ip_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def current_sign_in_ip_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def current_sign_in_ip_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def current_sign_in_ip_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def current_sign_in_ip_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def current_sign_in_ip_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def current_sign_in_ip_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def current_sign_in_ip_previously_was; end

    sig { returns(T.nilable(::String)) }
    def current_sign_in_ip_was; end

    sig { void }
    def current_sign_in_ip_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at=(value); end

    sig { returns(T::Boolean) }
    def deleted_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_before_last_save; end

    sig { returns(T.untyped) }
    def deleted_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def deleted_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def deleted_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def deleted_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_was; end

    sig { void }
    def deleted_at_will_change!; end

    sig { returns(::Integer) }
    def dropped_works_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def dropped_works_count=(value); end

    sig { returns(T::Boolean) }
    def dropped_works_count?; end

    sig { returns(T.nilable(::Integer)) }
    def dropped_works_count_before_last_save; end

    sig { returns(T.untyped) }
    def dropped_works_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def dropped_works_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def dropped_works_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def dropped_works_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def dropped_works_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def dropped_works_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def dropped_works_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def dropped_works_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def dropped_works_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def dropped_works_count_was; end

    sig { void }
    def dropped_works_count_will_change!; end

    sig { returns(::String) }
    def email; end

    sig { params(value: ::String).returns(::String) }
    def email=(value); end

    sig { returns(T::Boolean) }
    def email?; end

    sig { returns(T.nilable(::String)) }
    def email_before_last_save; end

    sig { returns(T.untyped) }
    def email_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def email_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def email_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def email_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def email_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def email_was; end

    sig { void }
    def email_will_change!; end

    sig { returns(::String) }
    def encrypted_password; end

    sig { params(value: ::String).returns(::String) }
    def encrypted_password=(value); end

    sig { returns(T::Boolean) }
    def encrypted_password?; end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_before_last_save; end

    sig { returns(T.untyped) }
    def encrypted_password_before_type_cast; end

    sig { returns(T::Boolean) }
    def encrypted_password_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def encrypted_password_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def encrypted_password_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def encrypted_password_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def encrypted_password_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def encrypted_password_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_previously_was; end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_was; end

    sig { void }
    def encrypted_password_will_change!; end

    sig { returns(::Integer) }
    def episode_records_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def episode_records_count=(value); end

    sig { returns(T::Boolean) }
    def episode_records_count?; end

    sig { returns(T.nilable(::Integer)) }
    def episode_records_count_before_last_save; end

    sig { returns(T.untyped) }
    def episode_records_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def episode_records_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def episode_records_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def episode_records_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def episode_records_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def episode_records_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def episode_records_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def episode_records_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def episode_records_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def episode_records_count_was; end

    sig { void }
    def episode_records_count_will_change!; end

    sig { returns(::Integer) }
    def followers_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def followers_count=(value); end

    sig { returns(T::Boolean) }
    def followers_count?; end

    sig { returns(T.nilable(::Integer)) }
    def followers_count_before_last_save; end

    sig { returns(T.untyped) }
    def followers_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def followers_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def followers_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def followers_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def followers_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def followers_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def followers_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def followers_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def followers_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def followers_count_was; end

    sig { void }
    def followers_count_will_change!; end

    sig { returns(::Integer) }
    def following_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def following_count=(value); end

    sig { returns(T::Boolean) }
    def following_count?; end

    sig { returns(T.nilable(::Integer)) }
    def following_count_before_last_save; end

    sig { returns(T.untyped) }
    def following_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def following_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def following_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def following_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def following_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def following_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def following_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def following_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def following_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def following_count_was; end

    sig { void }
    def following_count_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def gumroad_subscriber_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def gumroad_subscriber_id=(value); end

    sig { returns(T::Boolean) }
    def gumroad_subscriber_id?; end

    sig { returns(T.nilable(::Integer)) }
    def gumroad_subscriber_id_before_last_save; end

    sig { returns(T.untyped) }
    def gumroad_subscriber_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def gumroad_subscriber_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def gumroad_subscriber_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def gumroad_subscriber_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def gumroad_subscriber_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def gumroad_subscriber_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def gumroad_subscriber_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def gumroad_subscriber_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def gumroad_subscriber_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def gumroad_subscriber_id_was; end

    sig { void }
    def gumroad_subscriber_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at=(value); end

    sig { returns(T::Boolean) }
    def last_sign_in_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at_before_last_save; end

    sig { returns(T.untyped) }
    def last_sign_in_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_sign_in_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_sign_in_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_sign_in_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def last_sign_in_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_sign_in_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def last_sign_in_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at_was; end

    sig { void }
    def last_sign_in_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def last_sign_in_ip; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def last_sign_in_ip=(value); end

    sig { returns(T::Boolean) }
    def last_sign_in_ip?; end

    sig { returns(T.nilable(::String)) }
    def last_sign_in_ip_before_last_save; end

    sig { returns(T.untyped) }
    def last_sign_in_ip_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_sign_in_ip_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_sign_in_ip_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_sign_in_ip_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def last_sign_in_ip_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_sign_in_ip_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_sign_in_ip_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def last_sign_in_ip_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_sign_in_ip_previously_was; end

    sig { returns(T.nilable(::String)) }
    def last_sign_in_ip_was; end

    sig { void }
    def last_sign_in_ip_will_change!; end

    sig { returns(T.untyped) }
    def locale; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def locale=(value); end

    sig { returns(T::Boolean) }
    def locale?; end

    sig { returns(T.untyped) }
    def locale_before_last_save; end

    sig { returns(T.untyped) }
    def locale_before_type_cast; end

    sig { returns(T::Boolean) }
    def locale_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def locale_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def locale_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def locale_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def locale_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def locale_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def locale_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def locale_previously_was; end

    sig { returns(T.untyped) }
    def locale_was; end

    sig { void }
    def locale_will_change!; end

    sig { returns(::Integer) }
    def notifications_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def notifications_count=(value); end

    sig { returns(T::Boolean) }
    def notifications_count?; end

    sig { returns(T.nilable(::Integer)) }
    def notifications_count_before_last_save; end

    sig { returns(T.untyped) }
    def notifications_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def notifications_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def notifications_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def notifications_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def notifications_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def notifications_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def notifications_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def notifications_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def notifications_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def notifications_count_was; end

    sig { void }
    def notifications_count_will_change!; end

    sig { returns(::Integer) }
    def on_hold_works_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def on_hold_works_count=(value); end

    sig { returns(T::Boolean) }
    def on_hold_works_count?; end

    sig { returns(T.nilable(::Integer)) }
    def on_hold_works_count_before_last_save; end

    sig { returns(T.untyped) }
    def on_hold_works_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def on_hold_works_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def on_hold_works_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def on_hold_works_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def on_hold_works_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def on_hold_works_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def on_hold_works_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def on_hold_works_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def on_hold_works_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def on_hold_works_count_was; end

    sig { void }
    def on_hold_works_count_will_change!; end

    sig { returns(::Integer) }
    def organization_favorites_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def organization_favorites_count=(value); end

    sig { returns(T::Boolean) }
    def organization_favorites_count?; end

    sig { returns(T.nilable(::Integer)) }
    def organization_favorites_count_before_last_save; end

    sig { returns(T.untyped) }
    def organization_favorites_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def organization_favorites_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def organization_favorites_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def organization_favorites_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def organization_favorites_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def organization_favorites_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def organization_favorites_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def organization_favorites_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def organization_favorites_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def organization_favorites_count_was; end

    sig { void }
    def organization_favorites_count_will_change!; end

    sig { returns(::Integer) }
    def person_favorites_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def person_favorites_count=(value); end

    sig { returns(T::Boolean) }
    def person_favorites_count?; end

    sig { returns(T.nilable(::Integer)) }
    def person_favorites_count_before_last_save; end

    sig { returns(T.untyped) }
    def person_favorites_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def person_favorites_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def person_favorites_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def person_favorites_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def person_favorites_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def person_favorites_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def person_favorites_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def person_favorites_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def person_favorites_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def person_favorites_count_was; end

    sig { void }
    def person_favorites_count_will_change!; end

    sig { returns(::Integer) }
    def plan_to_watch_works_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def plan_to_watch_works_count=(value); end

    sig { returns(T::Boolean) }
    def plan_to_watch_works_count?; end

    sig { returns(T.nilable(::Integer)) }
    def plan_to_watch_works_count_before_last_save; end

    sig { returns(T.untyped) }
    def plan_to_watch_works_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def plan_to_watch_works_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def plan_to_watch_works_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def plan_to_watch_works_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def plan_to_watch_works_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def plan_to_watch_works_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def plan_to_watch_works_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def plan_to_watch_works_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def plan_to_watch_works_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def plan_to_watch_works_count_was; end

    sig { void }
    def plan_to_watch_works_count_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def record_cache_expired_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def record_cache_expired_at=(value); end

    sig { returns(T::Boolean) }
    def record_cache_expired_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def record_cache_expired_at_before_last_save; end

    sig { returns(T.untyped) }
    def record_cache_expired_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def record_cache_expired_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def record_cache_expired_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def record_cache_expired_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def record_cache_expired_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def record_cache_expired_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def record_cache_expired_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def record_cache_expired_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def record_cache_expired_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def record_cache_expired_at_was; end

    sig { void }
    def record_cache_expired_at_will_change!; end

    sig { returns(::Integer) }
    def records_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def records_count=(value); end

    sig { returns(T::Boolean) }
    def records_count?; end

    sig { returns(T.nilable(::Integer)) }
    def records_count_before_last_save; end

    sig { returns(T.untyped) }
    def records_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def records_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def records_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def records_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def records_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def records_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def records_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def records_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def records_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def records_count_was; end

    sig { void }
    def records_count_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at=(value); end

    sig { returns(T::Boolean) }
    def remember_created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at_before_last_save; end

    sig { returns(T.untyped) }
    def remember_created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def remember_created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_created_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def remember_created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_created_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def remember_created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at_was; end

    sig { void }
    def remember_created_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at=(value); end

    sig { returns(T::Boolean) }
    def reset_password_sent_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at_before_last_save; end

    sig { returns(T.untyped) }
    def reset_password_sent_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def reset_password_sent_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reset_password_sent_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reset_password_sent_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def reset_password_sent_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reset_password_sent_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def reset_password_sent_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at_was; end

    sig { void }
    def reset_password_sent_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def reset_password_token=(value); end

    sig { returns(T::Boolean) }
    def reset_password_token?; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_before_last_save; end

    sig { returns(T.untyped) }
    def reset_password_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def reset_password_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reset_password_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reset_password_token_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def reset_password_token_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reset_password_token_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def reset_password_token_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_was; end

    sig { void }
    def reset_password_token_will_change!; end

    sig { void }
    def restore_aasm_state!; end

    sig { void }
    def restore_allowed_locales!; end

    sig { void }
    def restore_character_favorites_count!; end

    sig { void }
    def restore_completed_works_count!; end

    sig { void }
    def restore_confirmation_sent_at!; end

    sig { void }
    def restore_confirmation_token!; end

    sig { void }
    def restore_confirmed_at!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_current_sign_in_at!; end

    sig { void }
    def restore_current_sign_in_ip!; end

    sig { void }
    def restore_deleted_at!; end

    sig { void }
    def restore_dropped_works_count!; end

    sig { void }
    def restore_email!; end

    sig { void }
    def restore_encrypted_password!; end

    sig { void }
    def restore_episode_records_count!; end

    sig { void }
    def restore_followers_count!; end

    sig { void }
    def restore_following_count!; end

    sig { void }
    def restore_gumroad_subscriber_id!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_last_sign_in_at!; end

    sig { void }
    def restore_last_sign_in_ip!; end

    sig { void }
    def restore_locale!; end

    sig { void }
    def restore_notifications_count!; end

    sig { void }
    def restore_on_hold_works_count!; end

    sig { void }
    def restore_organization_favorites_count!; end

    sig { void }
    def restore_person_favorites_count!; end

    sig { void }
    def restore_plan_to_watch_works_count!; end

    sig { void }
    def restore_record_cache_expired_at!; end

    sig { void }
    def restore_records_count!; end

    sig { void }
    def restore_remember_created_at!; end

    sig { void }
    def restore_reset_password_sent_at!; end

    sig { void }
    def restore_reset_password_token!; end

    sig { void }
    def restore_role!; end

    sig { void }
    def restore_sign_in_count!; end

    sig { void }
    def restore_status_cache_expired_at!; end

    sig { void }
    def restore_time_zone!; end

    sig { void }
    def restore_unconfirmed_email!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_username!; end

    sig { void }
    def restore_watching_works_count!; end

    sig { void }
    def restore_work_comment_cache_expired_at!; end

    sig { void }
    def restore_work_tag_cache_expired_at!; end

    sig { returns(T.untyped) }
    def role; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def role=(value); end

    sig { returns(T::Boolean) }
    def role?; end

    sig { returns(T.untyped) }
    def role_before_last_save; end

    sig { returns(T.untyped) }
    def role_before_type_cast; end

    sig { returns(T::Boolean) }
    def role_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def role_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def role_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def role_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def role_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def role_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def role_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def role_previously_was; end

    sig { returns(T.untyped) }
    def role_was; end

    sig { void }
    def role_will_change!; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_aasm_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_aasm_state?; end

    sig { returns(T.nilable([T.nilable(T::Array[::String]), T.nilable(T::Array[::String])])) }
    def saved_change_to_allowed_locales; end

    sig { returns(T::Boolean) }
    def saved_change_to_allowed_locales?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_character_favorites_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_character_favorites_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_completed_works_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_completed_works_count?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_confirmation_sent_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_confirmation_sent_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_confirmation_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_confirmation_token?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_confirmed_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_confirmed_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_current_sign_in_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_current_sign_in_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_current_sign_in_ip; end

    sig { returns(T::Boolean) }
    def saved_change_to_current_sign_in_ip?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_deleted_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_deleted_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_dropped_works_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_dropped_works_count?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_email?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_encrypted_password; end

    sig { returns(T::Boolean) }
    def saved_change_to_encrypted_password?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_episode_records_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_episode_records_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_followers_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_followers_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_following_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_following_count?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_gumroad_subscriber_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_gumroad_subscriber_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_last_sign_in_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_sign_in_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_last_sign_in_ip; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_sign_in_ip?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_locale; end

    sig { returns(T::Boolean) }
    def saved_change_to_locale?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_notifications_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_notifications_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_on_hold_works_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_on_hold_works_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_organization_favorites_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_organization_favorites_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_person_favorites_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_person_favorites_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_plan_to_watch_works_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_plan_to_watch_works_count?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_record_cache_expired_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_record_cache_expired_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_records_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_records_count?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_remember_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_remember_created_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_reset_password_sent_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_reset_password_sent_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_reset_password_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_reset_password_token?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_role; end

    sig { returns(T::Boolean) }
    def saved_change_to_role?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_sign_in_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_sign_in_count?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_status_cache_expired_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_status_cache_expired_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_time_zone; end

    sig { returns(T::Boolean) }
    def saved_change_to_time_zone?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_unconfirmed_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_unconfirmed_email?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_username; end

    sig { returns(T::Boolean) }
    def saved_change_to_username?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_watching_works_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_watching_works_count?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_work_comment_cache_expired_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_work_comment_cache_expired_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_work_tag_cache_expired_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_work_tag_cache_expired_at?; end

    sig { returns(::Integer) }
    def sign_in_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def sign_in_count=(value); end

    sig { returns(T::Boolean) }
    def sign_in_count?; end

    sig { returns(T.nilable(::Integer)) }
    def sign_in_count_before_last_save; end

    sig { returns(T.untyped) }
    def sign_in_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def sign_in_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sign_in_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sign_in_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sign_in_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sign_in_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sign_in_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sign_in_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sign_in_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sign_in_count_was; end

    sig { void }
    def sign_in_count_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def status_cache_expired_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def status_cache_expired_at=(value); end

    sig { returns(T::Boolean) }
    def status_cache_expired_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def status_cache_expired_at_before_last_save; end

    sig { returns(T.untyped) }
    def status_cache_expired_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def status_cache_expired_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def status_cache_expired_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def status_cache_expired_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def status_cache_expired_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def status_cache_expired_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def status_cache_expired_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def status_cache_expired_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def status_cache_expired_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def status_cache_expired_at_was; end

    sig { void }
    def status_cache_expired_at_will_change!; end

    sig { returns(::String) }
    def time_zone; end

    sig { params(value: ::String).returns(::String) }
    def time_zone=(value); end

    sig { returns(T::Boolean) }
    def time_zone?; end

    sig { returns(T.nilable(::String)) }
    def time_zone_before_last_save; end

    sig { returns(T.untyped) }
    def time_zone_before_type_cast; end

    sig { returns(T::Boolean) }
    def time_zone_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def time_zone_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def time_zone_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def time_zone_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def time_zone_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def time_zone_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def time_zone_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def time_zone_previously_was; end

    sig { returns(T.nilable(::String)) }
    def time_zone_was; end

    sig { void }
    def time_zone_will_change!; end

    sig { returns(T.nilable(::String)) }
    def unconfirmed_email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def unconfirmed_email=(value); end

    sig { returns(T::Boolean) }
    def unconfirmed_email?; end

    sig { returns(T.nilable(::String)) }
    def unconfirmed_email_before_last_save; end

    sig { returns(T.untyped) }
    def unconfirmed_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def unconfirmed_email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def unconfirmed_email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def unconfirmed_email_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def unconfirmed_email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def unconfirmed_email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def unconfirmed_email_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def unconfirmed_email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def unconfirmed_email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def unconfirmed_email_was; end

    sig { void }
    def unconfirmed_email_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::String) }
    def username; end

    sig { params(value: ::String).returns(::String) }
    def username=(value); end

    sig { returns(T::Boolean) }
    def username?; end

    sig { returns(T.nilable(::String)) }
    def username_before_last_save; end

    sig { returns(T.untyped) }
    def username_before_type_cast; end

    sig { returns(T::Boolean) }
    def username_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def username_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def username_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def username_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def username_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def username_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def username_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def username_previously_was; end

    sig { returns(T.nilable(::String)) }
    def username_was; end

    sig { void }
    def username_will_change!; end

    sig { returns(::Integer) }
    def watching_works_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def watching_works_count=(value); end

    sig { returns(T::Boolean) }
    def watching_works_count?; end

    sig { returns(T.nilable(::Integer)) }
    def watching_works_count_before_last_save; end

    sig { returns(T.untyped) }
    def watching_works_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def watching_works_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def watching_works_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def watching_works_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def watching_works_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def watching_works_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def watching_works_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def watching_works_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def watching_works_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def watching_works_count_was; end

    sig { void }
    def watching_works_count_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_aasm_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_allowed_locales?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_character_favorites_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_completed_works_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_confirmation_sent_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_confirmation_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_confirmed_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_current_sign_in_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_current_sign_in_ip?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_deleted_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_dropped_works_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_encrypted_password?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_episode_records_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_followers_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_following_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_gumroad_subscriber_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_sign_in_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_sign_in_ip?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_locale?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_notifications_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_on_hold_works_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_organization_favorites_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_person_favorites_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_plan_to_watch_works_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_record_cache_expired_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_records_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_remember_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reset_password_sent_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reset_password_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_role?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sign_in_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_status_cache_expired_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_time_zone?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_unconfirmed_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_username?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_watching_works_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_work_comment_cache_expired_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_work_tag_cache_expired_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def work_comment_cache_expired_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def work_comment_cache_expired_at=(value); end

    sig { returns(T::Boolean) }
    def work_comment_cache_expired_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def work_comment_cache_expired_at_before_last_save; end

    sig { returns(T.untyped) }
    def work_comment_cache_expired_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def work_comment_cache_expired_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def work_comment_cache_expired_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def work_comment_cache_expired_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def work_comment_cache_expired_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def work_comment_cache_expired_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def work_comment_cache_expired_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def work_comment_cache_expired_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def work_comment_cache_expired_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def work_comment_cache_expired_at_was; end

    sig { void }
    def work_comment_cache_expired_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def work_tag_cache_expired_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def work_tag_cache_expired_at=(value); end

    sig { returns(T::Boolean) }
    def work_tag_cache_expired_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def work_tag_cache_expired_at_before_last_save; end

    sig { returns(T.untyped) }
    def work_tag_cache_expired_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def work_tag_cache_expired_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def work_tag_cache_expired_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def work_tag_cache_expired_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def work_tag_cache_expired_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def work_tag_cache_expired_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def work_tag_cache_expired_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def work_tag_cache_expired_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def work_tag_cache_expired_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def work_tag_cache_expired_at_was; end

    sig { void }
    def work_tag_cache_expired_at_will_change!; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def deleted(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig { returns(T::Array[::User]) }
    def to_a; end

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::User } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::User } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::User, Integer, String, T::Enumerable[T.any(::User, Integer, String, T::Enumerable[::User])])
      ).returns(T::Array[::User])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::User, Integer, String, T::Enumerable[T.any(::User, Integer, String, T::Enumerable[::User])])
      ).returns(T::Array[::User])
    end
    def destroy(*records); end

    sig { returns(T::Array[::User]) }
    def load_target; end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(T::Array[::User])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::User]) }
    def target; end

    sig { returns(T::Array[::User]) }
    def to_a; end

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig { returns(T::Array[::User]) }
    def to_a; end

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::User } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::User } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
