# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Work`.
# Please instead update this file by running `bin/tapioca dsl Work`.


class Work
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Work).void)).returns(::Work) }
    def new(attributes = nil, &block); end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Work).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Work).void)).returns(::Work) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Work).void)
      ).returns(T::Array[::Work])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Work).void)).returns(::Work) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::Work).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Work).void)).returns(::Work) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Work).void)
      ).returns(T::Array[::Work])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Work).void)).returns(::Work) }
    def create(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Work).void)).returns(::Work) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Work).void)
      ).returns(T::Array[::Work])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Work).void)).returns(::Work) }
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Work).void)
      ).returns(T::Array[::Work])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Work).void)).returns(::Work) }
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Work).void)
      ).returns(T::Array[::Work])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Work).void)).returns(::Work) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Work]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Work)) }
    def fifth; end

    sig { returns(::Work) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::Work)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::Work])
    end
    sig { params(args: NilClass, block: T.proc.params(object: ::Work).void).returns(T.nilable(::Work)) }
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::Work)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Work) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::Work).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::Work])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::Work]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::Work]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Work).void)
      ).returns(T::Array[::Work])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Work).void)).returns(::Work) }
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Work).void)
      ).returns(T::Array[::Work])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Work).void)).returns(::Work) }
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Work).void)
      ).returns(T::Array[::Work])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Work).void)).returns(::Work) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Work)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Work) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Work) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::Work)) }
    sig { params(limit: Integer).returns(T::Array[::Work]) }
    def first(limit = nil); end

    sig { returns(::Work) }
    def first!; end

    sig { returns(T.nilable(::Work)) }
    def forty_two; end

    sig { returns(::Work) }
    def forty_two!; end

    sig { returns(T.nilable(::Work)) }
    def fourth; end

    sig { returns(::Work) }
    def fourth!; end

    sig { returns(T::Array[T.untyped]) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::Work)) }
    sig { params(limit: Integer).returns(T::Array[::Work]) }
    def last(limit = nil); end

    sig { returns(::Work) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Work).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Work).void)).returns(::Work) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Work).void)
      ).returns(T::Array[::Work])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Work).void)).returns(::Work) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Work).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Work).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Work)) }
    def second; end

    sig { returns(::Work) }
    def second!; end

    sig { returns(T.nilable(::Work)) }
    def second_to_last; end

    sig { returns(::Work) }
    def second_to_last!; end

    sig { returns(::Work) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::Work).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::Work)) }
    sig { params(limit: Integer).returns(T::Array[::Work]) }
    def take(limit = nil); end

    sig { returns(::Work) }
    def take!; end

    sig { returns(T.nilable(::Work)) }
    def third; end

    sig { returns(::Work) }
    def third!; end

    sig { returns(T.nilable(::Work)) }
    def third_to_last; end

    sig { returns(::Work) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :activities`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Activity::PrivateCollectionProxy) }
    def activities; end

    sig { params(value: T::Enumerable[::Activity]).void }
    def activities=(value); end

    sig { returns(T::Array[T.untyped]) }
    def activity_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def activity_ids=(ids); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::NumberFormat) }
    def build_number_format(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SeasonModel) }
    def build_season_model(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::WorkImage) }
    def build_work_image(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def cast_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def cast_ids=(ids); end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :cast_people, through: :casts`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Person::PrivateCollectionProxy) }
    def cast_people; end

    sig { params(value: T::Enumerable[::Person]).void }
    def cast_people=(value); end

    sig { returns(T::Array[T.untyped]) }
    def cast_person_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def cast_person_ids=(ids); end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :casts`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Cast::PrivateCollectionProxy) }
    def casts; end

    sig { params(value: T::Enumerable[::Cast]).void }
    def casts=(value); end

    sig { returns(T::Array[T.untyped]) }
    def channel_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def channel_ids=(ids); end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :channels, through: :programs`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Channel::PrivateCollectionProxy) }
    def channels; end

    sig { params(value: T::Enumerable[::Channel]).void }
    def channels=(value); end

    sig { returns(T::Array[T.untyped]) }
    def character_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def character_ids=(ids); end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :characters, through: :casts`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Character::PrivateCollectionProxy) }
    def characters; end

    sig { params(value: T::Enumerable[::Character]).void }
    def characters=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::NumberFormat) }
    def create_number_format(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::NumberFormat) }
    def create_number_format!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SeasonModel) }
    def create_season_model(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SeasonModel) }
    def create_season_model!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::WorkImage) }
    def create_work_image(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::WorkImage) }
    def create_work_image!(*args, &blk); end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :db_activities`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DbActivity::PrivateCollectionProxy) }
    def db_activities; end

    sig { params(value: T::Enumerable[::DbActivity]).void }
    def db_activities=(value); end

    sig { returns(T::Array[T.untyped]) }
    def db_activity_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def db_activity_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def db_comment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def db_comment_ids=(ids); end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :db_comments`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DbComment::PrivateCollectionProxy) }
    def db_comments; end

    sig { params(value: T::Enumerable[::DbComment]).void }
    def db_comments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def episode_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def episode_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def episode_record_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def episode_record_ids=(ids); end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :episode_records`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::EpisodeRecord::PrivateCollectionProxy) }
    def episode_records; end

    sig { params(value: T::Enumerable[::EpisodeRecord]).void }
    def episode_records=(value); end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :episodes`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Episode::PrivateCollectionProxy) }
    def episodes; end

    sig { params(value: T::Enumerable[::Episode]).void }
    def episodes=(value); end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :library_entries`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::LibraryEntry::PrivateCollectionProxy) }
    def library_entries; end

    sig { params(value: T::Enumerable[::LibraryEntry]).void }
    def library_entries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def library_entry_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def library_entry_ids=(ids); end

    sig { returns(T.nilable(::NumberFormat)) }
    def number_format; end

    sig { params(value: T.nilable(::NumberFormat)).void }
    def number_format=(value); end

    sig { returns(T::Boolean) }
    def number_format_changed?; end

    sig { returns(T::Boolean) }
    def number_format_previously_changed?; end

    sig { returns(T::Array[T.untyped]) }
    def organization_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def organization_ids=(ids); end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :organizations, through: :staffs`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(ActiveRecord::Associations::CollectionProxy) }
    def organizations; end

    sig { params(value: T::Enumerable[T.untyped]).void }
    def organizations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def program_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def program_ids=(ids); end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :programs`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Program::PrivateCollectionProxy) }
    def programs; end

    sig { params(value: T::Enumerable[::Program]).void }
    def programs=(value); end

    sig { returns(T::Array[T.untyped]) }
    def record_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def record_ids=(ids); end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :records`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Record::PrivateCollectionProxy) }
    def records; end

    sig { params(value: T::Enumerable[::Record]).void }
    def records=(value); end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :records_only_work, through: :work_records`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Record::PrivateCollectionProxy) }
    def records_only_work; end

    sig { params(value: T::Enumerable[::Record]).void }
    def records_only_work=(value); end

    sig { returns(T::Array[T.untyped]) }
    def records_only_work_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def records_only_work_ids=(ids); end

    sig { returns(T.nilable(::NumberFormat)) }
    def reload_number_format; end

    sig { returns(T.nilable(::SeasonModel)) }
    def reload_season_model; end

    sig { returns(T.nilable(::WorkImage)) }
    def reload_work_image; end

    sig { void }
    def reset_number_format; end

    sig { void }
    def reset_season_model; end

    sig { void }
    def reset_work_image; end

    sig { returns(T.nilable(::SeasonModel)) }
    def season_model; end

    sig { params(value: T.nilable(::SeasonModel)).void }
    def season_model=(value); end

    sig { returns(T::Boolean) }
    def season_model_changed?; end

    sig { returns(T::Boolean) }
    def season_model_previously_changed?; end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :series_list, through: :series_works`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Series::PrivateCollectionProxy) }
    def series_list; end

    sig { params(value: T::Enumerable[::Series]).void }
    def series_list=(value); end

    sig { returns(T::Array[T.untyped]) }
    def series_list_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def series_list_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def series_work_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def series_work_ids=(ids); end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :series_works`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SeriesWork::PrivateCollectionProxy) }
    def series_works; end

    sig { params(value: T::Enumerable[::SeriesWork]).void }
    def series_works=(value); end

    sig { returns(T::Array[T.untyped]) }
    def slot_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def slot_ids=(ids); end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :slots`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Slot::PrivateCollectionProxy) }
    def slots; end

    sig { params(value: T::Enumerable[::Slot]).void }
    def slots=(value); end

    sig { returns(T::Array[T.untyped]) }
    def staff_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def staff_ids=(ids); end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :staff_people, through: :staffs`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(ActiveRecord::Associations::CollectionProxy) }
    def staff_people; end

    sig { params(value: T::Enumerable[T.untyped]).void }
    def staff_people=(value); end

    sig { returns(T::Array[T.untyped]) }
    def staff_person_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def staff_person_ids=(ids); end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :staffs`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Staff::PrivateCollectionProxy) }
    def staffs; end

    sig { params(value: T::Enumerable[::Staff]).void }
    def staffs=(value); end

    sig { returns(T::Array[T.untyped]) }
    def status_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def status_ids=(ids); end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :statuses`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Status::PrivateCollectionProxy) }
    def statuses; end

    sig { params(value: T::Enumerable[::Status]).void }
    def statuses=(value); end

    sig { returns(T::Array[T.untyped]) }
    def trailer_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def trailer_ids=(ids); end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :trailers`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Trailer::PrivateCollectionProxy) }
    def trailers; end

    sig { params(value: T::Enumerable[::Trailer]).void }
    def trailers=(value); end

    sig { returns(T.nilable(::WorkImage)) }
    def work_image; end

    sig { params(value: T.nilable(::WorkImage)).void }
    def work_image=(value); end

    sig { returns(T::Array[T.untyped]) }
    def work_record_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def work_record_ids=(ids); end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :work_records`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::WorkRecord::PrivateCollectionProxy) }
    def work_records; end

    sig { params(value: T::Enumerable[::WorkRecord]).void }
    def work_records=(value); end

    sig { returns(T::Array[T.untyped]) }
    def work_tag_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def work_tag_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def work_tagging_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def work_tagging_ids=(ids); end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :work_taggings`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::WorkTagging::PrivateCollectionProxy) }
    def work_taggings; end

    sig { params(value: T::Enumerable[::WorkTagging]).void }
    def work_taggings=(value); end

    # This method is created by ActiveRecord on the `Work` class because it declared `has_many :work_tags, through: :work_taggings`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::WorkTag::PrivateCollectionProxy) }
    def work_tags; end

    sig { params(value: T::Enumerable[::WorkTag]).void }
    def work_tags=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def by_season(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def by_seasons(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def deleted(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from_current_season(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order_by_season(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def published(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def season_from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def season_until(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    sig { params(blk: T.proc.params(record: ::Work).returns(BasicObject)).returns(T::Array[::Work]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def slot_registered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def tracked_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unpublished(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def until_current_season(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_no_episodes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_no_image(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_no_season(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_no_slots(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_deleted(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(::String) }
    def aasm_state; end

    sig { params(value: ::String).returns(::String) }
    def aasm_state=(value); end

    sig { returns(T::Boolean) }
    def aasm_state?; end

    sig { returns(T.nilable(::String)) }
    def aasm_state_before_last_save; end

    sig { returns(T.untyped) }
    def aasm_state_before_type_cast; end

    sig { returns(T::Boolean) }
    def aasm_state_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def aasm_state_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def aasm_state_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def aasm_state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def aasm_state_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def aasm_state_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def aasm_state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def aasm_state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def aasm_state_was; end

    sig { void }
    def aasm_state_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at=(value); end

    sig { returns(T::Boolean) }
    def deleted_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_before_last_save; end

    sig { returns(T.untyped) }
    def deleted_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def deleted_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def deleted_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def deleted_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_was; end

    sig { void }
    def deleted_at_will_change!; end

    sig { returns(T.nilable(::Date)) }
    def ended_on; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def ended_on=(value); end

    sig { returns(T::Boolean) }
    def ended_on?; end

    sig { returns(T.nilable(::Date)) }
    def ended_on_before_last_save; end

    sig { returns(T.untyped) }
    def ended_on_before_type_cast; end

    sig { returns(T::Boolean) }
    def ended_on_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def ended_on_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def ended_on_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def ended_on_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def ended_on_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def ended_on_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def ended_on_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def ended_on_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def ended_on_was; end

    sig { void }
    def ended_on_will_change!; end

    sig { returns(::Integer) }
    def episodes_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def episodes_count=(value); end

    sig { returns(T::Boolean) }
    def episodes_count?; end

    sig { returns(T.nilable(::Integer)) }
    def episodes_count_before_last_save; end

    sig { returns(T.untyped) }
    def episodes_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def episodes_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def episodes_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def episodes_count_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def episodes_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def episodes_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def episodes_count_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def episodes_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def episodes_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def episodes_count_was; end

    sig { void }
    def episodes_count_will_change!; end

    sig { returns(::String) }
    def facebook_og_image_url; end

    sig { params(value: ::String).returns(::String) }
    def facebook_og_image_url=(value); end

    sig { returns(T::Boolean) }
    def facebook_og_image_url?; end

    sig { returns(T.nilable(::String)) }
    def facebook_og_image_url_before_last_save; end

    sig { returns(T.untyped) }
    def facebook_og_image_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def facebook_og_image_url_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def facebook_og_image_url_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def facebook_og_image_url_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def facebook_og_image_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def facebook_og_image_url_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def facebook_og_image_url_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def facebook_og_image_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def facebook_og_image_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def facebook_og_image_url_was; end

    sig { void }
    def facebook_og_image_url_will_change!; end

    sig { returns(::Integer) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(::Integer) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def key_pv_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def key_pv_id=(value); end

    sig { returns(T::Boolean) }
    def key_pv_id?; end

    sig { returns(T.nilable(::Integer)) }
    def key_pv_id_before_last_save; end

    sig { returns(T.untyped) }
    def key_pv_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def key_pv_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def key_pv_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def key_pv_id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def key_pv_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def key_pv_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def key_pv_id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def key_pv_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def key_pv_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def key_pv_id_was; end

    sig { void }
    def key_pv_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def mal_anime_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def mal_anime_id=(value); end

    sig { returns(T::Boolean) }
    def mal_anime_id?; end

    sig { returns(T.nilable(::Integer)) }
    def mal_anime_id_before_last_save; end

    sig { returns(T.untyped) }
    def mal_anime_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def mal_anime_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def mal_anime_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def mal_anime_id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def mal_anime_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def mal_anime_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def mal_anime_id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def mal_anime_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def mal_anime_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def mal_anime_id_was; end

    sig { void }
    def mal_anime_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def manual_episodes_count; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def manual_episodes_count=(value); end

    sig { returns(T::Boolean) }
    def manual_episodes_count?; end

    sig { returns(T.nilable(::Integer)) }
    def manual_episodes_count_before_last_save; end

    sig { returns(T.untyped) }
    def manual_episodes_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def manual_episodes_count_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def manual_episodes_count_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def manual_episodes_count_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def manual_episodes_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def manual_episodes_count_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def manual_episodes_count_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def manual_episodes_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def manual_episodes_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def manual_episodes_count_was; end

    sig { void }
    def manual_episodes_count_will_change!; end

    sig { returns(T.untyped) }
    def media; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def media=(value); end

    sig { returns(T::Boolean) }
    def media?; end

    sig { returns(T.untyped) }
    def media_before_last_save; end

    sig { returns(T.untyped) }
    def media_before_type_cast; end

    sig { returns(T::Boolean) }
    def media_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def media_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def media_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def media_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def media_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def media_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def media_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def media_previously_was; end

    sig { returns(T.untyped) }
    def media_was; end

    sig { void }
    def media_will_change!; end

    sig { returns(T::Boolean) }
    def no_episodes; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def no_episodes=(value); end

    sig { returns(T::Boolean) }
    def no_episodes?; end

    sig { returns(T.nilable(T::Boolean)) }
    def no_episodes_before_last_save; end

    sig { returns(T.untyped) }
    def no_episodes_before_type_cast; end

    sig { returns(T::Boolean) }
    def no_episodes_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def no_episodes_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def no_episodes_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def no_episodes_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def no_episodes_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def no_episodes_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def no_episodes_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def no_episodes_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def no_episodes_was; end

    sig { void }
    def no_episodes_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def number_format_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def number_format_id=(value); end

    sig { returns(T::Boolean) }
    def number_format_id?; end

    sig { returns(T.nilable(::Integer)) }
    def number_format_id_before_last_save; end

    sig { returns(T.untyped) }
    def number_format_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def number_format_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def number_format_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def number_format_id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def number_format_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def number_format_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def number_format_id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def number_format_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def number_format_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def number_format_id_was; end

    sig { void }
    def number_format_id_will_change!; end

    sig { returns(::String) }
    def official_site_url; end

    sig { params(value: ::String).returns(::String) }
    def official_site_url=(value); end

    sig { returns(T::Boolean) }
    def official_site_url?; end

    sig { returns(T.nilable(::String)) }
    def official_site_url_before_last_save; end

    sig { returns(T.untyped) }
    def official_site_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def official_site_url_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def official_site_url_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def official_site_url_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def official_site_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(::String) }
    def official_site_url_en; end

    sig { params(value: ::String).returns(::String) }
    def official_site_url_en=(value); end

    sig { returns(T::Boolean) }
    def official_site_url_en?; end

    sig { returns(T.nilable(::String)) }
    def official_site_url_en_before_last_save; end

    sig { returns(T.untyped) }
    def official_site_url_en_before_type_cast; end

    sig { returns(T::Boolean) }
    def official_site_url_en_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def official_site_url_en_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def official_site_url_en_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def official_site_url_en_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def official_site_url_en_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def official_site_url_en_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def official_site_url_en_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def official_site_url_en_previously_was; end

    sig { returns(T.nilable(::String)) }
    def official_site_url_en_was; end

    sig { void }
    def official_site_url_en_will_change!; end

    sig { returns(T.nilable(::String)) }
    def official_site_url_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def official_site_url_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def official_site_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def official_site_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def official_site_url_was; end

    sig { void }
    def official_site_url_will_change!; end

    sig { returns(::Integer) }
    def ratings_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def ratings_count=(value); end

    sig { returns(T::Boolean) }
    def ratings_count?; end

    sig { returns(T.nilable(::Integer)) }
    def ratings_count_before_last_save; end

    sig { returns(T.untyped) }
    def ratings_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def ratings_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def ratings_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def ratings_count_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def ratings_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def ratings_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def ratings_count_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def ratings_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def ratings_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def ratings_count_was; end

    sig { void }
    def ratings_count_will_change!; end

    sig { returns(::String) }
    def recommended_image_url; end

    sig { params(value: ::String).returns(::String) }
    def recommended_image_url=(value); end

    sig { returns(T::Boolean) }
    def recommended_image_url?; end

    sig { returns(T.nilable(::String)) }
    def recommended_image_url_before_last_save; end

    sig { returns(T.untyped) }
    def recommended_image_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def recommended_image_url_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def recommended_image_url_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def recommended_image_url_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def recommended_image_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def recommended_image_url_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def recommended_image_url_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def recommended_image_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def recommended_image_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def recommended_image_url_was; end

    sig { void }
    def recommended_image_url_will_change!; end

    sig { returns(::Integer) }
    def records_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def records_count=(value); end

    sig { returns(T::Boolean) }
    def records_count?; end

    sig { returns(T.nilable(::Integer)) }
    def records_count_before_last_save; end

    sig { returns(T.untyped) }
    def records_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def records_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def records_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def records_count_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def records_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def records_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def records_count_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def records_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def records_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def records_count_was; end

    sig { void }
    def records_count_will_change!; end

    sig { returns(T.nilable(::Date)) }
    def released_at; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def released_at=(value); end

    sig { returns(T::Boolean) }
    def released_at?; end

    sig { returns(T.nilable(::String)) }
    def released_at_about; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def released_at_about=(value); end

    sig { returns(T::Boolean) }
    def released_at_about?; end

    sig { returns(T.nilable(::String)) }
    def released_at_about_before_last_save; end

    sig { returns(T.untyped) }
    def released_at_about_before_type_cast; end

    sig { returns(T::Boolean) }
    def released_at_about_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def released_at_about_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def released_at_about_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def released_at_about_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def released_at_about_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def released_at_about_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def released_at_about_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def released_at_about_previously_was; end

    sig { returns(T.nilable(::String)) }
    def released_at_about_was; end

    sig { void }
    def released_at_about_will_change!; end

    sig { returns(T.nilable(::Date)) }
    def released_at_before_last_save; end

    sig { returns(T.untyped) }
    def released_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def released_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def released_at_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def released_at_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def released_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def released_at_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def released_at_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def released_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def released_at_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def released_at_was; end

    sig { void }
    def released_at_will_change!; end

    sig { void }
    def restore_aasm_state!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_deleted_at!; end

    sig { void }
    def restore_ended_on!; end

    sig { void }
    def restore_episodes_count!; end

    sig { void }
    def restore_facebook_og_image_url!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_key_pv_id!; end

    sig { void }
    def restore_mal_anime_id!; end

    sig { void }
    def restore_manual_episodes_count!; end

    sig { void }
    def restore_media!; end

    sig { void }
    def restore_no_episodes!; end

    sig { void }
    def restore_number_format_id!; end

    sig { void }
    def restore_official_site_url!; end

    sig { void }
    def restore_official_site_url_en!; end

    sig { void }
    def restore_ratings_count!; end

    sig { void }
    def restore_recommended_image_url!; end

    sig { void }
    def restore_records_count!; end

    sig { void }
    def restore_released_at!; end

    sig { void }
    def restore_released_at_about!; end

    sig { void }
    def restore_satisfaction_rate!; end

    sig { void }
    def restore_sc_tid!; end

    sig { void }
    def restore_score!; end

    sig { void }
    def restore_season_id!; end

    sig { void }
    def restore_season_name!; end

    sig { void }
    def restore_season_year!; end

    sig { void }
    def restore_start_episode_raw_number!; end

    sig { void }
    def restore_started_on!; end

    sig { void }
    def restore_synopsis!; end

    sig { void }
    def restore_synopsis_en!; end

    sig { void }
    def restore_synopsis_source!; end

    sig { void }
    def restore_synopsis_source_en!; end

    sig { void }
    def restore_title!; end

    sig { void }
    def restore_title_alter!; end

    sig { void }
    def restore_title_alter_en!; end

    sig { void }
    def restore_title_en!; end

    sig { void }
    def restore_title_kana!; end

    sig { void }
    def restore_title_ro!; end

    sig { void }
    def restore_twitter_hashtag!; end

    sig { void }
    def restore_twitter_image_url!; end

    sig { void }
    def restore_twitter_username!; end

    sig { void }
    def restore_unpublished_at!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_watchers_count!; end

    sig { void }
    def restore_wikipedia_url!; end

    sig { void }
    def restore_wikipedia_url_en!; end

    sig { void }
    def restore_work_records_count!; end

    sig { void }
    def restore_work_records_with_body_count!; end

    sig { returns(T.nilable(::Float)) }
    def satisfaction_rate; end

    sig { params(value: T.nilable(::Float)).returns(T.nilable(::Float)) }
    def satisfaction_rate=(value); end

    sig { returns(T::Boolean) }
    def satisfaction_rate?; end

    sig { returns(T.nilable(::Float)) }
    def satisfaction_rate_before_last_save; end

    sig { returns(T.untyped) }
    def satisfaction_rate_before_type_cast; end

    sig { returns(T::Boolean) }
    def satisfaction_rate_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def satisfaction_rate_change; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def satisfaction_rate_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def satisfaction_rate_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def satisfaction_rate_in_database; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def satisfaction_rate_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def satisfaction_rate_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def satisfaction_rate_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def satisfaction_rate_was; end

    sig { void }
    def satisfaction_rate_will_change!; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_aasm_state; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_aasm_state?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_created_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_deleted_at; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_deleted_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_ended_on; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_ended_on?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_episodes_count; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_episodes_count?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_facebook_og_image_url; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_facebook_og_image_url?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_id; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_id_value; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_id_value?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_key_pv_id; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_key_pv_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_mal_anime_id; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_mal_anime_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_manual_episodes_count; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_manual_episodes_count?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_media; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_media?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_no_episodes; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_no_episodes?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_number_format_id; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_number_format_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_official_site_url; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_official_site_url?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_official_site_url_en; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_official_site_url_en?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_ratings_count; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_ratings_count?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_recommended_image_url; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_recommended_image_url?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_records_count; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_records_count?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_released_at; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_released_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_released_at_about; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_released_at_about?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def saved_change_to_satisfaction_rate; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_satisfaction_rate?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_sc_tid; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_sc_tid?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def saved_change_to_score; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_score?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_season_id; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_season_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_season_name; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_season_name?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_season_year; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_season_year?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::Float, ::Float])) }
    def saved_change_to_start_episode_raw_number; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_start_episode_raw_number?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_started_on; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_started_on?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_synopsis; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_synopsis?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_synopsis_en; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_synopsis_en?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_synopsis_source; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_synopsis_source?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_synopsis_source_en; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_synopsis_source_en?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_title; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_title?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_title_alter; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_title_alter?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_title_alter_en; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_title_alter_en?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_title_en; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_title_en?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_title_kana; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_title_kana?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_title_ro; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_title_ro?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_twitter_hashtag; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_twitter_hashtag?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_twitter_image_url; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_twitter_image_url?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_twitter_username; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_twitter_username?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_unpublished_at; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_unpublished_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_updated_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_watchers_count; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_watchers_count?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_wikipedia_url; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_wikipedia_url?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_wikipedia_url_en; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_wikipedia_url_en?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_work_records_count; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_work_records_count?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_work_records_with_body_count; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_work_records_with_body_count?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sc_tid; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def sc_tid=(value); end

    sig { returns(T::Boolean) }
    def sc_tid?; end

    sig { returns(T.nilable(::Integer)) }
    def sc_tid_before_last_save; end

    sig { returns(T.untyped) }
    def sc_tid_before_type_cast; end

    sig { returns(T::Boolean) }
    def sc_tid_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def sc_tid_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def sc_tid_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def sc_tid_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sc_tid_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def sc_tid_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def sc_tid_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sc_tid_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sc_tid_was; end

    sig { void }
    def sc_tid_will_change!; end

    sig { returns(T.nilable(::Float)) }
    def score; end

    sig { params(value: T.nilable(::Float)).returns(T.nilable(::Float)) }
    def score=(value); end

    sig { returns(T::Boolean) }
    def score?; end

    sig { returns(T.nilable(::Float)) }
    def score_before_last_save; end

    sig { returns(T.untyped) }
    def score_before_type_cast; end

    sig { returns(T::Boolean) }
    def score_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def score_change; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def score_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def score_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def score_in_database; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def score_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def score_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def score_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def score_was; end

    sig { void }
    def score_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def season_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def season_id=(value); end

    sig { returns(T::Boolean) }
    def season_id?; end

    sig { returns(T.nilable(::Integer)) }
    def season_id_before_last_save; end

    sig { returns(T.untyped) }
    def season_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def season_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def season_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def season_id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def season_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def season_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def season_id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def season_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def season_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def season_id_was; end

    sig { void }
    def season_id_will_change!; end

    sig { returns(T.untyped) }
    def season_name; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def season_name=(value); end

    sig { returns(T::Boolean) }
    def season_name?; end

    sig { returns(T.untyped) }
    def season_name_before_last_save; end

    sig { returns(T.untyped) }
    def season_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def season_name_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def season_name_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def season_name_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def season_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def season_name_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def season_name_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def season_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def season_name_previously_was; end

    sig { returns(T.untyped) }
    def season_name_was; end

    sig { void }
    def season_name_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def season_year; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def season_year=(value); end

    sig { returns(T::Boolean) }
    def season_year?; end

    sig { returns(T.nilable(::Integer)) }
    def season_year_before_last_save; end

    sig { returns(T.untyped) }
    def season_year_before_type_cast; end

    sig { returns(T::Boolean) }
    def season_year_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def season_year_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def season_year_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def season_year_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def season_year_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def season_year_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def season_year_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def season_year_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def season_year_was; end

    sig { void }
    def season_year_will_change!; end

    sig { returns(::Float) }
    def start_episode_raw_number; end

    sig { params(value: ::Float).returns(::Float) }
    def start_episode_raw_number=(value); end

    sig { returns(T::Boolean) }
    def start_episode_raw_number?; end

    sig { returns(T.nilable(::Float)) }
    def start_episode_raw_number_before_last_save; end

    sig { returns(T.untyped) }
    def start_episode_raw_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def start_episode_raw_number_came_from_user?; end

    sig { returns(T.nilable([::Float, ::Float])) }
    def start_episode_raw_number_change; end

    sig { returns(T.nilable([::Float, ::Float])) }
    def start_episode_raw_number_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def start_episode_raw_number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def start_episode_raw_number_in_database; end

    sig { returns(T.nilable([::Float, ::Float])) }
    def start_episode_raw_number_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def start_episode_raw_number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def start_episode_raw_number_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def start_episode_raw_number_was; end

    sig { void }
    def start_episode_raw_number_will_change!; end

    sig { returns(T.nilable(::Date)) }
    def started_on; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def started_on=(value); end

    sig { returns(T::Boolean) }
    def started_on?; end

    sig { returns(T.nilable(::Date)) }
    def started_on_before_last_save; end

    sig { returns(T.untyped) }
    def started_on_before_type_cast; end

    sig { returns(T::Boolean) }
    def started_on_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def started_on_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def started_on_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def started_on_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def started_on_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def started_on_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def started_on_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def started_on_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def started_on_was; end

    sig { void }
    def started_on_will_change!; end

    sig { returns(::String) }
    def synopsis; end

    sig { params(value: ::String).returns(::String) }
    def synopsis=(value); end

    sig { returns(T::Boolean) }
    def synopsis?; end

    sig { returns(T.nilable(::String)) }
    def synopsis_before_last_save; end

    sig { returns(T.untyped) }
    def synopsis_before_type_cast; end

    sig { returns(T::Boolean) }
    def synopsis_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def synopsis_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def synopsis_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def synopsis_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(::String) }
    def synopsis_en; end

    sig { params(value: ::String).returns(::String) }
    def synopsis_en=(value); end

    sig { returns(T::Boolean) }
    def synopsis_en?; end

    sig { returns(T.nilable(::String)) }
    def synopsis_en_before_last_save; end

    sig { returns(T.untyped) }
    def synopsis_en_before_type_cast; end

    sig { returns(T::Boolean) }
    def synopsis_en_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def synopsis_en_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def synopsis_en_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def synopsis_en_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def synopsis_en_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def synopsis_en_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def synopsis_en_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def synopsis_en_previously_was; end

    sig { returns(T.nilable(::String)) }
    def synopsis_en_was; end

    sig { void }
    def synopsis_en_will_change!; end

    sig { returns(T.nilable(::String)) }
    def synopsis_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def synopsis_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def synopsis_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def synopsis_previously_was; end

    sig { returns(::String) }
    def synopsis_source; end

    sig { params(value: ::String).returns(::String) }
    def synopsis_source=(value); end

    sig { returns(T::Boolean) }
    def synopsis_source?; end

    sig { returns(T.nilable(::String)) }
    def synopsis_source_before_last_save; end

    sig { returns(T.untyped) }
    def synopsis_source_before_type_cast; end

    sig { returns(T::Boolean) }
    def synopsis_source_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def synopsis_source_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def synopsis_source_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def synopsis_source_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(::String) }
    def synopsis_source_en; end

    sig { params(value: ::String).returns(::String) }
    def synopsis_source_en=(value); end

    sig { returns(T::Boolean) }
    def synopsis_source_en?; end

    sig { returns(T.nilable(::String)) }
    def synopsis_source_en_before_last_save; end

    sig { returns(T.untyped) }
    def synopsis_source_en_before_type_cast; end

    sig { returns(T::Boolean) }
    def synopsis_source_en_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def synopsis_source_en_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def synopsis_source_en_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def synopsis_source_en_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def synopsis_source_en_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def synopsis_source_en_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def synopsis_source_en_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def synopsis_source_en_previously_was; end

    sig { returns(T.nilable(::String)) }
    def synopsis_source_en_was; end

    sig { void }
    def synopsis_source_en_will_change!; end

    sig { returns(T.nilable(::String)) }
    def synopsis_source_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def synopsis_source_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def synopsis_source_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def synopsis_source_previously_was; end

    sig { returns(T.nilable(::String)) }
    def synopsis_source_was; end

    sig { void }
    def synopsis_source_will_change!; end

    sig { returns(T.nilable(::String)) }
    def synopsis_was; end

    sig { void }
    def synopsis_will_change!; end

    sig { returns(::String) }
    def title; end

    sig { params(value: ::String).returns(::String) }
    def title=(value); end

    sig { returns(T::Boolean) }
    def title?; end

    sig { returns(::String) }
    def title_alter; end

    sig { params(value: ::String).returns(::String) }
    def title_alter=(value); end

    sig { returns(T::Boolean) }
    def title_alter?; end

    sig { returns(T.nilable(::String)) }
    def title_alter_before_last_save; end

    sig { returns(T.untyped) }
    def title_alter_before_type_cast; end

    sig { returns(T::Boolean) }
    def title_alter_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def title_alter_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def title_alter_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def title_alter_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(::String) }
    def title_alter_en; end

    sig { params(value: ::String).returns(::String) }
    def title_alter_en=(value); end

    sig { returns(T::Boolean) }
    def title_alter_en?; end

    sig { returns(T.nilable(::String)) }
    def title_alter_en_before_last_save; end

    sig { returns(T.untyped) }
    def title_alter_en_before_type_cast; end

    sig { returns(T::Boolean) }
    def title_alter_en_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def title_alter_en_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def title_alter_en_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def title_alter_en_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def title_alter_en_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def title_alter_en_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def title_alter_en_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def title_alter_en_previously_was; end

    sig { returns(T.nilable(::String)) }
    def title_alter_en_was; end

    sig { void }
    def title_alter_en_will_change!; end

    sig { returns(T.nilable(::String)) }
    def title_alter_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def title_alter_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def title_alter_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def title_alter_previously_was; end

    sig { returns(T.nilable(::String)) }
    def title_alter_was; end

    sig { void }
    def title_alter_will_change!; end

    sig { returns(T.nilable(::String)) }
    def title_before_last_save; end

    sig { returns(T.untyped) }
    def title_before_type_cast; end

    sig { returns(T::Boolean) }
    def title_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def title_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def title_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def title_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(::String) }
    def title_en; end

    sig { params(value: ::String).returns(::String) }
    def title_en=(value); end

    sig { returns(T::Boolean) }
    def title_en?; end

    sig { returns(T.nilable(::String)) }
    def title_en_before_last_save; end

    sig { returns(T.untyped) }
    def title_en_before_type_cast; end

    sig { returns(T::Boolean) }
    def title_en_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def title_en_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def title_en_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def title_en_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def title_en_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def title_en_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def title_en_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def title_en_previously_was; end

    sig { returns(T.nilable(::String)) }
    def title_en_was; end

    sig { void }
    def title_en_will_change!; end

    sig { returns(T.nilable(::String)) }
    def title_in_database; end

    sig { returns(::String) }
    def title_kana; end

    sig { params(value: ::String).returns(::String) }
    def title_kana=(value); end

    sig { returns(T::Boolean) }
    def title_kana?; end

    sig { returns(T.nilable(::String)) }
    def title_kana_before_last_save; end

    sig { returns(T.untyped) }
    def title_kana_before_type_cast; end

    sig { returns(T::Boolean) }
    def title_kana_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def title_kana_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def title_kana_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def title_kana_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def title_kana_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def title_kana_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def title_kana_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def title_kana_previously_was; end

    sig { returns(T.nilable(::String)) }
    def title_kana_was; end

    sig { void }
    def title_kana_will_change!; end

    sig { returns(T.nilable([::String, ::String])) }
    def title_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def title_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def title_previously_was; end

    sig { returns(::String) }
    def title_ro; end

    sig { params(value: ::String).returns(::String) }
    def title_ro=(value); end

    sig { returns(T::Boolean) }
    def title_ro?; end

    sig { returns(T.nilable(::String)) }
    def title_ro_before_last_save; end

    sig { returns(T.untyped) }
    def title_ro_before_type_cast; end

    sig { returns(T::Boolean) }
    def title_ro_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def title_ro_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def title_ro_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def title_ro_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def title_ro_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def title_ro_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def title_ro_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def title_ro_previously_was; end

    sig { returns(T.nilable(::String)) }
    def title_ro_was; end

    sig { void }
    def title_ro_will_change!; end

    sig { returns(T.nilable(::String)) }
    def title_was; end

    sig { void }
    def title_will_change!; end

    sig { returns(T.nilable(::String)) }
    def twitter_hashtag; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def twitter_hashtag=(value); end

    sig { returns(T::Boolean) }
    def twitter_hashtag?; end

    sig { returns(T.nilable(::String)) }
    def twitter_hashtag_before_last_save; end

    sig { returns(T.untyped) }
    def twitter_hashtag_before_type_cast; end

    sig { returns(T::Boolean) }
    def twitter_hashtag_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def twitter_hashtag_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def twitter_hashtag_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def twitter_hashtag_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def twitter_hashtag_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def twitter_hashtag_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def twitter_hashtag_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def twitter_hashtag_previously_was; end

    sig { returns(T.nilable(::String)) }
    def twitter_hashtag_was; end

    sig { void }
    def twitter_hashtag_will_change!; end

    sig { returns(::String) }
    def twitter_image_url; end

    sig { params(value: ::String).returns(::String) }
    def twitter_image_url=(value); end

    sig { returns(T::Boolean) }
    def twitter_image_url?; end

    sig { returns(T.nilable(::String)) }
    def twitter_image_url_before_last_save; end

    sig { returns(T.untyped) }
    def twitter_image_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def twitter_image_url_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def twitter_image_url_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def twitter_image_url_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def twitter_image_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def twitter_image_url_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def twitter_image_url_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def twitter_image_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def twitter_image_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def twitter_image_url_was; end

    sig { void }
    def twitter_image_url_will_change!; end

    sig { returns(T.nilable(::String)) }
    def twitter_username; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def twitter_username=(value); end

    sig { returns(T::Boolean) }
    def twitter_username?; end

    sig { returns(T.nilable(::String)) }
    def twitter_username_before_last_save; end

    sig { returns(T.untyped) }
    def twitter_username_before_type_cast; end

    sig { returns(T::Boolean) }
    def twitter_username_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def twitter_username_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def twitter_username_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def twitter_username_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def twitter_username_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def twitter_username_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def twitter_username_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def twitter_username_previously_was; end

    sig { returns(T.nilable(::String)) }
    def twitter_username_was; end

    sig { void }
    def twitter_username_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def unpublished_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def unpublished_at=(value); end

    sig { returns(T::Boolean) }
    def unpublished_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def unpublished_at_before_last_save; end

    sig { returns(T.untyped) }
    def unpublished_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def unpublished_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def unpublished_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def unpublished_at_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def unpublished_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def unpublished_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def unpublished_at_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def unpublished_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def unpublished_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def unpublished_at_was; end

    sig { void }
    def unpublished_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::Integer) }
    def watchers_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def watchers_count=(value); end

    sig { returns(T::Boolean) }
    def watchers_count?; end

    sig { returns(T.nilable(::Integer)) }
    def watchers_count_before_last_save; end

    sig { returns(T.untyped) }
    def watchers_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def watchers_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def watchers_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def watchers_count_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def watchers_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def watchers_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def watchers_count_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def watchers_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def watchers_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def watchers_count_was; end

    sig { void }
    def watchers_count_will_change!; end

    sig { returns(::String) }
    def wikipedia_url; end

    sig { params(value: ::String).returns(::String) }
    def wikipedia_url=(value); end

    sig { returns(T::Boolean) }
    def wikipedia_url?; end

    sig { returns(T.nilable(::String)) }
    def wikipedia_url_before_last_save; end

    sig { returns(T.untyped) }
    def wikipedia_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def wikipedia_url_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def wikipedia_url_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def wikipedia_url_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def wikipedia_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(::String) }
    def wikipedia_url_en; end

    sig { params(value: ::String).returns(::String) }
    def wikipedia_url_en=(value); end

    sig { returns(T::Boolean) }
    def wikipedia_url_en?; end

    sig { returns(T.nilable(::String)) }
    def wikipedia_url_en_before_last_save; end

    sig { returns(T.untyped) }
    def wikipedia_url_en_before_type_cast; end

    sig { returns(T::Boolean) }
    def wikipedia_url_en_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def wikipedia_url_en_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def wikipedia_url_en_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def wikipedia_url_en_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def wikipedia_url_en_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def wikipedia_url_en_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def wikipedia_url_en_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def wikipedia_url_en_previously_was; end

    sig { returns(T.nilable(::String)) }
    def wikipedia_url_en_was; end

    sig { void }
    def wikipedia_url_en_will_change!; end

    sig { returns(T.nilable(::String)) }
    def wikipedia_url_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def wikipedia_url_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def wikipedia_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def wikipedia_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def wikipedia_url_was; end

    sig { void }
    def wikipedia_url_will_change!; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_aasm_state?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_created_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_deleted_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_ended_on?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_episodes_count?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_facebook_og_image_url?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_id_value?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_key_pv_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_mal_anime_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_manual_episodes_count?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_media?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_no_episodes?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_number_format_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_official_site_url?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_official_site_url_en?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_ratings_count?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_recommended_image_url?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_records_count?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_released_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_released_at_about?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_satisfaction_rate?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_sc_tid?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_score?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_season_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_season_name?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_season_year?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_start_episode_raw_number?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_started_on?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_synopsis?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_synopsis_en?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_synopsis_source?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_synopsis_source_en?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_title?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_title_alter?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_title_alter_en?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_title_en?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_title_kana?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_title_ro?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_twitter_hashtag?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_twitter_image_url?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_twitter_username?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_unpublished_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_updated_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_watchers_count?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_wikipedia_url?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_wikipedia_url_en?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_work_records_count?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_work_records_with_body_count?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(::Integer) }
    def work_records_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def work_records_count=(value); end

    sig { returns(T::Boolean) }
    def work_records_count?; end

    sig { returns(T.nilable(::Integer)) }
    def work_records_count_before_last_save; end

    sig { returns(T.untyped) }
    def work_records_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def work_records_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def work_records_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def work_records_count_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def work_records_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def work_records_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def work_records_count_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def work_records_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def work_records_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def work_records_count_was; end

    sig { void }
    def work_records_count_will_change!; end

    sig { returns(::Integer) }
    def work_records_with_body_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def work_records_with_body_count=(value); end

    sig { returns(T::Boolean) }
    def work_records_with_body_count?; end

    sig { returns(T.nilable(::Integer)) }
    def work_records_with_body_count_before_last_save; end

    sig { returns(T.untyped) }
    def work_records_with_body_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def work_records_with_body_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def work_records_with_body_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def work_records_with_body_count_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def work_records_with_body_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def work_records_with_body_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def work_records_with_body_count_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def work_records_with_body_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def work_records_with_body_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def work_records_with_body_count_was; end

    sig { void }
    def work_records_with_body_count_will_change!; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def by_season(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def by_seasons(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def deleted(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from_current_season(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order_by_season(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def published(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def season_from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def season_until(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    sig { params(blk: T.proc.params(record: ::Work).returns(BasicObject)).returns(T::Array[::Work]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def slot_registered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def tracked_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unpublished(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def until_current_season(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_no_episodes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_no_image(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_no_season(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_no_slots(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_deleted(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Work } }

    sig { returns(T::Array[::Work]) }
    def to_a; end

    sig { returns(T::Array[::Work]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Work } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::Work } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Work } }

    sig do
      params(
        records: T.any(::Work, T::Enumerable[T.any(::Work, T::Enumerable[::Work])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Work, T::Enumerable[T.any(::Work, T::Enumerable[::Work])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Work, T::Enumerable[T.any(::Work, T::Enumerable[::Work])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Work, Integer, String, T::Enumerable[T.any(::Work, Integer, String, T::Enumerable[::Work])])
      ).returns(T::Array[::Work])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Work, Integer, String, T::Enumerable[T.any(::Work, Integer, String, T::Enumerable[::Work])])
      ).returns(T::Array[::Work])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Work]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Work, T::Enumerable[T.any(::Work, T::Enumerable[::Work])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Work, T::Enumerable[T.any(::Work, T::Enumerable[::Work])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Work, T::Enumerable[T.any(::Work, T::Enumerable[::Work])])
      ).returns(T::Array[::Work])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Work]) }
    def target; end

    sig { returns(T::Array[::Work]) }
    def to_a; end

    sig { returns(T::Array[::Work]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Work } }

    sig { returns(T::Array[::Work]) }
    def to_a; end

    sig { returns(T::Array[::Work]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::Work } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::Work } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
